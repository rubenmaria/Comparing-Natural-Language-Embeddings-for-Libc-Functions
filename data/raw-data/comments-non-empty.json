{
  "__argp_make_fmtstream": "Return an argp_fmtstream that outputs to STREAM, and which prefixes lines\n   written on it with LMARGIN spaces and limits them to RMARGIN columns\n   total.  If WMARGIN >= 0, words that extend past RMARGIN are wrapped by\n   replacing the whitespace before them with a newline and WMARGIN spaces.\n   Otherwise, chars beyond RMARGIN are simply dropped until a newline.\n   Returns NULL if there was an error.",
  "__argp_fmtstream_free": "Flush FS to its stream, and free it (but don't close the stream).",
  "__argp_fmtstream_update": "Process FS's buffer so that line wrapping is done from POINT_OFFS to the\n   end of its buffer.  This code is mostly from glibc stdio/linewrap.c.",
  "__argp_fmtstream_ensure": "Ensure that FS has space for AMOUNT more bytes in its buffer, either by\n   growing the buffer, or by flushing it.  True is returned iff we succeed.",
  "fill_in_uparams": "Read user options from the environment, and fill in UPARAMS appropriately.",
  "find_char": "Returns true if CH occurs between BEG and END.",
  "make_hol": "Create a struct hol from the options in ARGP.  CLUSTER is the\n   hol_cluster in which these entries occur, or NULL if at the root.",
  "hol_add_cluster": "Add a new cluster to HOL, with the given GROUP and HEADER (taken from the\n   associated argp child list entry), INDEX, and PARENT, and return a pointer\n   to it.  ARGP is the argp that this cluster results from.",
  "hol_free": "Free HOL and any resources it uses.",
  "hol_entry_short_iterate": "Iterate across the short_options of the given ENTRY.  Call FUNC for each.\n   Stop when such a call returns a non-zero value, and return this value.\n   If all FUNC invocations returned 0, return 0.",
  "hol_entry_long_iterate": "Iterate across the long options of the given ENTRY.  Call FUNC for each.\n   Stop when such a call returns a non-zero value, and return this value.\n   If all FUNC invocations returned 0, return 0.",
  "until_short": "A filter that returns true for the first short option of a given ENTRY.",
  "hol_entry_first_short": "Returns the first valid short option in ENTRY, or 0 if there is none.",
  "hol_entry_first_long": "Returns the first valid long option in ENTRY, or NULL if there is none.",
  "hol_find_entry": "Returns the entry in HOL with the long option name NAME, or NULL if there is\n   none.",
  "hol_set_group": "If an entry with the long option NAME occurs in HOL, set it's special\n   sort position to GROUP.",
  "group_cmp": "Order by group:  0, 1, 2, ..., n, -m, ..., -2, -1.",
  "hol_sibling_cluster_cmp": "Compare clusters CL1 and CL2 by the order that they should appear in\n   output.  Assume CL1 and CL2 have the same parent.",
  "hol_cousin_cluster_cmp": "Compare clusters CL1 and CL2 by the order that they should appear in\n   output.  Assume CL1 and CL2 are at the same depth.",
  "hol_cluster_cmp": "Compare clusters CL1 and CL2 by the order that they should appear in\n   output.",
  "hol_cluster_base": "Return the ancestor of CL that's just below the root (i.e., has a parent\n   of 0).",
  "canon_doc_option": "Given the name of an OPTION_DOC option, modifies *NAME to start at the tail\n   that should be used for comparisons, and returns true iff it should be\n   treated as a non-option.",
  "hol_entry_cmp": "Order ENTRY1 and ENTRY2 by the order which they should appear in a help\n   listing.\n   This function implements a total order, that is:\n     - if cmp (entry1, entry2) < 0 and cmp (entry2, entry3) < 0,\n       then cmp (entry1, entry3) < 0.\n     - if cmp (entry1, entry2) < 0 and cmp (entry2, entry3) == 0,\n       then cmp (entry1, entry3) < 0.\n     - if cmp (entry1, entry2) == 0 and cmp (entry2, entry3) < 0,\n       then cmp (entry1, entry3) < 0.\n     - if cmp (entry1, entry2) == 0 and cmp (entry2, entry3) == 0,\n       then cmp (entry1, entry3) == 0.",
  "hol_entry_qcmp": "Variant of hol_entry_cmp with correct signature for qsort.",
  "hol_sort": "Sort HOL by group and alphabetically by option name (with short options\n   taking precedence over long).  Since the sorting is for display purposes\n   only, the shadowing of options isn't effected.",
  "hol_append": "Append MORE to HOL, destroying MORE in the process.  Options in HOL shadow\n   any in MORE with the same name.",
  "argp_hol": "Make a HOL containing all levels of options in ARGP.  CLUSTER is the\n   cluster in which ARGP's entries should be clustered, or 0.",
  "indent_to": "Inserts enough spaces to make sure STREAM is at column COL.",
  "space": "Output to STREAM either a space, or a newline if there isn't room for at\n   least ENSURE characters before the right margin.",
  "arg": "If the option REAL has an argument, we print it in using the printf\n   format REQ_FMT or OPT_FMT depending on whether it's a required or\n   optional argument.",
  "filter_doc": "If a user doc filter should be applied to DOC, do so.",
  "print_header": "Prints STR as a header line, with the margin lines set appropriately, and\n   notes the fact that groups should be separated with a blank line.  ARGP is\n   the argp that should dictate any user doc filtering to take place.  Note\n   that the previous wrap margin isn't restored, but the left margin is reset\n   to 0.",
  "hol_cluster_is_child": "Return true if CL1 is a child of CL2.",
  "comma": "Inserts a comma if this isn't the first item on the line, and then makes\n   sure we're at least to column COL.  If this *is* the first item on a line,\n   prints any pending whitespace/headers that should precede this line. Also\n   clears FIRST.",
  "hol_entry_help": "Print help for ENTRY to STREAM.",
  "hol_help": "Output a long help message about the options in HOL to STREAM.",
  "add_argless_short_opt": "If OPT is a short option without an arg, append its key to the string\n   pointer pointer to by COOKIE, and advance the pointer.",
  "usage_argful_short_opt": "If OPT is a short option with an arg, output a usage entry for it to the\n   stream pointed at by COOKIE.",
  "usage_long_opt": "Output a usage entry for the long option opt to the stream pointed at by\n   COOKIE.",
  "hol_usage": "Print a short usage description for the arguments in HOL to STREAM.",
  "argp_args_levels": "Calculate how many different levels with alternative args strings exist in\n   ARGP.",
  "argp_args_usage": "Print all the non-option args documented in ARGP to STREAM.  Any output is\n   preceded by a space.  LEVELS is a pointer to a byte vector the length\n   returned by argp_args_levels; it should be initialized to zero, and\n   updated by this routine for the next call if ADVANCE is true.  True is\n   returned as long as there are more patterns to output.",
  "argp_doc": "Print the documentation for ARGP to STREAM; if POST is false, then\n   everything preceding a `\\v' character in the documentation strings (or\n   the whole string, for those with none) is printed, otherwise, everything\n   following the `\\v' character (nothing for strings without).  Each separate\n   bit of documentation is separated a blank line, and if PRE_BLANK is true,\n   then the first is as well.  If FIRST_ONLY is true, only the first\n   occurrence is output.  Returns true if anything was output.",
  "_help": "Output a usage message for ARGP to STREAM.  If called from\n   argp_state_help, STATE is the relevant parsing state.  FLAGS are from the\n   set ARGP_HELP_*.  NAME is what to use wherever a `program name' is\n   needed.",
  "__argp_help": "Output a usage message for ARGP to STREAM.  FLAGS are from the set\n   ARGP_HELP_*.  NAME is what to use wherever a `program name' is needed.",
  "__argp_state_help": "Output, if appropriate, a usage message for STATE to STREAM.  FLAGS are\n   from the set ARGP_HELP_*.",
  "__argp_error_internal": "If appropriate, print the printf string FMT and following args, preceded\n   by the program name and `:', to stderr, and followed by a `Try ... --help'\n   message, then exit (1).",
  "__argp_failure_internal": "Similar to the standard gnu error-reporting function error(), but will\n   respect the ARGP_NO_EXIT and ARGP_NO_ERRS flags in STATE, and will print\n   to STATE->err_stream.  This is useful for argument parsing code that is\n   shared between program startup (when exiting is desired) and runtime\n   option parsing (when typically an error code is returned instead).  The\n   difference between this function and argp_error is that the latter is for\n   *parsing errors*, and the former is for other problems that occur during\n   parsing but don't reflect a (syntactic) problem with the input.",
  "find_long_option": "Returns the offset into the getopt long options array LONG_OPTIONS of a\n   long option with called NAME, or -1 if none is found.  Passing NULL as\n   NAME will return the number of options.",
  "group_parse": "Call GROUP's parser with KEY and ARG, swapping any group-specific info\n   from STATE before calling, and back into state afterwards.  If GROUP has\n   no parser, EBADKEY is returned.",
  "convert_options": "Converts all options in ARGP (which is put in GROUP) and ancestors\n   into getopt options stored in SHORT_OPTS and LONG_OPTS; SHORT_END and\n   CVT->LONG_END are the points at which new options are added.  Returns the\n   next unused group entry.  CVT holds state used during the conversion.",
  "parser_convert": "Find the merged set of getopt options, with keys appropriately prefixed.",
  "calc_sizes": "For ARGP, increments the NUM_GROUPS field in SZS by the total number of\n argp structures descended from it, and the SHORT_LEN & LONG_LEN fields by\n the maximum lengths of the resulting merged getopt short options string and\n long-options array, respectively.",
  "parser_init": "Initializes PARSER to parse ARGP in a manner described by FLAGS.",
  "parser_finalize": "Free any storage consumed by PARSER (but not PARSER itself).",
  "parser_parse_arg": "Call the user parsers to parse the non-option argument VAL, at the current\n   position, returning any error.  The state NEXT pointer is assumed to have\n   been adjusted (by getopt) to point after this argument; this function will\n   adjust it correctly to reflect however many args actually end up being\n   consumed.",
  "parser_parse_opt": "Call the user parsers to parse the option OPT, with argument VAL, at the\n   current position, returning any error.",
  "parser_parse_next": "Parse the next argument in PARSER (as indicated by PARSER->state.next).\n   Any error from the parsers is returned, and *ARGP_EBADKEY indicates\n   whether a value of EBADKEY is due to an unrecognized argument (which is\n   generally not fatal).",
  "__argp_parse": "Parse the options strings in ARGC & ARGV according to the argp in ARGP.\n   FLAGS is one of the ARGP_ flags above.  If END_INDEX is non-NULL, the\n   index in ARGV of the first unparsed option is returned in it.  If an\n   unknown option is present, EINVAL is returned; if some parser routine\n   returned a non-zero value, it is returned; otherwise 0 is returned.",
  "__argp_input": "Return the input field for ARGP in the parser corresponding to STATE; used\n   by the help routines.",
  "parse_opt": "Handle program arguments.",
  "__assert_fail": "Define (weakly) our own assert failure function which doesn't use stdio.\n   If we are linked into the user program (-ldl), the normal __assert_fail\n   defn can override this one.",
  "timer_start": "Run for approximately DURATION seconds, and it does not matter who\n   receive the signal (so not need to mask it on main thread).",
  "get_block_size": "Get a random block size with an inverse square distribution.",
  "malloc_benchmark_loop": "Allocate and free blocks in a random order.",
  "__isnan_inl": "Inlines similar to existing math_private.h versions.",
  "test_producer_thread": "We only benchmark the consumer thread, but both threads are doing\n   essentially the same thing, and never run in parallel due to the\n   locks.  Thus, even if they run on separate processing cores, we\n   count the time for both threads.",
  "do_one_rand_plus_branch_test": "Expectation is usecases of strchr check the return. Otherwise\n   strchrnul would almost always be better. Since there is another\n   branch coming we want to test the case where a potential branch in\n   strchr can be used to skip a later mispredict because of the\n   relationship between the two branches.",
  "basic_strstr": "Simple yet efficient strstr - for needles < 32 bytes it is 2-4 times\n   faster than the optimized twoway_strstr.",
  "twoway_strstr": "Optimized Two-way implementation from GLIBC 2.29.",
  "test_hard_needle": "Test needles which exhibit worst-case performance.  This shows that\n   basic_strstr is quadratic and thus unsuitable for large needles.\n   On the other hand Two-way and skip table implementations are linear with\n   increasing needle sizes.  The slowest cases of the two implementations are\n   within a factor of 2 on several different microarchitectures.",
  "catopen": "Open the catalog and return a descriptor for the catalog.",
  "catgets": "Return message from message catalog.",
  "catclose": "Return resources used for loaded message catalog.",
  "print_version": "Print the version information.",
  "error_print": "The address of this function will be assigned to the hook in the error\n   functions.",
  "normalize_line": "Normalize given string *in*place* by processing escape sequences\n   and quote characters.",
  "do_bz17905": "Test for unbounded alloca.",
  "__gmon_start__": "We cannot use the normal constructor mechanism to call\n   __gmon_start__ because gcrt1.o appears before crtbegin.o in the link.\n   Instead crti.o calls it specially.",
  "_dl_start": "This function is defined here so that if this file ever gets into\n   ld.so we will get a link error.  Having this file silently included\n   in ld.so causes disaster, because the _init definition above will\n   cause ld.so to gain an init function, which is not a cool thing.",
  "call_fini": "Likewise for the destructor.",
  "LIBC_START_MAIN": "Note: The init and fini parameters are no longer used.  fini is\n   completely unused, init is still called if not NULL, but the\n   current startup code always passes NULL.  (In the future, it would\n   be possible to use fini to pass a version code if init is NULL, to\n   indicate the link-time glibc without introducing a hard\n   incompatibility for new programs with older glibc versions.)\n\n   For dynamically linked executables, the dynamic segment is used to\n   locate constructors and destructors.  For statically linked\n   executables, the relevant symbols are access directly.",
  "_dl_relocate_static_pie": "Relocate static executable with PIE.",
  "_tolower": "Real function versions of the non-ANSI ctype functions.",
  "___asprintf_chk": "Write formatted output from FORMAT to a string which is\n   allocated with malloc and stored in *STRING_PTR.",
  "compare": "Using buffer buf, run strptime.  Compare results against expect,\n  the expected result.  Report failures and verbose results to stdout.\n  Update the result counts.  Return 1 if test failed, 0 if passed.",
  "___fprintf_chk": "Write formatted output to FP from the format string FORMAT.",
  "___printf_chk": "Write formatted output to stdout from the format string FORMAT.",
  "__readonly_area": "Return 1 if the whole area PTR .. PTR+SIZE is not writable.\n   Return -1 if it is writable.",
  "___snprintf_chk": "Write formatted output into S, according to the format\n   string FORMAT, writing no more than MAXLEN characters.",
  "___sprintf_chk": "Write formatted output into S, according to the format string FORMAT.",
  "__stpcpy_chk": "Copy SRC to DEST, returning the address of the terminating '\\0' in DEST.",
  "__stpncpy_chk": "Copy no more than N characters of SRC to DEST, returning the address of\n   the terminating '\\0' in DEST, if any, or else DEST + N.",
  "__strcat_chk": "Append SRC on the end of DEST.",
  "__strcpy_chk": "Copy SRC to DEST with checking of destination buffer overflow.",
  "__strlcat_chk": "Check that the user-supplied size does not exceed the\n   compiler-determined size, and then forward to strlcat.",
  "__strlcpy_chk": "Check that the user-supplied size does not exceed the\n   compiler-determined size, and then forward to strlcpy.",
  "set_socket_buffer": "Set the send buffer of socket S to 1 byte so any send operation\n   done with WRITE_BUFFER_SIZE bytes will force syscall blocking.",
  "recurse": "Run the test multiple times, to check finding a new namespace while\n   another namespace is already in use.  This used to trigger bug 29600.",
  "my_vsprintf": "Invoke vsprintf or __vsprintf_chk according to fortify_mode.",
  "do_tests": "Run the tests in all fortify modes.",
  "dummy_printf_function": "printf callback that falls back to the glibc-supplied\n   implementation.",
  "dummy_arginfo_function": "Likewise for the type information.",
  "___vfprintf_chk": "Write formatted output to FP from the format string FORMAT.",
  "___vprintf_chk": "Write formatted output to stdout from the format string FORMAT.",
  "___vsnprintf_chk": "Write formatted output into S, according to the format\n   string FORMAT, writing no more than MAXLEN characters.",
  "__wcpcpy_chk": "Copy SRC to DEST, returning the address of the terminating L'\\0' in\n   DEST.  Check for overflows.",
  "__wcpncpy_chk": "Copy no more than N wide-characters of SRC to DEST.",
  "__wcscat_chk": "Append SRC on the end of DEST.  Check for overflows.",
  "__wcscpy_chk": "Copy SRC to DEST.",
  "__wcslcat_chk": "Check that the user-supplied size does not exceed the\n   compiler-determined size, and then forward to wcslcat.",
  "__wcslcpy_chk": "Check that the user-supplied size does not exceed the\n   compiler-determined size, and then forward to wcslcpy.",
  "__wcsncat_chk": "Append no more than N wide-character of SRC onto DEST.",
  "__wcsncpy_chk": "Copy no more than N wide-characters of SRC to DEST.",
  "__wctomb_chk": "Defined in wctomb.c.",
  "__closedir": "Close the directory stream DIRP.\n   Return 0 if successful, -1 if not.",
  "real_test": "Do the real work.",
  "__opendir": "Open a directory stream on NAME.",
  "__readdir64": "Read a directory entry from DIRP.",
  "readdir64_r": "Read a directory entry from DIRP, store result in ENTRY and return\n   pointer to result in *RESULT.",
  "__readdir_r": "Read a directory entry from DIRP.",
  "__rewinddir": "Rewind DIRP to the beginning of the directory.",
  "seekdir": "XXX should be __seekdir ?",
  "telldir": "Return the current position of DIRP.",
  "verify_empty": "The directory should be empty save the . and .. files.",
  "__dlinfo": "Also used with _dlfcn_hook.",
  "__dlmopen": "Also used with _dlfcn_hook.",
  "__dlopen": "Also used with _dlfcn_hook.",
  "__dlsym": "Also used with _dlfcn_hook.",
  "__dlvsym": "Also used with _dlfcn_hook.",
  "__libc_dlerror_result_free": "Called during thread shutdown to free resources.",
  "bar": "foo calls bar with indirect branch via PLT.  PLT rewrite should\n   change it to direct branch.",
  "call_func": "Call function func_name in DSO dso_name via dlopen.",
  "assign_glibc_hwcaps_indices_compare": "Helper for sorting struct glibc_hwcaps_subdirectory elements by\n   name.",
  "glibc_hwcaps_count": "Count the number of hwcaps subdirectories which are actually\n   used.",
  "assign_glibc_hwcaps_indices": "Compute the section_index fields for all",
  "glibc_hwcaps_string": "Returns the string with the name of the glibcs-hwcaps subdirectory\n   associated with ENTRY->hwcap.  file_base must be the base address\n   for string table indices.",
  "check_new_cache": "Print an error and exit if the new-file cache is internally\n   inconsistent.",
  "print_extensions": "Print the extension information in *EXT.",
  "print_cache": "Print the whole cache file, if a file contains the new cache format\n   hidden in the old one, print the contents of the new format.",
  "init_cache": "Initialize cache data structures.",
  "write_extensions": "Write the cache extensions to FD.  The string table is shifted by\n   STRING_TABLE_OFFSET.  The extension directory is assumed to be\n   located at CACHE_EXTENSION_OFFSET.  assign_glibc_hwcaps_indices\n   must have been called.",
  "compute_hwcap_value": "Compute the hwcap value from ENTRY.",
  "save_cache": "Save the contents of the cache.",
  "add_to_cache": "Add one library to the cache.",
  "aux_cache_entry_id_hash": "Simplistic hash function for aux_cache_entry_id.",
  "load_aux_cache": "Load auxiliary cache to search for unchanged entries.",
  "save_aux_cache": "Save the contents of the auxiliary cache.",
  "chroot_canon": "Return the canonical absolute name of file NAME as if chroot(CHROOT) was\n   done first.  A canonical name does not contain any `.', `..' components\n   nor any repeated path separators ('/') or symlinks.  All path components\n   must exist and NAME must be absolute filename.  The result is malloc'd.\n   The returned name includes the CHROOT prefix.",
  "_dl_addr_inside_object": "Return non-zero if ADDR lies within one of L's loadable segments.\n   We have three cases we care about.\n\n   Case 1: addr is above a segment.\n   +==================+<- l_map_end\n   |                  |<- addr\n   |------------------|<- l_addr + p_vaddr + p_memsz\n   |                  |\n   |                  |\n   |------------------|<- l_addr + p_vaddr\n   |------------------|<- l_addr\n   |                  |\n   +==================+<- l_map_start\n\n   Case 2: addr is within a segments.\n   +==================+<- l_map_end\n   |                  |\n   |------------------|<- l_addr + p_vaddr + p_memsz\n   |                  |<- addr\n   |                  |\n   |------------------|<- l_addr + p_vaddr\n   |------------------|<- l_addr\n   |                  |\n   +==================+<- l_map_start\n\n   Case 3: addr is below a segments.\n   +==================+<- l_map_end\n   |                  |\n   |------------------|<- l_addr + p_vaddr + p_memsz\n   |                  |\n   |                  |\n   |------------------|<- l_addr + p_vaddr\n   |------------------|<- l_addr\n   |                  |<- addr\n   +==================+<- l_map_start\n\n   All the arithmetic is unsigned and we shift all the values down by\n   l_addr + p_vaddr and then compare the normalized addr to the range\n   of interest i.e. 0 <= addr < p_memsz.",
  "_dl_audit_pltexit": "This is used by _dl_runtime_profile, not used on static code.",
  "glibc_hwcaps_priorities_free": "Deallocate the glibc_hwcaps_priorities array.",
  "glibc_hwcaps_compare": "Ordered comparison of a hwcaps string from the cache on the left\n   (identified by its string table index) and a _dl_hwcaps_priorities\n   element on the right.",
  "glibc_hwcaps_priorities_init": "Initialize the glibc_hwcaps_priorities array and its length,\n   glibc_hwcaps_priorities_length.",
  "glibc_hwcaps_priority": "Return the priority of the cache_extension_tag_glibc_hwcaps section\n   entry at INDEX.  Zero means do not use.  Otherwise, lower values\n   indicate greater preference.",
  "_dl_cache_verify_ptr": "True if PTR is a valid string table index.",
  "_dl_cache_file_entry": "Compute the address of the element INDEX of the array at LIBS.\n   Conceptually, this is &LIBS[INDEX], but use ENTRY_SIZE for the size\n   of *LIBS.",
  "search_cache": "We use binary search since the table is sorted in the cache file.\n   The first matching entry in the table is returned.  It is important\n   to use the same algorithm as used while generating the cache file.\n   STRING_TABLE_SIZE indicates the maximum offset in STRING_TABLE at\n   which data is mapped; it is not exact.",
  "_dl_load_cache_lookup": "Look up NAME in ld.so.cache and return the file name stored there, or null\n   if none is found.  The cache is loaded if it was not already.  If loading\n   the cache previously failed there will be no more attempts to load it.\n   The caller is responsible for freeing the returned string.  The ld.so.cache\n   may be unmapped at any time by a completing recursive dlopen and\n   this function must take care that it does not return references to\n   any data in the mapping.",
  "_dl_unload_cache": "If the system does not support MAP_COPY we cannot leave the file open\n   all the time since this would create problems when the file is replaced.\n   Therefore we provide this function to close the file and open it again\n   once needed.",
  "fatal_error": "Lossage while resolving the program's own symbols is always fatal.",
  "remove_slotinfo": "Returns true we an non-empty was found.",
  "_dl_debug_update": "Update the `r_map' member and return the address of `struct r_debug'\n   of the namespace NS.",
  "_dl_debug_initialize": "Initialize _r_debug_extended for the namespace NS.  LDBASE is the\n   run-time load address of the dynamic linker, to be put in\n   _r_debug_extended.r_ldbase.  Return the address of _r_debug.",
  "_dl_debug_state": "This function exists solely to have a breakpoint set on it by the\n   debugger.  The debugger is supposed to find this function's address by\n   examining the r_brk member of struct r_debug, but GDB 4.15 in fact looks\n   for this particular symbol name in the PT_INTERP file.",
  "preload": "Test PRELOAD with $PLATFORM.\n   Copyright (C) 2017-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "_dl_putc": "Write CH to standard output.",
  "print_quoted_char": "Print CH to standard output, quoting it if necessary.",
  "print_string_length": "Print S of LEN bytes to standard output, quoting characters as\n   needed.",
  "unfiltered_envvar": "Return true if ENV is an unfiltered environment variable.",
  "print_environ": "Dump the process environment.",
  "print_paths": "Print configured paths and the built-in search path.",
  "_dl_next_ld_env_entry": "Walk through the environment of the process and return all entries\n   starting with `LD_'.",
  "_dl_error_free": "Call free in the main libc.so.  This allows other namespaces to\n   free pointers on the main libc heap, via GLRO (dl_error_free).  It\n   also avoids calling free on the special, pre-allocated\n   out-of-memory error message.",
  "oom_exception": "Dummy allocation object used if allocating the message buffer\n   fails.",
  "adjust_message_buffer": "Adjust the message buffer to indicate whether it is possible to\n   free it.  EXCEPTION->errstring must be a potentially deallocatable\n   pointer.",
  "_dl_make_stack_executable": "There is no portable way to know the bounds of the initial thread's stack\n   so as to mprotect it.",
  "_dl_find_object_slow": "Fallback implementation of _dl_find_object.  It uses a linear\n   search, needs locking, and is not async-signal-safe.  It is used in\n   _dl_find_object prior to initialization, when called from audit\n   modules.  It also serves as the reference implementation for\n   _dl_find_object.",
  "_dlfo_mappings_segment_count_used": "Returns the number of actually used elements in all segments\n   starting at SEG.",
  "_dlfo_mappings_segment_count_allocated": "Compute the total number of available allocated segments linked\n   from SEG.",
  "_dlfo_mappings_segment_allocate_unpadded": "Allocate an empty segment.  This used for the first ever\n   allocation.",
  "_dlfo_mappings_segment_allocate": "Allocate an empty segment that is at least SIZE large.  PREVIOUS\n   points to the chain of previously allocated segments and can be\n   NULL.",
  "_dlfo_read_start_version": "TM version at the start of the read operation.",
  "_dlfo_read_version_locked": "Optimized variant of _dlfo_read_start_version which can be called\n   when the loader is write-locked.",
  "_dlfo_mappings_begin_update": "Update the version to reflect that an update is happening.  This\n   does not change the bit that controls the active segment chain.",
  "_dlfo_mappings_end_update": "Installs the just-updated version as the active version.",
  "_dlfo_read_success": "Return true if the read was successful, given the start\n   version.",
  "_dlfo_mappings_active_segment": "Returns the active segment identified by the specified start\n   version.",
  "_dlfo_lookup": "Searches PC among the address-sorted array [FIRST1, FIRST1 +\n   SIZE).  Assumes PC >= FIRST1->map_start.  Returns a pointer to the\n   element that contains PC, or NULL if there is no such element.",
  "_dlfo_sort_mappings": "Selection sort based on mapping start address.",
  "_dlfo_update_init_seg": "Initializes the segment for writing.  Returns the target write\n   index (plus 1) in this segment.  The index is chosen so that a\n   partially filled segment still has data at index 0.",
  "_dl_find_object_update_1": "Invoked from _dl_find_object_update after sorting.  Stores to the\n   shared data need to use relaxed MO.  But plain loads can be used\n   because the loader lock prevents concurrent stores.",
  "new_fdesc_table": "Create a new fdesc table and return a pointer to the first fdesc\n   entry.  The fdesc lock must have been acquired already.",
  "_dl_unmap": "Unmap the dynamic object, but also release its TLS descriptor table\n   if there is one.",
  "_dl_hwcaps_subdirs_active": "Number of components in _dl_hwcaps_subdirs.",
  "update_hwcaps_counts": "Update *COUNTS according to the contents of HWCAPS.  Skip over\n   entries whose bit is not set in MASK.",
  "copy_hwcaps": "Copy HWCAPS into the string pairs and strings, advancing *TARGET.\n   Skip over entries whose bit is not set in MASK.",
  "compute_priorities": "Allocate _dl_hwcaps_priorities and fill it with data.",
  "sort_priorities_by_name": "Sort the _dl_hwcaps_priorities array by name.",
  "_dl_important_hwcaps": "Return an array of useful/necessary hardware capability names.",
  "dlerror_run": "The purpose of this file is to provide wrappers around the dynamic\n   linker error mechanism (similar to dlopen() et al in libdl) which\n   are usable from within libc.  Generally we want to throw away the\n   string that dlerror() would return and just pass back a null pointer\n   for errors.  This also lets the rest of libc not know about the error\n   handling mechanism.\n\n   Much of this code came from gconv_dl.c with slight modifications.",
  "__libc_dlopen_mode": "... and these functions call dlerror_run.",
  "__libc_dlvsym": "Replacement for dlvsym.  MAP must be a real map.  This function\n   returns NULL without setting the dlerror value in case of static\n   dlopen from an old binary.",
  "is_dst": "Given a substring starting at INPUT, just after the DST '$' start\n   token, determine if INPUT contains DST token REF, following the\n   ELF gABI rules for DSTs:\n\n   * Longest possible sequence using the rules (greedy).\n\n   * Must start with a $ (enforced by caller).\n\n   * Must follow $ with one underscore or ASCII [A-Za-z] (caller\n     follows these rules for REF) or '{' (start curly quoted name).\n\n   * Must follow first two characters with zero or more [A-Za-z0-9_]\n     (enforced by caller) or '}' (end curly quoted name).\n\n   If the sequence is a DST matching REF then the length of the DST\n   (excluding the $ sign but including curly braces, if any) is\n   returned, otherwise 0.",
  "_dl_dst_count": "INPUT should be the start of a path e.g DT_RPATH or name e.g.\n   DT_NEEDED.  The return value is the number of known DSTs found.  We\n   count all known DSTs regardless of __libc_enable_secure; the caller\n   is responsible for enforcing the security of the substitution rules\n   (usually _dl_dst_substitute).",
  "_dl_dst_substitute": "Process INPUT for DSTs and store in RESULT using the information\n   from link map L to resolve the DSTs. This function only handles one\n   path at a time and does not handle colon-separated path lists (see\n   fillin_rpath ()).  Lastly the size of result in bytes should be at\n   least equal to the value returned by DL_DST_REQUIRED.  Note that it\n   is possible for a DT_NEEDED, DT_AUXILIARY, and DT_FILTER entries to\n   have colons, but we treat those as literal colons here, not as path\n   list delimiters.",
  "expand_dynamic_string_token": "Return a malloc allocated copy of INPUT with all recognized DSTs\n   replaced. On some platforms it might not be possible to determine the\n   path from which the object belonging to the map is loaded.  In this\n   case the path containing the DST is left out.  On error NULL\n   is returned.",
  "add_name_to_object": "Add `name' to the list of names for a particular shared object.\n   `name' is expected to have been allocated with malloc and will\n   be freed if the shared object already has this name.\n   Returns false if the object already had this name.",
  "cache_rpath": "Make sure cached path information is stored in *SP\n   and return true if there are any paths to search there.",
  "_dl_process_pt_gnu_property": "Process PT_GNU_PROPERTY program header PH in module L after\n   PT_LOAD segments are mapped.  Only one NT_GNU_PROPERTY_TYPE_0\n   note is handled which contains processor specific properties.\n   FD is -1 for the kernel mapped main executable otherwise it is\n   the fd used for loading module L.",
  "print_search_path": "Print search path.",
  "open_verify": "Open a file and verify it is an ELF file for this architecture.  We\n   ignore only ELF files for other architectures.  Non-ELF files and\n   ELF files with different header information cause fatal errors since\n   this could mean there is something wrong in the installation and the\n   user might want to know about this.\n\n   If FD is not -1, then the file is already open and FD refers to it.\n   In that case, FD is consumed for both successful and error returns.",
  "open_path": "Try to open NAME in one of the directories in SPS.  Return the fd, or -1.\n   If successful, fill in *REALNAME with the malloc'd full directory name.  If\n   it turns out that none of the directories in SPS exists, SPS->DIRS is\n   replaced with (void *) -1, and the old value is free()d if SPS->MALLOCED is\n   true.",
  "_dl_map_object": "Map in the shared object file NAME.",
  "_dl_lookup_direct": "This function corresponds to do_lookup_x in elf/dl-lookup.c.  The\n   variant here is simplified because it does not search object\n   dependencies.  It is optimized for a successful lookup.",
  "enter_unique_sym": "Utility function for do_lookup_unique.  Add a symbol to TABLE.",
  "mark_nodelete": "Mark MAP as NODELETE according to the lookup mode in FLAGS.  During\n   initial relocation, NODELETE state is pending only.",
  "is_nodelete": "Return true if MAP is marked as NODELETE according to the lookup\n   mode in FLAGS>",
  "do_lookup_unique": "Utility function for do_lookup_x. Lookup an STB_GNU_UNIQUE symbol\n   in the unique symbol table, creating a new entry if necessary.\n   Return the matching symbol in RESULT.",
  "do_lookup_x": "Inner part of the lookup functions.  We return a value > 0 if we\n   found the symbol, the value 0 if nothing is found and < 0 if\n   something bad happened.",
  "add_dependency": "Add extra dependency on MAP to UNDEF_MAP.",
  "_dl_lookup_symbol_x": "Search loaded objects' symbol tables for a definition of the symbol\n   UNDEF_NAME, perhaps with a requested version for the symbol.\n\n   We must never have calls to the audit functions inside this function\n   or in any function which gets called.  If this would happen the audit\n   code might create a thread which can throw off all the scope locking.",
  "__minimal_malloc": "Allocate an aligned memory block.",
  "__minimal_calloc": "We use this function occasionally since the real implementation may\n   be optimized when it can assume the memory it returns already is\n   set to NUL.",
  "__minimal_free": "This will rarely be called.",
  "__minimal_realloc": "This is only called with the most recent block returned by malloc.",
  "lookup_malloc_symbol": "Lookup NAME at VERSION in the scope of MATCH.",
  "__strerror_r": "Return a string describing the errno code in ERRNUM.",
  "_dl_sysdep_read_whole_file": "Read the whole contents of FILE into new mmap'd space with given\n   protections.  *SIZEP gets the size of the file.  On error MAP_FAILED\n   is returned.",
  "_dl_name_match_p": "Test whether given NAME matches any of the names of the given object.",
  "_dl_strtoul": "A stripped down strtoul-like implementation for very early use.  It\n   does not set errno if the result is outside bounds because it may get\n   called before errno may have been set up.",
  "_dl_add_to_namespace_list": "Add the new link_map NEW to the end of the namespace list.",
  "_dl_new_object": "Allocate a `struct link_map' for a new object being loaded,\n   and enter it into the _dl_loaded list.",
  "add_to_global_resize_failure": "Called in case the global scope cannot be extended.",
  "add_to_global_resize": "Grow the global scope array for the namespace, so that all the new\n   global objects can be added later in add_to_global_update, without\n   risk of memory allocation failure.  add_to_global_resize raises\n   exceptions for memory allocation errors.",
  "add_to_global_update": "Actually add the new global objects to the global scope.  Must be\n   called after add_to_global_resize.  This function cannot fail.",
  "_dl_find_dso_for_object": "Search link maps in all namespaces for the DSO that contains the object at\n   address ADDR.  Returns the pointer to the link map of the matching DSO, or\n   NULL if a match is not found.",
  "scope_has_map": "Return true if NEW is found in the scope for MAP.",
  "scope_size": "Return the length of the scope for MAP.",
  "resize_scopes": "Resize the scopes of depended-upon objects, so that the new object\n   can be added later without further allocation of memory.  This\n   function can raise an exceptions due to malloc failure.",
  "update_scopes": "Second stage of resize_scopes: Add NEW to the scopes.  Also print\n   debugging information about scopes if requested.\n\n   This function cannot raise an exception because all required memory\n   has been allocated by a previous call to resize_scopes.",
  "resize_tls_slotinfo": "Call _dl_add_to_slotinfo with DO_ADD set to false, to allocate\n   space in GL (dl_tls_dtv_slotinfo_list).  This can raise an\n   exception.  The return value is true if any of the new objects use\n   TLS.",
  "update_tls_slotinfo": "Second stage of TLS update, after resize_tls_slotinfo.  This\n   function does not raise any exception.  It should only be called if\n   resize_tls_slotinfo returned true.",
  "activate_nodelete": "Mark the objects as NODELETE if required.  This is delayed until\n   after dlopen failure is not possible, so that _dl_close can clean\n   up objects if necessary.",
  "_dl_open_relocate_one_object": "Relocate the object L.  *RELOCATION_IN_PROGRESS controls whether\n   the debugger is notified of the start of relocation processing.",
  "_dl_get_origin": "On Linux >= 2.1 systems which have the dcache implementation we can get\n   the path of the application from the /proc/self/exe symlink.  Try this\n   first and fall back on the generic method if necessary.",
  "_dl_debug_strlen": "The function might be called before the process is self-relocated.",
  "_dl_debug_vdprintf": "Bare-bones printf implementation.  This function only knows about\n   the formats and flags needed and can handle only up to 64 stripes in\n   the output.",
  "_dl_debug_printf": "Write to debug file.",
  "_dl_debug_printf_c": "Write to debug file but don't start with a tag.",
  "_dl_dprintf": "Write the given file descriptor.",
  "_dl_start_profile": "Set up profiling data to profile object described by MAP.  The output\n   file is found (or created) in OUTPUT_DIR.",
  "_dl_try_allocate_static_tls": "We are trying to perform a static TLS relocation in MAP, but it was\n   dynamically loaded.  This can only work if there is enough surplus in\n   the static TLS area already allocated for each running thread.  If this\n   object's TLS segment is too big to fit, we fail with -1.  If it fits,\n   we set MAP->l_tls_offset and return 0.\n   A portion of the surplus static TLS can be optionally used to optimize\n   dynamic TLS access (with TLSDESC or powerpc TLS optimizations).\n   If OPTIONAL is true then TLS is allocated for such optimization and\n   the caller must have a fallback in case the optional portion of surplus\n   TLS runs out.  If OPTIONAL is false then the entire surplus TLS area is\n   considered and the allocation only fails if that runs out.",
  "_dl_allocate_static_tls": "This function intentionally does not return any value but signals error\n   directly, as static TLS should be rare and code handling it should\n   not be inlined as much as possible.",
  "_dl_nothread_init_static_tls": "Initialize static TLS area and DTV for current (only) thread.\n   libpthread implementations should provide their own hook\n   to handle all threads.",
  "resolve_map": "!PTHREAD_IN_LIBC",
  "_dl_sort_maps_original": "Note: this is the older, \"original\" sorting algorithm, being used as\n   default up to 2.35.\n\n   Sort array MAPS according to dependencies of the contained objects.\n   If FOR_FINI is true, this is called for finishing an object.",
  "dfs_traversal": "We use a recursive function due to its better clarity and ease of\n   implementation, as well as faster execution speed. We already use\n   alloca() for list allocation during the breadth-first search of\n   dependencies in _dl_map_object_deps(), and this should be on the\n   same order of worst-case stack usage.\n\n   Note: the '*rpo' parameter is supposed to point to one past the\n   last element of the array where we save the sort results, and is\n   decremented before storing the current map at each level.",
  "_dl_sort_maps_dfs": "Topologically sort array MAPS according to dependencies of the contained\n   objects.",
  "_dl_get_dl_main_map": "Since relocation to hidden _dl_main_map causes relocation overflow on\n   aarch64, a function is used to get the address of _dl_main_map.",
  "_dl_tls_symaddr": "Return the symbol address given the map of the module it is in and\n   the symbol record.  This is used in dl-sym.c.",
  "tls_static_surplus": "Compute the static TLS surplus based on the namespace count and the\n   TLS space that can be used for optimizations.",
  "_dl_tls_static_surplus_init": "Calculate the size of the static TLS surplus, when the given\n   number of audit modules are loaded.  Must be called after the\n   number of audit modules is known and before static TLS allocation.",
  "oom": "Out-of-memory handler.",
  "allocate_dtv": "SHARED",
  "_dl_get_tls_static_info": "Get size and alignment requirements of the static TLS block.  This\n   function is no longer used by glibc itself, but the GCC sanitizers\n   use it despite the GLIBC_PRIVATE status.",
  "tcb_to_pointer_to_free_location": "Derive the location of the pointer to the start of the original\n   allocation (before alignment) from the pointer to the TCB.",
  "_dl_allocate_tls_init": "Allocate initial TLS.  RESULT should be a non-NULL pointer to storage\n   for the TLS space.  The DTV may be resized, and so this function may\n   call malloc to allocate that space.  The loader's GL(dl_load_tls_lock)\n   is taken when manipulating global TLS-related data in the loader.",
  "allocate_dtv_entry": "Allocate one DTV entry.",
  "__tls_get_addr": "On SH, linker optimizations are not required, so __tls_get_addr\n   can be called even in statically linked binaries.  In this case module\n   must be always 1 and PT_TLS segment exist in the binary, otherwise it\n   would not link.",
  "_dl_tls_get_addr_soft": "Look up the module's TLS block as for __tls_get_addr,\n   but never touch anything.  Return null if it's not allocated yet.",
  "tunable_initialize": "Validate range of the input value and initialize the tunable CUR if it looks\n   good.",
  "parse_tunables_string": "Parse the tunable string VALSTRING and set TUNABLES with the found tunables\n   and their respective values.  The VALSTRING is parsed in place, with the\n   tunable start and size recorded in TUNABLES.\n   Return the number of tunables found (including 0 if the string is empty)\n   or -1 if for an ill-formatted definition.",
  "__tunables_init": "Initialize the tunables list from the environment.  For now we only use the\n   ENV_ALIAS to find values.  Later we will also use the tunable names to find\n   values.",
  "print_search_path_for_help_1": "Print part of the library search path (from a single source).",
  "print_search_path_for_help": "Prints the library search path.  See _dl_init_paths in dl-load.c\n   how this information is populated.",
  "print_hwcaps_subdirectories_header": "Print the header for print_hwcaps_subdirectories.",
  "print_hwcaps_subdirectories_name": "Print the HWCAP name itself, indented.",
  "print_hwcaps_subdirectories": "Print the list of recognized glibc-hwcaps subdirectories.",
  "new_sub_entry": "Allocate a new subdirectory with full path PATH under ENTRY, using\n   inode data from *ST.",
  "add_single_dir": "Add a single directory entry.  Return true if the directory is\n   actually added (because it is not a duplicate).",
  "add_glibc_hwcaps_subdirectories": "Check if PATH contains a \"glibc-hwcaps\" subdirectory.  If so, queue\n   its subdirectories for glibc-hwcaps processing.",
  "add_dir_1": "Add one directory to the list of directories to process.",
  "create_links": "Create a symbolic link from soname to libname in directory path.",
  "manual_link": "Manually link the given library.",
  "endswithn": "Return true if the N bytes at NAME end with with the characters in\n   the string SUFFIX.  (NAME[N + 1] does not have to be a null byte.)\n   Expected to be called with a string literal for SUFFIX.",
  "skip_dso_based_on_name": "Skip some temporary DSO files.  These files may be partially written\n   and lead to ldconfig crashes when examined.",
  "search_dirs": "Search through all libraries.",
  "parse_conf": "Parse configuration file.",
  "parse_conf_include": "Handle one word in an `include' line, a glob pattern of additional\n   config files to read.",
  "_dl_mcount_wrapper": "This is the map for the shared object we profile.  It is defined here\n   only because we test for this value being NULL or not.",
  "wait_for_ptrace_stop": "Wait for PID to enter ptrace-stop state after being attached.",
  "process_elf_file": "Returns 0 if everything is ok, != 0 in case of error.",
  "is_gdb_python_file": "Check if string corresponds to a GDB Python file.",
  "dso_name_valid_for_suid": "Check that AT_SECURE=0, or that the passed name does not contain\n   directories and is not overly long.  Reject empty names\n   unconditionally.",
  "audit_list_count": "Count audit modules before they are loaded so GLRO(dl_naudit)\n   is not yet usable.",
  "handle_preload_list": "The LD_PRELOAD environment variable gives list of libraries\n   separated by white space or colons that are loaded before the\n   executable's dependencies and prepended to the global scope list.\n   (If the binary is running setuid all elements containing a '/' are\n   ignored since it is insecure.)  Return the number of preloads\n   performed.   Ditto for --preload command argument.",
  "unload_audit_module": "Called if the audit DSO cannot be used: if it does not have the\n   appropriate interfaces, or it expects a more recent version library\n   version than what the dynamic linker provides.",
  "report_audit_module_load_error": "Called to print an error message if loading of an audit module\n   failed.",
  "load_audit_module": "Load one audit module.",
  "load_audit_modules": "Load all audit modules.",
  "rtld_chain_load": "Check if the executable is not actually dynamically linked, and\n   invoke it directly in that case.",
  "rtld_setup_main_map": "Called to complete the initialization of the link map for the main\n   executable.  Returns true if there is a PT_INTERP segment.",
  "_dl_start_args_adjust": "Adjusts the contents of the stack and related globals for the user\n   entry point.  The ld.so processed skip_args arguments and bumped\n   _dl_argv and _dl_argc accordingly.  Those arguments are removed from\n   argv here.",
  "process_dl_debug": "Process the string given as the parameter which explains which debugging\n   options are enabled.",
  "match_file": "Check whether a file name is on the colon-separated list of file\n   names.",
  "print_exit": "No need to copy anything, we will not need the parameters in any case.",
  "load_shobj": "Note that we must not use `dlopen' etc.  The shobj object must not\n   be loaded for use.",
  "freenoop": "ARGUSED",
  "fnv1a": "32-bit FNV-1a hash function.",
  "stringtable_rehash": "Double the capacity of the hash table.",
  "finalize_compare": "Sort reversed strings in reverse lexicographic order.  This is used\n   for tail merging.",
  "handle_restart": "Called on process re-execution.",
  "tst_audit18bmod1_func": "Extra module for tst-audit18b.\n   Copyright (C) 2021-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "tst_audit24bmod2_func1": "Module used by tst-audit24b.\n   Copyright (C) 2022-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "tst_audit25mod3_func1": "Module used by tst-audit25.\n   Copyright (C) 2022-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "tst_audit25mod4_func1": "Module used by tst-audit25.\n   Copyright (C) 2022-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "callback": "For use with support_capture_subprocess.",
  "from_map": "Computes the expected _dl_find_object result directly from the\n   map.",
  "soname": "Returns the soname for the test object NUMBER.",
  "symbol": "Returns the data symbol name for the test object NUMBER.",
  "start_verify": "Sets up the verification data, dlopen'ing shared object NUMBER, and\n   launches a verification thread.",
  "check_initial": "Check that unwind data for the main executable and the dynamic\n   linker can be found.",
  "lazily_bound_exported_function": "This function is called from exported_function below.  It is only\n   defined in this module.  The weak attribute mimics how G++\n   implements vague linkage for C++.",
  "call_dlsym": "Note: This object is not linked into the main program, so we cannot\n   use delayed test failure reporting via TEST_VERIFY etc., and have\n   to use FAIL_EXIT1 (or something else that calls exit).",
  "check_dlopen_failure": "Call dlopen and check that fails with an error message indicating\n   an attempt to open an ET_EXEC or PIE object.",
  "test_one": "Test one value using the locale loc.",
  "tryme": "This is a function that makes use of executable stack by\n   using a local function trampoline.",
  "*get_text": "We never want to see the output of the filter object",
  "*get_text2": "The filtee doesn't implement this symbol, so this should resolve.",
  "run_ldconfig": "Invoke /sbin/ldconfig with some error checking.",
  "execv_wrapper": "Execute localedef in a subprocess.",
  "primary_reference": "This function is never called but the plugin references it.\n   We do this to avoid any future --as-needed from removing the\n   plugin's DT_NEEDED on this DSO (required for the test).",
  "in_str_list": "The test runs in a container because pldd does not support tracing\n   a binary started by the loader itself (as with testrun.sh).",
  "subprocess": "Called from threadfunc below.",
  "moved_function": "In the test scenario, this function was originally in\n   tst-sonamemove-runmod1.so.",
  "other_function": "Dummy function to add the required symbol version.",
  "blocked_thread_func": "Running thread which forces real TLS initialization.",
  "do_test_no_depedency": "This test gaps with shared libraries with dynamic TLS that has no\n   dependencies.  The DTV gap is set with by trying to load an invalid\n   module, the entry should be used on the dlopen.",
  "nmodules": "The following test check DTV gaps handling with shared libraries that has\n   dependencies.  It defines 5 different sets:\n\n   1. Single dependency:\n      mod0 -> mod1\n   2. Double dependency:\n      mod2 -> [mod3,mod4]\n   3. Double dependency with each dependency dependent of another module:\n      mod5 -> [mod6,mod7] -> mod8\n   4. Long chain with one double dependency in the middle:\n      mod9 -> [mod10, mod11] -> mod12 -> mod13\n   5. Long chain with two double dependencies in the middle:\n      mod14 -> mod15 -> [mod16, mod17]\n      mod15 -> [mod18, mod19]\n\n   This does not cover all the possible gaps and configuration, but it\n   should check if different dynamic shared sets are placed correctly in\n   different gaps configurations.",
  "do_test_invalid_dependency": "The following test check DTV gaps handling with shared libraries that has\n   invalid dependencies.  It defines 5 different sets:\n\n   1. Single dependency:\n      mod0 -> invalid\n   2. Double dependency:\n      mod1 -> [mod2,invalid]\n   3. Double dependency with each dependency dependent of another module:\n      mod3 -> [mod4,mod5] -> invalid\n   4. Long chain with one double dependency in the middle:\n      mod6 -> [mod7, mod8] -> mod12 -> invalid\n   5. Long chain with two double dependencies in the middle:\n      mod10 -> mod11 -> [mod12, mod13]\n      mod12 -> [mod14, invalid]\n\n   This does not cover all the possible gaps and configuration, but it\n   should check if different dynamic shared sets are placed correctly in\n   different gaps configurations.",
  "*f1": "Size > glibc.rtld.optional_static_tls / 2.",
  "CONCAT": "Return the next entry from the database file, doing locking.",
  "__moncontrol": "* Control profiling\n *\tprofiling is what mcount checks to see if\n *\tall the data structures are ready.",
  "_mcleanup": "This symbol isn't used anywhere in the DSO and it is not exported.\n   This would normally mean it should be removed to get the same API\n   in static libraries.  But since profiling is special in static libs\n   anyway we keep it.  But not when building the DSO since some\n   quality assurance tests will otherwise trigger.",
  "__profil": "Enable statistical profiling, writing samples of the PC into at most\n   SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling\n   is enabled, the system examines the user PC and increments\n   SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,\n   disable profiling.  Returns zero on success, -1 on error.",
  "hesiod_init": "* This function is called to initialize a hesiod_p.",
  "hesiod_end": "* This function deallocates the hesiod_p",
  "hesiod_to_bind": "* This function takes a hesiod (name, type) and returns a DNS\n * name which is to be resolved.",
  "hesiod_resolve": "* This is the core function.  Given a hesiod (name, type), it\n * returns an array of strings returned by the resolver.",
  "parse_config_file": "* This function parses the /etc/hesiod.conf file",
  "get_txt_records": "* Given a DNS class and a DNS name, do a lookup for TXT records, and\n * return a list of them.",
  "__pthread_enable_asynccancel": "The next two functions are similar to pthread_setcanceltype() but\n   more specialized for the use in the cancelable functions like write().\n   They do not need to check parameters etc.  These functions must be\n   AS-safe, with the exception of the actual cancellation, because they\n   are called by wrappers around AS-safe functions like write().",
  "__cthread_keycreate": "Placeholder for key creation routine from Hurd cthreads library.",
  "__cthread_getspecific": "Placeholder for key retrieval routine from Hurd cthreads library.",
  "__cthread_setspecific": "Placeholder for key setting routine from Hurd cthreads library.",
  "__mutex_lock_solid": "If pthread is linked in, it will define these functions itself to do\n   real pthread mutex locks.  This file will only be linked in when\n   pthread is not used, and `mutexes' are in fact just spin locks (and\n   some unused storage).",
  "__h_errno_location": "When threaded, h_errno may be a per-thread variable.",
  "__libpthread_freeres": "Free libpthread.so resources.\n   Note: Caller ensures we are called only once.",
  "__pthread_alloc": "Allocate a new thread structure and its pthread thread ID (but not\n   a kernel thread).",
  "entry_point": "The entry-point for new threads.",
  "__pthread_create": "Create a thread with attributes given by ATTR, executing\n   START_ROUTINE with argument ARG.",
  "__pthread_dealloc": "Deallocate the content of the thread structure for PTHREAD.",
  "__pthread_dealloc_finish": "Confirm deallocation of the thread structure for PTHREAD.",
  "__pthread_detach": "Indicate that the storage for THREAD can be reclaimed when it\n   terminates.",
  "___pthread_init": "Initialize the pthreads library.",
  "__pthread_join_common": "Make calling thread wait for termination of thread THREAD.  Return\n   the exit status of the thread in *STATUS.",
  "_hurd_alloc_fd": "Allocate a new file descriptor and return it, locked.  The new\n   descriptor number will be no less than FIRST_FD.  If the table is full,\n   set errno to EMFILE and return NULL.  If FIRST_FD is negative or bigger\n   than the size of the table, set errno to EINVAL and return NULL.",
  "_S_catch_exception_raise": "Called by the microkernel when a thread gets an exception.",
  "_S_catch_exception_raise_state": "XXX New interface flavor has additional RPCs that we could be using\n   instead.  These RPCs roll a thread_get_state/thread_set_state into\n   the message, so the signal thread ought to use these to save some calls.",
  "_hurd_ctty_input": "Call *RPC on PORT and/or CTTY.  If a call on CTTY returns EBACKGROUND,\n   generate SIGTTIN or EIO as appropriate.",
  "_hurd_ctty_output": "Call *RPC on PORT and/or CTTY.  If a call on CTTY returns EBACKGROUND,\n   generate SIGTTOU if appropriate.",
  "fork_child_dtable": "We are in the child fork; the dtable lock is still held.\n   The parent has inserted send rights for all the normal io ports,\n   but we must recover ctty-special ports for ourselves.",
  "ctty_new_pgrp": "Called when our process group has changed.",
  "reauth_dtable": "Called to reauthenticate the dtable when the auth port changes.",
  "fchroot": "Change the current root directory to FD.",
  "_hurd_fd_port_use_cleanup": "We were cancelled while using an fd, and called from the cleanup unwinding.",
  "readio": "Read up to N chars into BUF from COOKIE.\n   Return how many chars were read, 0 for EOF or -1 for error.",
  "writeio": "Write up to N chars from BUF to COOKIE.\n   Return how many chars were written or -1 for error.",
  "seekio": "Move COOKIE's file position *POS bytes, according to WHENCE.\n   The current file position is stored in *POS.\n   Returns zero if successful, nonzero if not.",
  "closeio": "Close the file associated with COOKIE.\n   Return 0 for success or -1 for failure.",
  "__fopenport": "Open a stream on PORT.  MODE is as for fopen.",
  "_hurd_raise_signal": "Handle signal SIGNO in the calling thread.\n   If SS is not NULL it is the sigstate for the calling thread;\n   SS->lock is held on entry and released before return.",
  "make_list": "Create a list of ids and store it in NEWLISTP, length NEWLISTLEN.\n     Keep all the ids in EXIST (len NEXIST), adding in those from NEW\n     (len NNEW) which are not already there.",
  "_hurd_exec": "Overlay TASK, executing FILE with arguments ARGV and environment ENVP.\n   If TASK == mach_task_self (), some ports are dealloc'd by the exec server.\n   ARGV and ENVP are terminated by NULL pointers.\n   Deprecated: use _hurd_exec_paths instead.",
  "_hurd_exec_paths": "Overlay TASK, executing FILE with arguments ARGV and environment ENVP.\n   If TASK == mach_task_self (), some ports are dealloc'd by the exec server.\n   ARGV and ENVP are terminated by NULL pointers.  PATH is the relative path to\n   FILE and ABSPATH is the absolute path to FILE. Passing NULL, though possible,\n   should be avoided, since then the exec server may not know the path to\n   FILE if FILE is a script, and will then pass /dev/fd/N to the\n   interpreter.",
  "reauth_io": "Now we have to reauthenticate the ports with this new ID.",
  "_hurdsig_fault_catch_exception_raise_state": "XXX New interface flavor has additional RPCs that we could be using\n   instead.  These RPCs roll a thread_get_state/thread_set_state into\n   the message, so the signal thread ought to use these to save some calls.",
  "_hurdsig_fault_init": "Send exceptions for the signal thread to the proc server.\n   It will forward the message on to our message port,\n   and then restore the thread's state to code which\n   does `longjmp (_hurd_sigthread_fault_env, 1)'.",
  "_hurd_check_ids": "Check that _hurd_id.{gen,aux} are valid and update them if not.\n   Expects _hurd_id.lock to be held and does not release it.",
  "dealloc": "Turn GCC -Wmismatched-dealloc warnings into errors to expose false\n   positives.",
  "_hurd_init": "Initialize the library data structures from the\n   ints and ports passed to us by the exec server.\n\n   PORTARRAY and INTARRAY are vm_deallocate'd.",
  "_hurd_new_proc_init": "Do startup handshaking with the proc server just installed in _hurd_ports.\n   Call _hurdsig_init to set up signal processing.",
  "_hurd_setproc": "Called when we get a message telling us to change our proc server port.",
  "_hurd_lookup_ioctl_handler": "Symbol set of ioctl handler lists.  If there are user-registered\n   handlers, one of these lists will contain them.  The other lists are\n   handlers built into the library.",
  "fioctl": "Find out how many bytes may be read from FD without blocking.",
  "_hurd_locked_install_cttyid": "Install a new CTTYID port, atomically updating the dtable appropriately.\n   This consumes the send right passed in.",
  "_hurd_setcttyid": "Called when we have received a message saying to use a new ctty ID port.",
  "/* Always TIOCSCTTY.  */": "Make FD be the controlling terminal.\n   This function is called for `ioctl (fd, TCIOSCTTY)'.",
  "/* Always TIOCNOTTY.  */": "Dissociate from the controlling terminal.",
  "siocgifconf": "Fill in the buffer IFC->IFC_BUF of length IFC->IFC_LEN with a list\n   of ifr structures, one for each network interface.",
  "_hurd_sig_post": "Send a `sig_post' RPC to process number PID.  If PID is zero,\n   send the message to all processes in the current process's process group.\n   If PID is < -1, send SIG to all processes in process group - PID.\n   SIG and REFPORT are passed along in the request message.",
  "compute_reltime": "Convert an absolute timeout in nanoseconds to a relative\n   timeout in milliseconds.",
  "valid_pid": "Test if a given process id is still valid.",
  "lookup_error": "Translate the error from dir_lookup into the error the user sees.",
  "__hurd_directory_name_split": "This is the same as hurd_file_name_split, except that it ignores\n   trailing slashes (so *NAME is never \"\").",
  "realloc": "The first thread that gets a lock in _res_hconf_reorder_addrs()\n   should hold the lock long enough to make two other threads blocked.\n   This is achieved by slowing down realloc(3) that is called several times\n   by _res_hconf_reorder_addrs().",
  " */": "DEBUG",
  "_S_msg_get_init_port": "Snarfing and frobbing the init ports.",
  "get_int": "Snarfing and frobbing the init ints.",
  "_S_msg_get_env_variable": "Snarfing and frobbing environment variables.",
  "_S_msg_set_dtable": "XXX",
  "_hurd_select": "Check the first NFDS descriptors either in POLLFDS (if nonnnull) or in\n   each of READFDS, WRITEFDS, EXCEPTFDS that is nonnull.  If TIMEOUT is not\n   NULL, time out after waiting the interval specified therein.  Returns\n   the number of ready descriptors, or -1 for errors.",
  "_hurd_sigstate_set_global_rcv": "Make SS a global receiver, with pthread signal semantics.",
  "sigstate_clear_pending": "Clear a pending signal and return the associated detailed\n   signal information. SS must be locked, and must have signal SIGNO\n   pending, either directly or through the global sigstate.",
  "_hurd_sigstate_actions": "Retrieve a thread's action vector.  SS must be locked.",
  "write_corefile": "Call the crash dump server to mummify us before we die.\n   Returns nonzero if a core file was written.",
  "abort_thread": "SS->thread is suspended.  Abort the thread and get its basic state.",
  "interrupted_reply_port_location": "Find the location of the MiG reply port cell in use by the thread whose\n   state is described by THREAD_STATE.  If SIGTHREAD is nonzero, make sure\n   that this location can be set without faulting, or else return NULL.",
  "_hurdsig_abort_rpcs": "SS->thread is suspended.\n\n   Abort any interruptible RPC operation the thread is doing.\n\n   This uses only the constant member SS->thread and the unlocked, atomically\n   set member SS->intr_port, so no locking is needed.\n\n   If successfully sent an interrupt_operation and therefore the thread should\n   wait for its pending RPC to return (possibly EINTR) before taking the\n   incoming signal, returns the reply port to be received on.  Otherwise\n   returns MACH_PORT_NULL.\n\n   SIGNO is used to find the applicable SA_RESTART bit.  If SIGNO is zero,\n   the RPC fails with EINTR instead of restarting (thread_cancel).\n\n   *STATE_CHANGE is set nonzero if STATE->basic was modified and should\n   be applied back to the thread if it might ever run again, else zero.",
  "abort_all_rpcs": "Abort the RPCs being run by all threads but this one;\n   all other threads should be suspended.  If LIVE is nonzero, those\n   threads may run again, so they should be adjusted as necessary to be\n   happy when resumed.  STATE is clobbered as a scratch area; its initial\n   contents are ignored, and its contents on return are not useful.",
  "wake_sigsuspend": "Wake up any sigsuspend or pselect call that is blocking SS->thread.  SS must\n   be locked.",
  "post_signal": "Actual delivery of a single signal.  Called with SS unlocked.  When\n   the signal is delivered, return SS, locked (or, if SS was originally\n   _hurd_global_sigstate, the sigstate of the actual thread the signal\n   was delivered to).  If the signal is being traced, return NULL with\n   SS unlocked.",
  "mark_pending": "Mark the signal as pending.",
  "suspend": "Suspend the process with SIGNO.",
  "resume": "Resume the process after a suspension.",
  "pending_signals": "Return the set of pending signals in SS which should be delivered.",
  "post_pending": "Post the specified pending signals in SS and return 1.  If one of\n   them is traced, abort immediately and return 0.  SS must be locked on\n   entry and will be unlocked in all cases.",
  "post_all_pending_signals": "Post all the pending signals of all threads and return 1.  If a traced\n   signal is encountered, abort immediately and return 0.",
  "_hurd_internal_post_signal": "Deliver a signal.  SS is not locked.",
  "signal_allowed": "Decide whether REFPORT enables the sender to send us a SIGNO signal.\n   Returns zero if so, otherwise the error code to return to the sender.",
  "_S_msg_sig_post": "Implement the sig_post RPC from <hurd/msg.defs>;\n   sent when someone wants us to get a signal.",
  "_S_msg_sig_post_untraced": "Implement the sig_post_untraced RPC from <hurd/msg.defs>;\n   sent when the debugger wants us to really get a signal\n   even if we are traced.",
  "_hurdsig_init": "Initialize the message port, _hurd_global_sigstate, and start the\n   signal thread.",
  "reauth_proc": "Reauthenticate with the proc server.",
  "_hurdsig_getenv": "Like `getenv', but safe for the signal thread to run.\n   If the environment is trashed, this will just return NULL.",
  "_hurd_socket_server": "Return a port to the socket server for DOMAIN.\n   Socket servers translate nodes in the directory _SERVERS_SOCKET\n   (canonically /servers/socket).  These naming point nodes are named\n   by the simplest decimal representation of the socket domain number,\n   for example \"/servers/socket/3\".\n\n   Socket servers are assumed not to change very often.\n   The library keeps all the server socket ports it has ever looked up,\n   and does not look them up in /servers/socket more than once.",
  "_hurd_startup": "Entry point.  This is the first thing in the text segment.\n\n   The exec server started the initial thread in our task with this spot the\n   PC, and a stack that is presumably big enough.  We do basic Mach\n   initialization so mig-generated stubs work, and then do an exec_startup\n   RPC on our bootstrap port, to which the exec server responds with the\n   information passed in the exec call, as well as our original bootstrap\n   port, and the base address and size of the preallocated stack.",
  "_hurd_intern_fd": "Allocate a new file descriptor and install PORT in it.  FLAGS are as for\n   `open'; only O_IGNORE_CTTY and O_CLOEXEC are meaningful.\n\n   If the descriptor table is full, set errno, and return -1.\n   If DEALLOC is nonzero, deallocate PORT first.",
  "_hurd_intr_rpc_mach_msg": "This function is called by interruptible RPC stubs.  For initial\n   dynamic linking, just use the normal mach_msg.  Since this defn is\n   weak, the real defn in libc.so will override it if we are linked into\n   the user program (-ldl).",
  "_hurd_longjmp_thread_state": "Set up STATE to do the equivalent of `longjmp (ENV, VAL);'.",
  "_hurd_msgport_receive": "This is the code that the signal thread runs.",
  "_hurd_new_fd": "Allocate a new file descriptor structure\n   and initialize it with PORT and CTTY.",
  "openport": "User entry point for interning a port as a new FD.\n   Just like _hurd_intern_fd, but don't dealloc PORT on error.",
  "file_name_path_scan": "If FILE_NAME contains a '/', or PATH is NULL, call FUN with FILE_NAME, and\n   return the result (if PREFIXED_NAME is non-NULL, setting *PREFIXED_NAME to\n   NULL).  Otherwise, call FUN repeatedly with FILE_NAME prefixed with each\n   successive `:' separated element of PATH, returning whenever FUN returns\n   0 (if PREFIXED_NAME is non-NULL, setting *PREFIXED_NAME to the resulting\n   prefixed path).  If FUN never returns 0, return the first non-ENOENT\n   return value, or ENOENT if there is none.",
  "__hurd_file_name_path_lookup": "Lookup FILE_NAME and return the node opened with FLAGS & MODE in result\n   (see hurd_file_name_lookup for details), but a simple filename (without\n   any directory prefixes) will be consecutively prefixed with the pathnames\n   in the `:' separated list PATH until one succeeds in a successful lookup.\n   If none succeed, then the first error that wasn't ENOENT is returned, or\n   ENOENT if no other errors were returned.  If PREFIXED_NAME is non-NULL,\n   then if RESULT is looked up directly, *PREFIXED_NAME is set to NULL, and\n   if it is looked up using a prefix from PATH, *PREFIXED_NAME is set to\n   malloced storage containing the prefixed name.",
  "_hurd_port_cleanup": "The last user of the send right CLEANUP_DATA is now doing\n   `longjmp (ENV, VAL)', and this will unwind the frame of\n   that last user.  Deallocate the right he will never get back to using.",
  "_hurd_port_use_cleanup": "We were cancelled while using a port, and called from the cleanup unwinding.",
  "_hurd_port2fd": "Store PORT in file descriptor D, doing appropriate ctty magic.\n   FLAGS are as for `open'; only O_IGNORE_CTTY and O_CLOEXEC are meaningful.\n   D should be locked, and will not be unlocked.",
  "_S_msg_report_wait": "XXX",
  "_hurd_setauth": "Set the auth port to NEW, and reauthenticate\n   everything used by the library.",
  "seteuids": "Set the uid set for the current user to UIDS (N of them).",
  "_hurdsig_longjmp_from_handler": "_hurd_setup_sighandler puts a link on the `active resources' chain so that\n   _longjmp_unwind will call this function with the `struct sigcontext *'\n   describing the context interrupted by the signal, when `longjmp' is jumping\n   to an environment that unwinds past the interrupted frame.",
  "vpprintf": "Write formatted output to PORT, a Mach port supporting the i/o protocol,\n   according to the format string FORMAT, using the argument list in ARG.",
  "_hurd_xattr_get": "Right now we support only a fixed set of xattr names for Hurd features.\n   There are no RPC interfaces for free-form xattr names and values.\n\n   Name\t\t\tValue encoding\n   ----\t\t\t----- --------\n   gnu.author\t\tempty if st_author==st_uid\n\t\t\tuid_t giving st_author value\n   gnu.translator\tempty if no passive translator\n\t\t\ttranslator and arguments: \"/hurd/foo\\0arg1\\0arg2\\0\"",
  "__gconv_release_cache": "Free memory allocated for the transformation record.",
  "__gconv_cache_freemem": "Free all resources if necessary.",
  "find_suffix": "This function returns a pointer to the last suffix in a conversion code\n   string.  Valid suffixes matched by this function are of the form: '/' or ','\n   followed by arbitrary text that doesn't contain '/' or ','.  It does not\n   edit the string in any way.  The caller is expected to parse the suffix and\n   remove it (by e.g. truncating the string) before the next call.",
  "gconv_parse_code": "This function parses an iconv_open encoding PC.CODE, strips any suffixes\n   (such as TRANSLIT or IGNORE) from it and sets corresponding flags in it.",
  "__gconv_create_spec": "This function accepts the charset names of the source and destination of the\n   conversion and populates *conv_spec with an equivalent conversion\n   specification that may later be used by __gconv_open.  The charset names\n   might contain options in the form of suffixes that alter the conversion,\n   e.g. \"ISO-10646/UTF-8/TRANSLIT\".  It processes the charset names, ignoring\n   and truncating any suffix options in fromcode, and processing and truncating\n   any suffix options in tocode.  Supported suffix options (\"TRANSLIT\" or\n   \"IGNORE\") when found in tocode lead to the corresponding flag in *conv_spec\n   to be set to true.  Unrecognized suffix options are silently discarded.  If\n   the function succeeds, it returns conv_spec back to the caller.  It returns\n   NULL upon failure.  conv_spec must be allocated and freed by the caller.",
  "detect_conflict": "Test whether there is already a matching module known.",
  "add_alias2": "The actual code to add aliases.",
  "insert_module": "Insert a data structure for a new module in the search tree.",
  "add_module": "Add new module.",
  "__gconv_get_path": "Determine the directories we are looking for data in.  This function should\n   only be called from __gconv_read_conf.",
  "__gconv_read_conf": "Read all configuration files found in the user-specified and the default\n   path.  This function should only be called once during the program's\n   lifetime.  It disregards locking and synchronization because its only\n   caller, __gconv_load_conf, handles this.",
  "__gconv_load_conf": "Read all configuration files found in the user-specified and the default\n   path, but do it only \"once\" using __gconv_read_conf to do the actual\n   work.  This is the function that must be called when reading iconv\n   configuration.",
  "__gconv_conf_freemem": "Free all resources if necessary.",
  "__gconv_get_modules_db": "Provide access to module database.",
  "__gconv_alias_compare": "Function for searching alias.",
  "derivation_compare": "Compare function for database of found derivations.",
  "derivation_lookup": "Look up whether given transformation was already requested before.",
  "add_derivation": "Add new derivation to list of known ones.",
  "__gconv_release_step": "Decrement the reference count for a single step in a steps array.",
  "find_derivation": "The main function: find a possible derivation from the `fromset' (either\n   the given name or the alias) to the `toset' (again with alias).",
  "__gconv_close_transform": "Release the entries of the modules list.",
  "free_modules_db": "Free the modules mentioned.",
  "__gconv_db_freemem": "Free all resources if necessary.",
  "known_compare": "Comparison function for searching `loaded_object' tree.",
  "__gconv_find_shlib": "Open the gconv database if necessary.  A non-negative return value\n   means success.",
  "__gconv_release_shlib": "Notify system that a shared object is not longer needed.",
  "do_release_all": "We run this if we debug the memory allocation.",
  "__gconv_btwoc_ascii": "Specialized conversion function for a single byte to INTERNAL, recognizing\n   only ASCII characters.",
  "add_bytes": "Add the IN->OUT mapping to TBL.  OUT is potentially stored in the table.\n   IN is used only here, so it need not be kept live afterwards.",
  "convert_charseq": "Try to convert SEQ from WCHAR_T format using CD.\n   Returns a malloc'd struct or NULL.",
  "new_module": "Create new module record.",
  "handle_dir": "Read config files and add the data for this directory to cache.",
  "is_prime": "Determine if the candidate is prime by using a modified trial division\n   algorithm. The candidate must be both odd and greater than 4.",
  "name_insert": "Function to insert the names.",
  "searchstring": "XXX This function should definitely be rewritten to use a balancing\n   tree algorithm (AVL, red-black trees).  For now a simple, correct\n   implementation is enough.",
  "strtabadd": "Add new string.  The actual string is assumed to be permanent.",
  "activate_test_gconv_modules": "Test GCONV_PATH to the directory containing the program\n   executable.",
  "test_iconv": "Run one iconv test.  Arguments:\n   to: destination character set and options\n   from: source character set\n   input: input string to be converted\n   exp_in: expected number of bytes consumed\n   exp_ret: expected return value (error or number of irreversible conversions)\n   exp_out: expected output string\n   exp_err: expected value of `errno' after iconv returns.",
  "else": "Convert remaining bytes with c code.",
  "test_ibm93x": "Verify that a conversion of the INPUT sequence consisting of\n   INBYTESLEFT bytes in the encoding specified by the codeset\n   named by FROM_SET is successful.\n   Return 0 on success, non-zero on iconv() failure.",
  "with_escape_sequence": "Use an escape sequence to return to the initial state.",
  "with_flush": "Use an explicit flush to return to the initial state.",
  "check_conversion": "Each test is of the form:\n   - Translate first code sequence (two bytes)\n   - Translate second (zero bytes)\n   - Translate the third (one byte).",
  "hexbuf": "Converts a byte buffer to a hexadecimal string.",
  "utf8_decode": "Reads a UTF-8 sequence from LR, with the leading byte CH1, and\n   stores the decoded codepoint in *WCH.  Returns false on failure and\n   reports an error.",
  "isdirect": "The set of \"direct characters\":\n   A-Z a-z 0-9 ' ( ) , - . / : ? space tab lf cr\n   FOR UTF-7-IMAP\n   A-Z a-z 0-9 ' ( ) , - . / : ? space\n   ! \" # $ % + * ; < = > @ [ \\ ] ^ _ ` { | } ~",
  "isxdirect": "The set of \"direct and optional direct characters\":\n   A-Z a-z 0-9 ' ( ) , - . / : ? space tab lf cr\n   (UTF-7 only)\n   ! \" # $ % & * ; < = > @ [ ] ^ _ ` { | }",
  "needs_explicit_shift": "Characters which needs to trigger an explicit shift back to US-ASCII (UTF-7\n   only): Modified base64 + '-' (shift back character)\n   A-Z a-z 0-9 + / -",
  "base64": "Converts a value in the range 0..63 to a base64 encoded char.",
  "bindresvport": "* Bind a socket to a privileged IP port",
  "__check_pf": "Release the lock.",
  "infinite_deadline": "A special deadline value for which __deadline_is_infinite is\n   true.",
  "get_functions": "Ensure that *functions is initialized and return the value of the\n   pointer.  If the library cannot be loaded, return NULL.",
  "gai_strdup": "strdup with an EAI_* error code.",
  "__getifaddrs": "Create a linked list of `struct ifaddrs' structures, one for each\n   network interface on the host machine.  If successful, store the\n   list in *IFAP and return 0.  On errors, return -1 and set `errno'.",
  "inet6_opt_init": "RFC 3542, 10.1\n\n   This function returns the number of bytes needed for the empty\n   extension header i.e., without any options.  If EXTBUF is not NULL it\n   also initializes the extension header to have the correct length\n   field.  In that case if the EXTLEN value is not a positive (i.e.,\n   non-zero) multiple of 8 the function fails and returns -1.",
  "inet6_opt_append": "RFC 3542, 10.2\n\n   This function returns the updated total length taking into account\n   adding an option with length 'len' and alignment 'align'.  If\n   EXTBUF is not NULL then, in addition to returning the length, the\n   function inserts any needed pad option, initializes the option\n   (setting the type and length fields) and returns a pointer to the\n   location for the option content in databufp.  If the option does\n   not fit in the extension header buffer the function returns -1.",
  "inet6_opt_finish": "RFC 3542, 10.3\n\n   This function returns the updated total length taking into account\n   the final padding of the extension header to make it a multiple of\n   8 bytes.  If EXTBUF is not NULL the function also initializes the\n   option by inserting a Pad1 or PadN option of the proper length.",
  "inet6_opt_set_val": "RFC 3542, 10.4\n\n   This function inserts data items of various sizes in the data\n   portion of the option.  VAL should point to the data to be\n   inserted.  OFFSET specifies where in the data portion of the option\n   the value should be inserted; the first byte after the option type\n   and length is accessed by specifying an offset of zero.",
  "inet6_opt_next": "RFC 3542, 10.5\n\n   This function parses received option extension headers returning\n   the next option.  EXTBUF and EXTLEN specifies the extension header.\n   OFFSET should either be zero (for the first option) or the length\n   returned by a previous call to 'inet6_opt_next' or\n   'inet6_opt_find'.  It specifies the position where to continue\n   scanning the extension buffer.",
  "inet6_opt_find": "RFC 3542, 10.6\n\n   This function is similar to the previously described\n   'inet6_opt_next' function, except this function lets the caller\n   specify the option type to be searched for, instead of always\n   returning the next option in the extension header.",
  "inet6_opt_get_val": "RFC 3542, 10.7\n\n   This function extracts data items of various sizes in the data\n   portion of the option.",
  "inet6_option_space": "RFC 2292, 6.3.1\n\n   This function returns the number of bytes required to hold an option\n   when it is stored as ancillary data, including the cmsghdr structure\n   at the beginning, and any padding at the end (to make its size a\n   multiple of 8 bytes).  The argument is the size of the structure\n   defining the option, which must include any pad bytes at the\n   beginning (the value y in the alignment term \"xn + y\"), the type\n   byte, the length byte, and the option data.",
  "inet6_option_init": "RFC 2292, 6.3.2\n\n   This function is called once per ancillary data object that will\n   contain either Hop-by-Hop or Destination options.  It returns 0 on\n   success or -1 on an error.",
  "inet6_option_append": "RFC 2292, 6.3.3\n\n   This function appends a Hop-by-Hop option or a Destination option\n   into an ancillary data object that has been initialized by\n   inet6_option_init().  This function returns 0 if it succeeds or -1 on\n   an error.",
  "option_alloc": "RFC 2292, 6.3.4\n\n   This function appends a Hop-by-Hop option or a Destination option\n   into an ancillary data object that has been initialized by\n   inet6_option_init().  This function returns a pointer to the 8-bit\n   option type field that starts the option on success, or NULL on an\n   error.",
  "inet6_option_next": "RFC 2292, 6.3.5\n\n   This function processes the next Hop-by-Hop option or Destination\n   option in an ancillary data object.  If another option remains to be\n   processed, the return value of the function is 0 and *tptrp points to\n   the 8-bit option type field (which is followed by the 8-bit option\n   data length, followed by the option data).  If no more options remain\n   to be processed, the return value is -1 and *tptrp is NULL.  If an\n   error occurs, the return value is -1 and *tptrp is not NULL.",
  "inet6_option_find": "RFC 2292, 6.3.6\n\n   This function is similar to the previously described\n   inet6_option_next() function, except this function lets the caller\n   specify the option type to be searched for, instead of always\n   returning the next option in the ancillary data object.  cmsg is a\n   pointer to cmsghdr structure of which cmsg_level equals IPPROTO_IPV6\n   and cmsg_type equals either IPV6_HOPOPTS or IPV6_DSTOPTS.",
  "inet6_rth_space": "RFC 3542, 7.1\n\n   This function returns the number of bytes required to hold a\n   Routing header of the specified type containing the specified\n   number of segments (addresses).  For an IPv6 Type 0 Routing header,\n   the number of segments must be between 0 and 127, inclusive.",
  "inet6_rth_init": "RFC 3542, 7.2\n\n   This function initializes the buffer pointed to by BP to contain a\n   Routing header of the specified type and sets ip6r_len based on the\n   segments parameter.",
  "inet6_rth_add": "RFC 3542, 7.3\n\n   This function adds the IPv6 address pointed to by addr to the end of\n   the Routing header being constructed.",
  "inet6_rth_reverse": "RFC 3542, 7.4\n\n   This function takes a Routing header extension header (pointed to by\n   the first argument) and writes a new Routing header that sends\n   datagrams along the reverse of that route.  The function reverses the\n   order of the addresses and sets the segleft member in the new Routing\n   header to the number of segments.",
  "inet6_rth_segments": "RFC 3542, 7.5\n\n   This function returns the number of segments (addresses) contained in\n   the Routing header described by BP.",
  "inet6_rth_getaddr": "RFC 3542, 7.6\n\n   This function returns a pointer to the IPv6 address specified by\n   index (which must have a value between 0 and one less than the\n   value returned by 'inet6_rth_segments') in the Routing header\n   described by BP.",
  "__inet6_scopeid_pton": "Parse SOURCE as a scope ID for ADDRESS.  Return 0 on success and -1\n   on error.",
  "inet_lnaof": "* Return the local network address portion of an\n * internet address; handles class a/b/c network\n * number formats.",
  "__inet_makeaddr": "* Formulate an Internet address from network + host.  Used in\n * building addresses stored in the ifnet structure.",
  "__inet_network": "* Internet network address interpretation routine.\n * The library routines call this routine to interpret\n * network numbers.",
  "inet_netof": "* Return the network number from an internet\n * address; handles class a/b/c network #'s.",
  "iruserfopen": "Extremely paranoid file open function.",
  "ruserok2_sa": "* New .rhosts strategy: We are passed an ip address. We spin through\n * hosts.equiv and .rhosts looking for a match. When the .rhosts only\n * has ip addresses, we don't have to trust a nameserver.  When it\n * contains hostnames, we spin through the list of addresses the nameserver\n * gives us and look for a match.\n *\n * Returns 0 if ok, -1 if not ok.",
  "ruserok_sa": "* ruserok_sa() is now discussed on ipng, so\n * currently disabled for external use",
  "iruserok_af": "This is the exported version.",
  "__ivaliduser": "Previously used by lpd.  Current lpd versions have their own copy.",
  "__checkhost_sa": "Returns 1 on positive match, 0 on no match, -1 on negative match.",
  "__icheckuser": "Returns 1 on positive match, 0 on no match, -1 on negative match.",
  "__isempty": "* Returns 1 for blank lines (or only comment lines) and 0 otherwise",
  "__validuser2_sa": "* Returns 0 if positive match, -1 if _not_ ok.",
  "time_t_max": "Find the maximum value which can be represented in a time_t.",
  "setup_interface": "Initiale the variables above.",
  "from_string": "Convert ADDRESS to struct in6_addr.",
  "call_gai": "Invoke getaddrinfo to parse ADDRESS%SCOPE.  Return true if\n   getaddrinfo was successful.",
  "expect_failure": "Check that evaluating PATTERN with WRDE_NOCMD results in\n   EXPECTED_ERROR.",
  "expect_success": "Check a single address were we expected a success.",
  "set_binding_values": "Specifies the directory name *DIRNAMEP and the output codeset *CODESETP\n   to be used for the DOMAINNAME message catalog.\n   If *DIRNAMEP or *CODESETP is NULL, the corresponding attribute is not\n   modified, only the current value is returned.\n   If DIRNAMEP or CODESETP is NULL, the corresponding attribute is neither\n   modified nor returned.",
  "BINDTEXTDOMAIN": "Specify that the DOMAINNAME message catalog will be found\n   in DIRNAME rather than in the system locale data base.",
  "BIND_TEXTDOMAIN_CODESET": "Specify the character encoding in which the messages from the\n   DOMAINNAME message catalog will be returned.",
  "DCGETTEXT": "Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY\n   locale.",
  "transcmp": "Function to compare two entries in the table of known translations.",
  "plural_lookup": "Look up a plural variant.",
  "category_to_name": "Return string representation of locale CATEGORY.",
  "get_output_charset": "Returns the output charset.",
  "__intl_freemem": "If we want to free all resources we have to do some work at\n   program's end.",
  "DCNGETTEXT": "Look up MSGID in the DOMAINNAME message catalog for the current CATEGORY\n   locale.",
  "DGETTEXT": "Look up MSGID in the DOMAINNAME message catalog of the current\n   LC_MESSAGES locale.",
  "DNGETTEXT": "Look up MSGID in the DOMAINNAME message catalog of the current\n   LC_MESSAGES locale and skip message according to the plural form.",
  "_nl_find_domain": "Return a data structure describing the message catalog described by\n   the DOMAINNAME and CATEGORY parameters with respect to the currently\n   established bindings.",
  "_nl_finddomain_subfreeres": "This is called from iconv/gconv_db.c's free_mem, as locales must\n   be freed before freeing gconv steps arrays.",
  "GETTEXT": "Look up MSGID in the current default message catalog for the current\n   LC_MESSAGES locale.  If not found, returns MSGID itself (the default\n   text).",
  "__hash_string": "Defines the so called `hashpjw' function by P.J. Weinberger\n   [see Aho/Sethi/Ullman, COMPILERS: Principles, Techniques and Tools,\n   1986, 1987 Bell Telephone Laboratories, Inc.]",
  "argz_count__": "Returns the number of strings in ARGZ.",
  "argz_stringify__": "Make '\\0' separated arg vector ARGZ printable by converting all the '\\0's\n   except the last into the character SEP.",
  "_nl_normalize_codeset": "Normalize codeset name.  There is no standard for the codeset\n   names.  Normalization allows the user to use any of the common\n   names.  The return value is dynamically allocated and has to be\n   freed by the caller.",
  "get_sysdep_segment_value": "Expand a system dependent string segment.  Return NULL if unsupported.",
  "NGETTEXT": "Look up MSGID in the current default message catalog for the current\n   LC_MESSAGES locale.  If not found, returns MSGID itself (the default\n   text).",
  "TEXTDOMAIN": "Set the current default message catalog to DOMAINNAME.\n   If DOMAINNAME is null, return the current default.\n   If DOMAINNAME is \"\", reset to the default of \"messages\".",
  "waitfor": "Waits until the flipflop has a given value.\n   Before the call, the lock is unlocked.  After the call, it is locked.",
  "setto": "Sets the flipflop to a given value.\n   Before the call, the lock is locked.  After the call, it is unlocked.",
  "__chdir": "Change the current directory to FILE_NAME.",
  "__chmod": "Change the protections of FILE to MODE.",
  "__chown": "Change the owner and group of FILE.",
  "__close": "Close the file descriptor FD.",
  "__close_range": "Close the file descriptors from FIRST up to LAST, inclusive.\n   If CLOSE_RANGE_CLOEXEC is set in FLAGS, set the FD_CLOEXEC flag\n   instead of closing.",
  "creat": "Create FILE with protections MODE.",
  "creat64": "Create FILE with protections MODE.",
  "__dup": "Duplicate FD, returning a new file descriptor open on the same file.",
  "__dup2": "Duplicate FD to FD2, closing the old FD2 and making FD2 be\n   open the same file as FD is.  Return FD2 or -1.",
  "__dup3": "Duplicate FD to FD2, closing the old FD2 and making FD2 be\n   open on the same file as FD is, and setting FD2's flags according to FLAGS.\n   Return FD2 or -1.",
  "__fchdir": "Change the current directory to FD.",
  "__fchmod": "Change the permissions of the file referenced by FD to MODE.",
  "__fchown": "Change the owner and group of the file referred to by FD.",
  "fchownat": "Change the owner and group of FILE.",
  "__fcntl": "Perform file control operations on FD.",
  "__fcntl64": "Perform file control operations on FD.",
  "__flock": "Apply or remove an advisory lock, according to OPERATION,\n   on the file FD refers to.",
  "__fstatat": "Different than other ABIs, mips64 has different layouts for non-LFS\n   and LFS struct stat.",
  "__fstatfs": "Return information about the filesystem on which FD resides.",
  "__fstatfs64": "Return information about the filesystem on which FILE resides.",
  "__fstatvfs64": "Return information about the filesystem on which FD resides.",
  "FTS_SET": "ARGSUSED",
  "fts_build": "* This is the tricky part -- do not casually change *anything* in here.  The\n * idea is to build the linked list of entries that are used by fts_children\n * and fts_read.  There are lots of special cases.\n *\n * The real slowdown in walking the tree is the stat calls.  If FTS_NOSTAT is\n * set and it's a physical walk (so that symbolic links can't be directories),\n * we can do things quickly.  First, if it's a 4.4BSD file system, the type\n * of the file is in the directory entry.  Otherwise, we assume that the number\n * of subdirectories in a node is equal to the number of links to the parent.\n * The former skips all stat calls.  The latter skips stat calls in any leaf\n * directories and for any files after the subdirectories in the directory have\n * been found, cutting the stat calls by about 2/3.",
  "fts_palloc": "* Allow essentially unlimited paths; find, rm, ls should all work on any tree.\n * Most systems will allow creation of paths much longer than MAXPATHLEN, even\n * though the kernel won't resolve them.  Add the size (not just what's needed)\n * plus 256 bytes so don't realloc the path 2 bytes at a time.",
  "fts_padjust": "* When the path is realloc'd, have to fix all of the pointers in structures\n * already returned.",
  "fts_safe_changedir": "* Change to dir specified by fd or p->fts_accpath without getting\n * tricked by someone changing the world out from underneath us.\n * Assumes p->fts_dev and p->fts_ino are filled in.",
  "FTW_NAME": "Entry points.",
  "futimens": "Change the access time of the file associated with FD to TSP[0] and\n   the modification time of FILE to TSP[1].",
  "get_current_dir_name": "Return a malloc'd string containing the current directory name.\n   If the environment variable `PWD' is set, and its value is correct,\n   that value is used.",
  "__isatty": "Return 1 if FD is a terminal, 0 if not.",
  "lchmod": "Change the protections of FILE to MODE.",
  "__lchown": "Change the owner and group of FILE.",
  "__link": "Make a link to FROM called TO.",
  "linkat": "Make a link to FROM relative to FROMFD called TO relative to TOFD.",
  "lockf": "lockf is a simplified interface to fcntl's locking facilities.",
  "__lockf64": "lockf is a simplified interface to fcntl's locking facilities.",
  "__libc_lseek": "Seek to OFFSET on FD, starting from WHENCE.",
  "__libc_lseek64": "Seek to OFFSET on FD, starting from WHENCE.",
  "__mkdir": "Create a directory named PATH with protections MODE.",
  "mkdirat": "Create a directory named PATH relative to FD with protections MODE.",
  "mkfifo": "Create a named pipe (FIFO) named PATH with protections MODE.",
  "mkfifoat": "Create a new FIFO with permission bits MODE.  But interpret\n   relative PATH names relative to the directory associated with FD.",
  "__libc_open": "Open FILE with access OFLAG.  If O_CREAT or O_TMPFILE is in OFLAG,\n   a third argument is the file protection.",
  "__libc_open64": "Open FILE with access OFLAG.  If O_CREAT or O_TMPFILE is in OFLAG,\n   a third argument is the file protection.",
  "__openat": "Open FILE with access OFLAG.  Interpret relative paths relative to\n   the directory associated with FD.  If O_CREAT or O_TMPFILE is in OFLAG, a\n   third argument is the file protection.",
  "__openat64": "Open FILE with access OFLAG.  Interpret relative paths relative to\n   the directory associated with FD.  If O_CREAT or O_TMPFILE is in OFLAG, a\n   third argument is the file protection.",
  "__pipe": "Create a one-way communication channel (__pipe).\n   If successful, two file descriptors are stored in PIPEDES;\n   bytes written on PIPEDES[1] can be read from PIPEDES[0].\n   Returns 0 if successful, -1 if not.",
  "__pipe2": "Create a one-way communication channel (pipe).\n   Actually the channel is two-way on the Hurd.\n   If successful, two file descriptors are stored in FDS;\n   bytes written on FDS[1] can be read from FDS[0].\n   Apply FLAGS to the new file descriptors.\n   Returns 0 if successful, -1 if not.",
  "posix_fadvise": "Default implementation will use __NR_fadvise64 with expected argument\n   positions (for instance i386 and powerpc32 that uses __ALIGNMENT_ARG).\n\n   Second option will be used by arm which define __NR_arm_fadvise64_64\n   (redefined to __NR_fadvise64_64 in kernel-features.h) that behaves as\n   __NR_fadvise64_64 (without the alignment argument required for the ABI).\n\n   Third option will be used by mips o32.  Mips will use a 7 argument\n   syscall with __NR_fadvise64.\n\n   s390 implements fadvice64_64 using a specific struct with arguments\n   packed inside.  This is the only implementation handled in arch-specific\n   code.",
  "posix_fadvise64": "Advice the system about the expected behaviour of the application with\n   respect to the file associated with FD.",
  "posix_fallocate": "Reserve storage for the data of the file associated with FD.",
  "posix_fallocate64": "Reserve storage for the data of the file associated with FD.",
  "__libc_read": "Read NBYTES into BUF from FD.  Return the number read or -1.",
  "__readlink": "Read the contents of the symbolic link PATH into no more than\n   LEN bytes of BUF.  The contents are not null-terminated.\n   Returns the number of characters read, or -1 for errors.",
  "readlinkat": "Read the contents of the symbolic link PATH relative to FD into no\n   more than LEN bytes of BUF.  The contents are not null-terminated.\n   Returns the number of characters read, or -1 for errors.",
  "__rmdir": "Remove the directory PATH.",
  "sendfile": "Send COUNT bytes from file associated with IN_FD starting at OFFSET to\n   descriptor OUT_FD.",
  "sendfile64": "Send COUNT bytes from file associated with IN_FD starting at OFFSET to\n   descriptor OUT_FD.",
  "__statfs": "Return information about the filesystem on which FILE resides.",
  "__statfs64": "Return information about the filesystem on which FILE resides.",
  "__statvfs64": "Return information about the filesystem on which FILE resides.",
  "statx_generic": "Approximate emulation of statx.  This will always fill in\n   POSIX-mandated attributes even if the underlying file system does\n   not actually support it (for example, GID and UID on file systems\n   without UNIX-style permissions).",
  "__symlink": "Make a link to FROM called TO.",
  "symlinkat": "Make a link to FROM called TO relative to FD.",
  "close_range_test": "Basic tests: check if the syscall close ranges with and without gaps.",
  "close_range_test_subprocess": "Check if a clone_range on a subprocess created with CLONE_FILES close\n   the shared file descriptor table entries in the parent.",
  "close_range_unshare_test": "Check if a close_range with CLOSE_RANGE_UNSHARE issued from a subprocess\n   created with CLONE_FILES does not close the parent file descriptor list.",
  "closefrom_test_file_desc_limit": "Check if closefrom works even when no new file descriptors can be\n   created.",
  "simple_file_copy": "Perform a copy of a file.",
  "short_copy": "Test that a short input file results in a shortened copy.",
  "fcntl_lockf": "This is essentially the POSIX lockf.",
  "compare_ents": "Largest name wins, otherwise strcmp.",
  "check_same_stats": "See if the stat buffer SB refers to the file AS_FNAME.",
  "getcwd_callback": "The actual test.  Run it in a subprocess, so that the test harness\n   can remove the temporary directory in --direct mode.",
  "select_path": "Chose the appropriate path to pass as the path argument to the *at\n   functions.",
  "wrap_open": "Error-checking wrapper for the open function, compatible with the\n   wrapper_func type.",
  "wrap_openat": "Error-checking wrapper for the openat function, compatible with the\n   wrapper_func type.",
  "wrap_open64": "Error-checking wrapper for the open64 function, compatible with the\n   wrapper_func type.",
  "wrap_openat64": "Error-checking wrapper for the openat64 function, compatible with the\n   wrapper_func type.",
  "is_file_deleted": "Return true if FD is flagged as deleted in /proc/self/fd, false if\n   not.",
  "get_random_name": "Obtain a file name which is difficult to guess.",
  "check_wrapper_flags_mode": "Check open/openat (as specified by OP and WRAPPER) with a specific\n   PATH/FLAGS/MODE combination.",
  "check_wrapper_mode": "Check OP/WRAPPER with various flags at a specific PATH and\n   MODE.",
  "check_wrapper": "Check open/openat with varying permissions.",
  "probe_path": "Verify that the directory at PATH supports O_TMPFILE.  Exit with\n   status 77 (unsupported) if the kernel does not support O_TMPFILE.\n   Even with kernel support, not all file systems O_TMPFILE, so return\n   true if the directory supports O_TMPFILE, false if not.",
  "kernel_supports_statx": "Return true if we have a real implementation of statx.",
  "both_implementations_tests": "Tests which apply to both implementations.",
  "non_kernel_tests": "Tests which apply only to the non-kernel (generic)\n   implementation.",
  "ttyname": "Return the pathname of the terminal FD is open on, or NULL on errors.\n   The returned storage is good only until the next call to this function.",
  "__ttyname_r": "Store at most BUFLEN character of the pathname of the terminal FD is\n   open on in BUF.  Return 0 on success,  otherwise an error number.",
  "__umask": "Set the file creation mask to MASK, returning the old mask.",
  "__unlink": "Remove the link named NAME.",
  "unlinkat": "Remove the link named NAME.",
  "utime": "Set the access and modification times of FILE to those given in TIMES.\n   If TIMES is NULL, set them to the current time.",
  "utimensat": "Change the access time of FILE to TSP[0] and\n   the modification time of FILE to TSP[1].",
  "__libc_write": "Write NBYTES of BUF to FD.  Return the number written, or -1.",
  "local_isatty": "Return the result of isatty, without changing errno.",
  "_IO_file_doallocate": "Allocate a file buffer, or switch to unbuffered I/O.  Streams for\n   TTY devices default to line buffered.",
  "_IO_new_file_init": "External version of _IO_new_file_init_internal which switches off\n   vtable validation.",
  "_IO_new_do_write": "Write TO_DO bytes from DATA to FP.\n   Then mark FP as having empty buffers.",
  "mmap_remap_check": "Guts of underflow callback if we mmap the file.  This stats the file and\n   updates the stream state to match.  In the normal case we return zero.\n   If the file is no longer eligible for mmap, its jump tables are reset to\n   the vanilla ones and we return nonzero.",
  "_IO_file_underflow_mmap": "Special callback replacing the underflow callbacks if we mmap the file.",
  "do_ftell": "ftell{,o} implementation.  The only time we modify the state of the stream\n   is when we have unflushed writes.  In that case we seek to the end and\n   record that offset in the stream object.",
  "__fwprintf": "VARARGS2",
  "__fwscanf": "VARARGS2",
  "_IO_least_marker": "Return minimum _pos markers\n   Assumes the current get area is the main get area.",
  "_IO_switch_to_main_get_area": "Switch current get area from backup buffer to (start of) main get area.",
  "_IO_switch_to_backup_area": "Switch current get area from main get area to (end of) backup area.",
  "_IO_enable_locks": "In a single-threaded process most stdio locks can be omitted.  After\n   _IO_enable_locks is called, locks are not optimized away any more.\n   It must be first called while the process is still single-threaded.\n\n   This lock optimization can be disabled on a per-file basis by setting\n   _IO_FLAGS2_NEED_LOCK, because a file can have user-defined callbacks\n   or can be locked with flockfile and then a thread may be created\n   between a lock and unlock, so omitting the lock is not valid.\n\n   Here we have to make sure that the flag is set on all existing files\n   and files created later.",
  "_IO_default_finish": "The way the C++ classes are mapped into the C functions in the\n   current implementation, this function can get called twice!",
  "_IO_marker_delta": "Return difference between MARK and current position of MARK's stream.",
  "set_callbacks": "Copy the callbacks from SOURCE to *TARGET, with pointer\n   mangling.",
  "_IO_ftell": "ANSI explicily requires setting errno to a positive value on failure.",
  "__getdelim": "Read up to (and including) a TERMINATOR from FP into *LINEPTR\n   (and null-terminate it).  *LINEPTR is a pointer returned from malloc (or\n   NULL), pointing to *N characters of space.  It is realloc'ed as\n   necessary.  Returns the number of characters read (not including the\n   null terminator), or -1 on error or EOF.",
  "_IO_getwline_info": "Algorithm based on that used by Berkeley pre-4.4 fgets implementation.\n\n   Read chars into buf (of size n), until delim is seen.\n   Return number of chars read (at most n).\n   Does not put a terminating '\\0' in buf.\n   If extract_delim < 0, leave delimiter unread.\n   If extract_delim > 0, insert delim in output.",
  "spawn_process": "POSIX states popen shall ensure that any streams from previous popen()\n   calls that remain open in the parent process should be closed in the new\n   child process.\n   To avoid a race-condition between checking which file descriptors need to\n   be close (by transversing the proc_file_chain list) and the insertion of a\n   new one after a successful posix_spawn this function should be called\n   with proc_file_chain_lock acquired.",
  "__open_memstream": "Open a stream that writes into a malloc'd buffer that is expanded as\n   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location\n   and the number of characters written on fflush or fclose.",
  "_IO_old_do_write": "Write TO_DO bytes from DATA to FP.\n   Then mark FP as having empty buffers.",
  "__old_pclose": "POSIX does not require us to check that a stream passed to pclose()\n   was created by popen().  Instead we rely on _IO_SYSCLOSE to call\n   _proc_close when appropriate.",
  "_IO_check_libio": "This function determines which shared C library the application\n   was linked against. We then set up the stdin/stdout/stderr and\n   _IO_list_all accordingly.",
  "__new_pclose": "POSIX does not require us to check that a stream passed to pclose()\n   was created by popen().  Instead we rely on _IO_SYSCLOSE to call\n   _proc_close when appropriate.",
  "__swprintf": "VARARGS3",
  "__swscanf": "Read formatted input from S, according to the format string FORMAT.",
  "do_test_basic": "Basic tests for freopen.",
  "do_test_return_stream": "Verify that freopen returns stream.",
  "do_test_bz21398": "Test for BZ#21398, where it tries to freopen stdio after the close\n   of its file descriptor.",
  "do_ftruncate_test": "This test verifies that the offset reported by ftell is correct after the\n   file is truncated using ftruncate.  ftruncate does not change the file\n   offset on truncation and hence, SEEK_CUR should continue to point to the\n   old offset and not be changed to the new offset.",
  "do_rewind_test": "Test that ftell output after a rewind is correct.",
  "do_ftell_test": "Test that the value of ftell is not cached when the stream handle is not\n   active.",
  "do_write_test": "This test opens the file for writing, moves the file offset of the\n   underlying file, writes out data and then checks if ftell trips on it.",
  "do_append_test": "This test opens a file in append mode, writes some data, and then verifies\n   that ftell does not trip over it.",
  "log_method": "Method implementations which increment the counters in *shared.",
  "check_call": "Call CALLBACK in a subprocess, after setting up a custom file\n   object and updating shared->fp.",
  "run_tests": "Run all the tests.  Invoked with different IFS values.",
  "fwwrite": "Straightforward implementation so tst-memstream3 could use check\n   fwrite on open_memstream.",
  "__vwprintf": "Write formatted output to stdout according to the\n   format string FORMAT, using the argument list in ARG.",
  "_IO_wfile_doallocate": "Allocate a file buffer, or switch to unbuffered I/O.",
  "_IO_wdo_write": "Convert TO_DO wide character from DATA to FP.\n   Then mark FP as having empty buffers.",
  "do_ftell_wide": "ftell{,o} implementation for wide mode.  Don't modify any state of the file\n   pointer while we try to get the current state of the stream except in one\n   case, which is when we have unflushed writes in append mode.",
  "_IO_least_wmarker": "Return minimum _pos markers\n   Assumes the current get area is the main get area.",
  "_IO_wmarker_delta": "Return difference between MARK and current position of MARK's stream.",
  "open_wmemstream": "Open a stream that writes into a malloc'd buffer that is expanded as\n   necessary.  *BUFLOC and *SIZELOC are updated with the buffer's location\n   and the number of characters written on fflush or fclose.",
  "__wprintf": "VARARGS1",
  "__wscanf": "VARARGS1",
  "_IO_wstr_count": "The size of the valid part of the buffer.",
  "__ctype_get_mb_cur_max": "This is a gross hack to get broken programs running.\n\n   ISO C provides no mean to find out how many bytes the wide\n   character representation really uses.  But it defines MB_CUR_LEN to\n   return the information for the multi-byte character representation.\n   Many programmers don't know the difference between the two and\n   think this means the same.  But assuming all characters have a size\n   of MB_CUR_LEN after they have been processed by `mbrtowc' is wrong.\n   Instead the maximum number of characters used for the conversion is\n   MB_CUR_LEN.\n\n   It is known that some Motif applications have this problem.  To\n   cure this one has to make sure the glibc uses the function in this\n   file instead of the one in locale/mb_cur_max.c.  This can either be\n   done by linking with this file or by using the LD_PRELOAD feature\n   of the dynamic linker.",
  "__collidx_table_lookup": "Lookup in a table of int32_t, with default value 0.",
  "__collseq_table_lookup": "Lookup in a table of uint32_t, with default value 0xffffffff.",
  "name_present": "Checks if the name is actually present, that is, not NULL and not\n   empty.",
  "valid_locale_name": "Checks that the locale name neither extremely long, nor contains a\n   \"..\" path component (to prevent directory traversal).",
  "_nl_remove_locale": "Calling this function assumes the lock for handling global locale data\n   is acquired.",
  "_nl_postload_ctype": "We are called after loading LC_CTYPE data to load it into\n   the variables used by the ctype.h macros.",
  "calculate_head_size": "Calculate the amount of space needed for all the tables described\n   by the given header.  Note we do not include the empty table space\n   that has been preallocated in the file, so our mapping may not be\n   large enough if localedef adds data to the file in place.  However,\n   doing that would permute the header fields while we are accessing\n   them and thus not be safe anyway, so we don't allow for that.",
  "_nl_load_locale_from_archive": "Find the locale *NAMEP in the locale archive, and return the\n   internalized data structure for its CATEGORY data.  If this locale has\n   already been loaded from the archive, just returns the existing data\n   structure.  If successful, sets *NAMEP to point directly into the mapped\n   archive string table; that way, the next call can short-circuit strcmp.",
  "_nl_intern_locale_data_fill_cache_ctype": "Fill in LOCDATA->private for the LC_CTYPE category.",
  "_nl_intern_locale_data_fill_cache": "Updates data in LOCDATA->private for CATEGORY.",
  "_nl_intern_locale_data_extra_size": "Returns the number of bytes allocated of struct __locale_data for\n   CATEGORY.",
  "__localeconv": "Return monetary and numeric information about the current locale.",
  "nl_langinfo": "Return a string with the data for locale-dependent parameter ITEM.",
  "__nl_langinfo_l": "Return a string with the data for locale-dependent parameter ITEM.",
  "new_composite_name": "Construct a new composite name.",
  "setname": "Put NAME in _nl_global_locale.__names.",
  "setdata": "Put DATA in *_nl_current[CATEGORY].",
  "_nl_locale_subfreeres": "This is called from iconv/gconv_db.c's free_mem, as locales must\n   be freed before freeing gconv steps arrays.",
  "__uselocale": "Switch the current thread's locale to DATASET.\n   If DATASET is null, instead just return the current setting.\n   The special value LC_GLOBAL_LOCALE is the initial setting\n   for all threads, and means the thread uses the global\n   setting controlled by `setlocale'.",
  "charmap_opendir": "Starts a charmap directory traversal.\n   Returns a CHARMAP_DIR, or NULL if the directory doesn't exist.",
  "charmap_readdir": "Reads the next directory entry.\n   Returns its charmap name, or NULL if past the last entry or upon error.\n   The storage returned may be overwritten by a later charmap_readdir\n   call on the same CHARMAP_DIR.",
  "charmap_closedir": "Finishes a charmap directory traversal, and frees the resources\n   attached to the CHARMAP_DIR.",
  "fopen_uncompressed": "Creates a subprocess decompressing the given pathname, and returns\n   a stream reading its output (the decompressed data).",
  "charmap_open": "Opens a charmap for reading, given its name (not an alias name).",
  "charmap_aliases": "Returns a NULL terminated list of alias names of a charmap.",
  "charmap_free_aliases": "Frees an alias list returned by charmap_aliases.",
  "address_read": "The parser for the LC_ADDRESS section of the locale definition.",
  "check_duplicate": "Test whether this name is already defined somewhere.",
  "read_directions": "Read the direction specification.",
  "wctrans_table_add": "The wctrans_table must actually store the difference between the\n   desired result and the argument.",
  "ctype_class_new": "Local functions.",
  "find_idx": "Find next weight and rule index.  Inlined since called for every char.",
  "charclass_symbolic_ellipsis": "Ellipsis like in `<foo123>..<foo12a>' or `<j1234>....<j1245>' and\n   the .(2). counterparts.",
  "charclass_ucs4_ellipsis": "Ellipsis like in `<U1234>..<U2345>' or `<U1234>..(2)..<U2345>'.",
  "charclass_charcode_ellipsis": "Ellipsis as in `/xea/x12.../xea/x34'.",
  "read_widestring": "Read one transliteration entry.",
  "ctype_read": "The parser for the LC_CTYPE section of the locale definition.",
  "set_one_default": "Subroutine of set_class_defaults, below.",
  "wctype_table_init": "Initialize.  Assumes t->p and t->q have already been set.",
  "wctype_table_add": "Add one entry.",
  "add_locale_wctype_table": "Finalize and shrink.",
  "translit_flatten": "Flattens the included transliterations into a translit list.\n   Inserts them in the list at `cursor', and returns the new cursor.",
  "identification_read": "The parser for the LC_IDENTIFICATION section of the locale definition.",
  "measurement_read": "The parser for the LC_MEASUREMENT section of the locale definition.",
  "messages_read": "The parser for the LC_MESSAGES section of the locale definition.",
  "monetary_read": "The parser for the LC_MONETARY section of the locale definition.",
  "name_read": "The parser for the LC_NAME section of the locale definition.",
  "numeric_read": "The parser for the LC_NUMERIC section of the locale definition.",
  "paper_read": "The parser for the LC_PAPER section of the locale definition.",
  "telephone_read": "The parser for the LC_TELEPHONE section of the locale definition.",
  "time_read": "The parser for the LC_TIME section of the locale definition.",
  "lr_buffer_init": "Initialize *LRB with a default-sized buffer.",
  "lr_buffer_to_token": "Transfers the buffer string from *LRB to LR->token.mbstr.",
  "addc": "Adds CH to *LRB.",
  "adds": "Adds L bytes at S to *LRB.",
  "translate_unicode_codepoint": "Process a decoded Unicode codepoint WCH in a string, placing the\n   multibyte sequence into LRB.  Return false if the character is not\n   found in CHARMAP/REPERTOIRE.",
  "utf8_valid_trailing": "Returns true if ch is not EOF (that is, non-negative) and a valid\n   UTF-8 trailing byte.",
  "utf8_sequence_error": "Reports an error for a broken UTF-8 sequence.  CH2 to CH4 may be\n   EOF.  Always returns false.",
  "locale_special": "We provide support for some special names.  This helps debugging\n   and may be useful for advanced usage of the provided information\n   outside C.",
  "print_names": "Simple action function which prints arguments as strings.",
  "write_locales": "Write the names of all available locales to stdout.  We have some\n   sources of the information: the contents of the locale directory\n   and the locale.alias file.  To avoid duplicates and print the\n   result is a reasonable order we put all entries is a search tree\n   and print them afterwards.",
  "write_charmaps": "Write the names of all available character maps to stdout.",
  "print_assignment": "Print a properly quoted assignment of NAME with VAL, using double\n   quotes iff DQUOTE is true.",
  "show_locale_vars": "We have to show the contents of the environments determining the\n   locale.",
  "print_item": "Subroutine of show_info, below.",
  "show_info": "Show the information request for NAME.",
  "try_setlocale": "Call setlocale, with non-fatal error reporting.",
  "quote_string": "Return a quoted version of the passed string, or NULL on error.",
  "setlocale_diagnostics": "Print additional information if there was a setlocale error (during\n   try_setlocale).",
  "set_warnings": "Search warnings for matching warnings and if found enable those\n   warnings if ENABLED is true, otherwise disable the warnings.",
  "construct_output_path": "The parameter to localedef describes the output path.  If it does contain a\n   '/' character it is a relative path.  Otherwise it names the locale this\n   definition is for.   The returned path must be freed by the caller.",
  "normalize_codeset": "Normalize codeset name.  There is no standard for the codeset names.\n   Normalization allows the user to use any of the common names e.g. UTF-8,\n   utf-8, utf8, UTF8 etc.\n\n   We normalize using the following rules:\n   - Remove all non-alpha-numeric characters\n   - Lowercase all characters.\n   - If there are only digits assume it's an ISO standard and prefix with 'iso'\n\n   We return the normalized string which needs to be freed by free.",
  "prepare_address_space": "To prepare for enlargements of the mmaped area reserve some address\n   space.  On some machines, being a file mapping rather than an anonymous\n   mapping affects the address selection.  So do this mapping from the\n   actual file, even though it's only a dummy to reserve address space.",
  "add_locale": "Check the content of the archive for duplicates.  Add the content\n   of the files if necessary.  Returns the locrec_offset.",
  "add_locale_to_archive": "Check the content of the archive for duplicates.  Add the content\n   of the files if necessary.  Add all the names, possibly overwriting\n   old files.",
  "siblings_uncached": "Return a NULL terminated list of the directories next to output_path\n   that have the same owner, group, permissions and device as output_path.",
  "siblings": "Return a NULL terminated list of the directories next to output_path\n   that have the same owner, group, permissions and device as output_path.\n   Cache the result for future calls.",
  "full_read": "Read as many bytes from a file descriptor as possible.",
  "compare_files": "Compare the contents of two regular files of the same size.  Return 0\n   if they are equal, 1 if they are different, or -1 if an error occurs.",
  "record_offset": "When called outside a start_locale_structure/end_locale_structure\n   or start_locale_prelude/end_locale_prelude block, record that the\n   next byte in FILE's obstack will be the first byte of a new element.\n   Do likewise for the first call inside a start_locale_structure/\n   end_locale_structure block.",
  "init_locale_data": "Initialize FILE for a new output file.  N_ELEMENTS is the number\n   of elements in the file.",
  "align_locale_data": "Align the size of FILE's obstack object to BOUNDARY bytes.",
  "add_locale_empty": "Record that FILE's next element contains no data.",
  "add_locale_raw_data": "Record that FILE's next element consists of SIZE bytes starting at DATA.",
  "add_locale_raw_obstack": "Finish the current object on OBSTACK and use it as the data for FILE's\n   next element.",
  "add_locale_string": "Use STRING as FILE's next element.",
  "add_locale_wstring": "Likewise for wide strings.",
  "add_locale_uint32": "Record that FILE's next element is the 32-bit integer VALUE.",
  "add_locale_uint32_array": "Record that FILE's next element is an array of N_ELEMS integers\n   starting at DATA.",
  "add_locale_char": "Record that FILE's next element is the single byte given by VALUE.",
  "start_locale_structure": "Start building an element that contains several different pieces of data.\n   Subsequent calls to add_locale_* will add data to the same element up\n   till the next call to end_locale_structure.  The element's alignment\n   is dictated by the first piece of data added to it.",
  "end_locale_structure": "Finish a structure element that was started by start_locale_structure.\n   Empty structures are OK and behave like add_locale_empty.",
  "start_locale_prelude": "Start building data that goes before the next element's recorded offset.\n   Subsequent calls to add_locale_* will add data to the file without\n   treating any of it as the start of a new element.  Calling\n   end_locale_prelude switches back to the usual behavior.",
  "end_locale_prelude": "End a block started by start_locale_prelude.",
  "write_locale_data": "Write a locale file, with contents given by FILE.",
  "handle_copy": "General handling of `copy'.",
  "__md5_process_block": "Process LEN bytes of BUFFER, accumulating context into CTX.\n   It is assumed that LEN % 64 == 0.",
  "__md5_init_ctx": "Initialize structure containing state of computation.\n   (RFC 1321, 3.3: Step 3)",
  "__md5_read_ctx": "Put result from CTX in first 16 bytes following RESBUF.  The result\n   must be in little endian byte order.\n\n   IMPORTANT: On some systems it is required that RESBUF is correctly\n   aligned for a 32 bits value.",
  "__md5_finish_ctx": "Process the remaining bytes in the internal buffer and the usual\n   prolog according to the standard and write the result to RESBUF.\n\n   IMPORTANT: On some systems it is required that RESBUF is correctly\n   aligned for a 32 bits value.",
  "__md5_buffer": "Compute MD5 message digest for LEN bytes beginning at BUFFER.  The\n   result is always in little endian byte order, so that a byte-wise\n   output yields to the wanted ASCII representation of the message\n   digest.",
  "push_locale": "Alter the current locale to match the locale configured by the\n   user, and return the previous saved state.",
  "pop_locale": "Use the saved state to restore the locale.",
  "record_verbose": "Wrapper to print verbose informative messages.\n   Verbose messages are only printed if --verbose\n   is in effect and --quiet is not.",
  "record_warning": "Wrapper to print warning messages.  We keep track of how\n   many were called because this effects our exit code.\n   Nothing is printed if --quiet is in effect, but warnings\n   are always counted.",
  "record_error": "Wrapper to print error messages.  We keep track of how\n   many were called because this effects our exit code.\n   Nothing is printed if --quiet is in effect, but errors\n   are always counted, and fatal errors always exit the\n   program.",
  "record_error_at_line": "... likewise for error_at_line.",
  "xmalloc": "Return a pointer to a newly allocated buffer of size SIZE, exiting\n   on failure.  SIZE should be nonzero.",
  "check_link": "Check for link count.",
  "setlocale_copy": "The result of setlocale may be overwritten by subsequent calls, so\n   this wrapper makes a copy.",
  "setlocale_ignore": "Checks that a known-good locale still works if LC_ALL contains a\n   value which should be ignored.",
  "getlogin": "Return the login name of the user, or NULL if it can't be determined.\n   The returned pointer, if not NULL, is good only until the next call.",
  "__getlogin_r": "Return at most NAME_LEN characters of the login name of the user in NAME.\n   If it cannot be determined or some other error occurred, return the error\n   code.  Otherwise return 0.",
  "__posix_openpt": "Open a master pseudo terminal and return its file descriptor.",
  "__setutent": "We need to protect the opening of the file.",
  "getutmpx": "Copy the information in UTMP to UTMPX.",
  "tty_name": "Return the result of ttyname in the buffer pointed to by TTY, which should\n   be of length BUF_LEN.  If it is too long to fit in this buffer, a\n   sufficiently long buffer is allocated using malloc, and returned in TTY.\n   0 is returned upon success, -1 otherwise.",
  "pts_name": "Return the result of ptsname_r in the buffer pointed to by PTS,\n   which should be of length BUF_LEN.  If it is too long to fit in\n   this buffer, a sufficiently long buffer is allocated using malloc,\n   and returned in PTS.  0 is returned upon success, -1 otherwise.",
  "__openpty": "Create pseudo tty multiplexer/terminal pair and set terminal attributes\n   according to TERMP and WINP.  Return handles for both ends in\n   *PPTMX and *PTERMINAL, and return the name of the terminal end in NAME.",
  "setlogin": "Set the login name returned by `getlogin'.",
  "test_ebadf": "Test grantpt, unlockpt with a closed descriptor.",
  "test_einval": "Test grantpt, unlockpt on a regular file.",
  "test_not_ptmx": "Test grantpt, unlockpt on a non-ptmx pseudo-terminal.",
  "xsetutxent": "setutxent with error checking.",
  "xgetutxent": "getutxent with error checking.",
  "process1": "Use two cooperating subprocesses to avoid issues related to\n   unlock-on-close semantics of POSIX advisory locks.",
  "write_entry": "Use pututxline to write an entry for PID.",
  "subprocess_create_entry": "Create the initial entry in a subprocess, so that the utmp\n   subsystem in the original process is not disturbed.",
  "subprocess_lock_file": "Acquire an advisory read lock on PATH.",
  "matches_last_entry": "Returns true if *ENTRY matches last_entry, based on\n   data->ut_type.",
  "timeout_handler": "Do-nothing handler for locking timeout.",
  "try_file_lock": "try_file_lock (LOCKING, FD, TYPE) returns true if the locking\n   operation failed and recovery needs to be performed.\n\n   file_unlock (FD) removes the lock (which must have been\n   successfully acquired).",
  "maybe_setutent": "Perform initialization if necessary.",
  "read_last_entry": "Reads the entry at file_offset, storing it in last_entry and\n   updating file_offset on success.  Returns -1 for a read error, 0\n   for EOF, and 1 for a successful read.  last_entry and file_offset\n   are only updated on a successful and complete read.",
  "internal_getut_nolock": "Search for *ID, updating last_entry and file_offset.  Return 0 on\n   success and -1 on failure.  Does not perform locking; for that see\n   internal_getut_r below.",
  "internal_getut_r": "Search for *ID, updating last_entry and file_offset.  Return 0 on\n   success and -1 on failure.  If the locking operation failed, write\n   true to *LOCK_FAILED.",
  "__libc_getutid_r": "For implementing this function we don't use the getutent_r function\n   because we can avoid the reposition on every new entry this way.",
  "__libc_getutline_r": "For implementing this function we don't use the getutent_r function\n   because we can avoid the reposition on every new entry this way.",
  "__mig_allocate": "Called by MiG to allocate space.",
  "__mig_deallocate": "Called by MiG to deallocate space.",
  "__mig_get_reply_port": "Called by MiG to get a reply port.",
  "__mig_init": "Called at startup with STACK == NULL.  When per-thread variables are set\n   up, this is called again with STACK set to the new stack being switched\n   to, where per-thread variables should be set up.",
  "__mach_msg_destroy": "*\tRoutine:\tmach_msg_destroy\n *\tPurpose:\n *\t\tDeallocates all port rights and out-of-line memory\n *\t\tfound in a received message.",
  "__mach_msg_trap": "In variants with this feature, the actual system call is\n   __mach_msg_overwrite_trap.",
  "__mach_msg_overwrite": "See comments below in __mach_msg.",
  "__mach_msg": "In variants with this feature, the actual system call is\n   __mach_msg_overwrite_trap.",
  "__mach_setup_thread": "Give THREAD a stack and set it to run at PC when resumed.\n   If *STACK_SIZE is nonzero, that size of stack is allocated.\n   If *STACK_BASE is nonzero, that stack location is used.\n   If STACK_BASE is not null it is filled in with the chosen stack base.\n   If STACK_SIZE is not null it is filled in with the chosen stack size.\n   Regardless, an extra page of red zone is allocated off the end; this\n   is not included in *STACK_SIZE.",
  "__mach_setup_tls": "Give THREAD a TLS area.",
  "__libc_alloc_buffer_copy_bytes": "This function works on a copy of the buffer object, so that it can\n   remain non-addressable in the caller.",
  "__libc_alloc_buffer_copy_string": "This function works on a copy of the buffer object, so that it can\n   remain non-addressable in the caller.",
  "heap_min_size": "When huge pages are used to create new arenas, the maximum and minimum\n   size are based on the runtime defined huge page size.",
  "heap_for_ptr": "find the heap and corresponding arena for a given ptr",
  "__malloc_fork_lock_parent": "The following three functions are called around fork from a\n   multi-threaded process.  We do not use the general fork handler\n   mechanism to make sure that our handlers are the last ones being\n   called, so that other fork handlers can use the malloc\n   subsystem.",
  "dump_heap": "Print the complete contents of a single heap to stderr.",
  "alloc_new_heap": "Create a new heap.  size is automatically rounded up to a multiple\n   of the page size.",
  "grow_heap": "Grow a heap.  size is automatically rounded up to a\n   multiple of the page size.",
  "shrink_heap": "Shrink a heap.",
  "heap_trim": "Delete a heap.",
  "detach_arena": "If REPLACED_ARENA is not NULL, detach it from this thread.  Must be\n   called while free_list_lock is held.",
  "get_free_list": "Remove an arena from free_list.",
  "remove_from_free_list": "Remove the arena from the free list (if it is present).\n   free_list_lock must have been acquired by the caller.",
  "reused_arena": "Lock and return an arena that can be reused for memory allocation.\n   Avoid AVOID_ARENA as we have already failed to allocate memory in\n   it and it is currently locked.",
  "arena_get_retry": "If we don't have the main arena, then maybe the failure is due to running\n   out of mmapped areas, so we can try allocating on the main arena.\n   Otherwise, it is likely that sbrk() has failed and there is still a chance\n   to mmap(), so try one of the other arenas.",
  "DYNARRAY_FREE": "Deallocate the dynamic array and its elements.",
  "magicbyte": "A simple, standard set of debugging hooks.  Overhead is `only' one\n   byte per chunk; still this will catch most cases of double frees or\n   overruns.  The goal here is to avoid obscure crashes due to invalid\n   usage, unlike in the MALLOC_DEBUG code.",
  "malloc_check_get_size": "Visualize the chunk as being partitioned into blocks of 255 bytes from the\n   highest address of the chunk, downwards.  The end of each block tells\n   us the size of that block, up to the actual size of the requested\n   memory.  Our magic byte is right at the end of the requested size, so we\n   must reach it with this iteration, otherwise we have witnessed a memory\n   corruption.",
  "mem2mem_check": "Instrument a chunk with overrun detector byte(s) and convert it\n   into a user pointer with requested size req_sz.",
  "mem2chunk_check": "Convert a pointer to be free()d or realloc()ed to a valid chunk\n   pointer.  If the provided pointer is not valid, return NULL.",
  "top_check": "Check for corruption of the top chunk.",
  "generic_hook_ini": "These hooks will get executed only through the interposed allocator\n   functions in libc_malloc_debug.so.  This means that the calls to malloc,\n   realloc, etc. will lead back into the interposed functions, which is what we\n   want.\n\n   These initial hooks are assumed to be called in a single-threaded context,\n   so it is safe to reset all hooks at once upon initialization.",
  "__debug_malloc": "The allocator functions.",
  "malloc_get_state": "Dummy implementation which always fails.  We need to provide this\n   symbol so that existing Emacs binaries continue to work with\n   BIND_NOW.",
  "checked_request2size": "Check if REQ overflows when padded and aligned and if the resulting\n   value is less than PTRDIFF_T.  Returns the requested size or\n   MINSIZE in case the value is less than MINSIZE, or 0 if any of the\n   previous checks fail.",
  "unlink_chunk": "Take a chunk off a bin list.",
  "malloc_init_state": "Initialize a malloc_state struct.\n\n   This is called from ptmalloc_init () or from _int_new_arena ()\n   when creating a new arena.",
  "madvise_thp": "----------- Routines dealing with transparent huge pages -----------",
  "do_check_chunk": "Properties of all chunks",
  "do_check_free_chunk": "Properties of free chunks",
  "do_check_inuse_chunk": "Properties of inuse chunks",
  "do_check_remalloced_chunk": "Properties of chunks recycled from fastbins",
  "do_check_malloced_chunk": "Properties of nonrecycled chunks at the point they are malloced",
  "do_check_malloc_state": "Properties of malloc_state.\n\n   This may be useful for debugging malloc, as well as detecting user\n   programmer errors that somehow write into malloc_state.\n\n   If you are extending or experimenting with this malloc, you can\n   probably figure out how to hack this routine to print out or\n   display chunk addresses, sizes, bins, and other instrumentation.",
  "sysmalloc_mmap": "sysmalloc handles malloc cases requiring more memory from the system.\n   On entry, it is assumed that av->top does not have enough\n   space to service request for nb bytes, thus requiring that av->top\n   be extended or replaced.",
  "sysmalloc_mmap_fallback": "Allocate memory using mmap() based on S and NB requested size, aligning to\n   PAGESIZE if required.  The EXTRA_FLAGS is used on mmap() call.  If the call\n   succeeds S is updated with the allocated size.  This is used as a fallback\n   if MORECORE fails.",
  "systrim": "systrim is an inverse of sorts to sysmalloc.  It gives memory back\n   to the system (via negative arguments to sbrk) if there is unused\n   memory at the `high' end of the malloc pool. It is called\n   automatically by free() when top space exceeds the trim\n   threshold. It is also called by the public malloc_trim routine.  It\n   returns 1 if it actually released any memory, else 0.",
  "tcache_key_initialize": "The value of tcache_key does not really have to be a cryptographically\n   secure random number.  It only needs to be arbitrary enough so that it does\n   not collide with values present in applications.  If a collision does happen\n   consistently enough, it could cause a degradation in performance since the\n   entire list is checked to check if the block indeed has been freed the\n   second time.  The odds of this happening are exceedingly low though, about 1\n   in 2^wordsize.  There is probably a higher chance of the performance\n   degradation being due to a double free where the first free happened in a\n   different thread; that's a case this check does not cover.",
  "tcache_put": "Caller must ensure that we know tc_idx is valid and there's room\n   for more chunks.",
  "tcache_get_n": "Caller must ensure that we know tc_idx is valid and there's\n   available chunks to remove.  Removes chunk from the middle of the\n   list.",
  "tcache_get": "Like the above, but removes from the head of the list.",
  "tcache_next": "Iterates through the tcache linked list.",
  "_int_free": "------------------------------ free ------------------------------",
  "_int_free_merge_chunk": "Try to merge chunk P of SIZE bytes with its neighbors.  Put the\n   resulting chunk on the appropriate bin list.  P must not be on a\n   bin list yet, and it can be in use.",
  "_int_free_create_chunk": "Create a chunk at P of SIZE bytes, with SIZE potentially increased\n   to cover the immediately following chunk NEXTCHUNK of NEXTSIZE\n   bytes (if NEXTCHUNK is unused).  The chunk at P is not actually\n   read and does not have to be initialized.  After creation, it is\n   placed on the appropriate bin list.  The function returns the size\n   of the new chunk.",
  "_int_free_maybe_consolidate": "If freeing a large space, consolidate possibly-surrounding\n   chunks.  Then, if the total unused topmost memory exceeds trim\n   threshold, ask malloc_trim to reduce top.",
  "malloc_consolidate": "------------------------- malloc_consolidate -------------------------\n\n  malloc_consolidate is a specialized version of free() that tears\n  down chunks held in fastbins.  Free itself cannot be used for this\n  purpose since, among other things, it might place chunks back onto\n  fastbins.  So, instead, we need to use a minor variant of the same\n  code.",
  "_int_realloc": "------------------------------ realloc ------------------------------",
  "_int_memalign": "BYTES is user requested bytes, not requested chunksize bytes.",
  "mtrim": "------------------------------ malloc_trim ------------------------------",
  "musable": "------------------------- malloc_usable_size -------------------------",
  "int_mallinfo": "------------------------------ mallinfo ------------------------------\n   Accumulate malloc statistics for arena AV into M.",
  "__malloc_stats": "------------------------------ malloc_stats ------------------------------",
  "do_set_trim_threshold": "------------------------------ mallopt ------------------------------",
  "malloc_printerr": "-------------------- Alternative MORECORE functions --------------------",
  "__posix_memalign": "We need a wrapper function for one of the additions of POSIX.",
  "__malloc_info": "We need a wrapper function for one of the additions of POSIX.",
  "update_data": "Update the global data after a successful function call.",
  "int_handler": "Interrupt handler.",
  "me": "Find out whether this is the program we are supposed to profile.\n   For this the name in the variable `__progname' must match the one\n   given in the environment variable MEMUSAGE_PROG_NAME.  If the variable\n   is not present every program assumes it should be profiling.\n\n   If this is the program open a file descriptor to the output file.\n   We will write to it whenever the buffer overflows.  The name of the\n   output file is determined by the environment variable MEMUSAGE_OUTPUT.\n\n   If the environment variable MEMUSAGE_BUFFER_SIZE is set its numerical\n   value determines the size of the internal buffer.  The number gives\n   the number of elements in the buffer.  By setting the number to one\n   one effectively selects unbuffered operation.\n\n   If MEMUSAGE_NO_TIMER is not present an alarm handler is installed\n   which at the highest possible frequency records the stack pointer.",
  "mmap": "`mmap' replacement.  We do not have to keep track of the size since\n   `munmap' will get it as a parameter.",
  "mmap64": "`mmap64' replacement.  We do not have to keep track of the size since\n   `munmap' will get it as a parameter.",
  "mremap": "`mremap' replacement.  We do not have to keep track of the size since\n   `munmap' will get it as a parameter.",
  "munmap": "`munmap' replacement.",
  "dest": "Write some statistics to standard error.",
  "__glibc_morecore": "Allocate INCREMENT more bytes of data space,\n   and return the start of data space, or NULL on errors.\n   If INCREMENT is negative, shrink data space.",
  "release_libc_mem": "This function gets called to make sure all memory the library\n   allocates get freed and so does not irritate the user when studying\n   the mtrace output.",
  "do_mtrace": "We enable tracing if the environment variable MALLOC_TRACE is set.",
  "_obstack_begin": "Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).\n   Objects start on multiples of ALIGNMENT (0 means use default).\n   CHUNKFUN is the function to use to allocate chunks,\n   and FREEFUN the function to free them.\n\n   Return nonzero if successful, calls obstack_alloc_failed_handler if\n   allocation fails.",
  "_obstack_newchunk": "Allocate a new current chunk for the obstack *H\n   on the assumption that LENGTH bytes need to be added\n   to the current object, or a new object of length LENGTH allocated.\n   Copies any partial object from the end of the old chunk\n   to the beginning of the new one.",
  "_obstack_memory_used": "Older versions of libc used a function _obstack_free intended to be\n   called by non-GCC compilers.",
  "__libc_thread_freeres": "Thread shutdown function.  Note that this function must be called\n   for threads during shutdown for correctness reasons.  Unlike\n   __libc_freeres, skipping calls to it is not a valid optimization.\n   This is called directly from pthread_create as the thread exits.",
  "test_empty_array": "Check for success obtaining empty arrays.  Does not assume the\n   buffer is empty.",
  "test_impossible_array": "Test allocation of impossibly large arrays.",
  "test_after_failure": "Check for failure to obtain anything from a failed buffer.",
  "test_empty": "Try indexing an empty array.",
  "test_large_misaligned": "Check that overflow during alignment is handled properly.",
  "test_large": "Check behavior of large allocations.",
  "test_many": "Try indexing a longer array.",
  "fill_heap": "Allocate objects until the heap is full.",
  "free_fill_heap": "Free the heap-filling allocations, so that we can continue testing\n   and detect memory leaks elsewhere.",
  "test_int_fail": "Check allocation failures for int arrays (without an element free\n   function).",
  "test_str_fail": "Check allocation failures for char * arrays (which automatically\n   free the pointed-to strings).",
  "mmap_works": "Test if mmap can allocate a page.  This is necessary because\n   setrlimit does not fail even if it reduces the RLIMIT_AS limit\n   below what is currently needed by the process.",
  "xsetrlimit_as": "Set the RLIMIT_AS limit to the value in *LIMIT.",
  "reduce_rlimit_as": "Limit the size of the process, so that memory allocation in\n   allocate_thread will eventually fail, without impacting the entire\n   system.  By default, a dynamic limit which leaves room for 2 MiB is\n   activated.  The TEST_RLIMIT_AS environment variable overrides\n   it.",
  "test_int": "Test dynamic arrays with int elements (no automatic deallocation\n   for elements).",
  "test_str": "Test dynamic arrays with char * elements (with automatic\n   deallocation of the pointed-to strings).",
  "test_long_init": "Verify that DYNARRAY_ELEMENT_INIT has an effect.",
  "test_long_overflow": "Test overflow in resize.",
  "test_zstr": "Test NUL-terminated string construction with the add function and\n   the simple finalize function.",
  "get_errno": "The __attribute__ ((weak)) prevents a GCC optimization.  Without\n   it, GCC would \"know\" that errno is unchanged by calling free (ptr),\n   when ptr was the result of a malloc call in the same function.",
  "check_for_allocations": "Sanity check for successful malloc interposition.",
  "malloc_internal": "Internal helper functions.  Those must be called while the lock is\n   acquired.",
  "malloc_allocation_count": "Public interfaces.  These functions must perform locking.",
  "line_string": "Fills BUFFER with a test string.",
  "check_brk": "Terminate the process if the break value has been changed.",
  "print_mi": "This is not specifically needed for the test, but (1) does\n   something to the data so gcc doesn't optimize it away, and (2) may\n   help when developing future tests.",
  "call_free": "Wrap free with a function to prevent gcc from optimizing it out.",
  "create_file_with_large_line": "Create a file which consists of a single long line, and assigns\n   file_to_read.  The hope is that this triggers an allocation in\n   getline which needs a lock.",
  "outer_thread": "Launch the inner threads and wait for their termination.",
  "allocate_1": "Call the allocation function specified by allocation_function, with\n   allocation_size and alignment (if applicable) as arguments.  No\n   alignment check.",
  "allocate_thread": "Thread function which performs the allocation test.  Called by\n   pthread_create and from the main thread.",
  "run_one": "Runs one test in multiple threads, all in a subprocess so that\n   subsequent tests do not interfere with each other.",
  "run_allocation_functions": "Run all applicable allocation functions for the current test\n   parameters.",
  "test_setup": "This function prepares for each 'too-large memory allocation' test by\n   performing a small successful malloc/free and resetting errno prior to\n   the actual test.",
  "test_large_allocations": "This function tests each of:\n   - malloc (SIZE)\n   - realloc (PTR_FOR_REALLOC, SIZE)\n   - for various values of NMEMB:\n    - calloc (NMEMB, SIZE/NMEMB)\n    - calloc (SIZE/NMEMB, NMEMB)\n    - reallocarray (PTR_FOR_REALLOC, NMEMB, SIZE/NMEMB)\n    - reallocarray (PTR_FOR_REALLOC, SIZE/NMEMB, NMEMB)\n   and precedes each of these tests with a small malloc/free before it.",
  "test_large_aligned_allocations": "This function tests the following aligned memory allocation functions\n   using several valid alignments and precedes each allocation test with a\n   small malloc/free before it:\n   memalign, posix_memalign, aligned_alloc, valloc, pvalloc.",
  "sig_handler": "bar contains an IBT violation if it is called indirectly via a\n   function pointer.  On IBT machines, it should lead to segfault\n   unless IBT is disabled by error.",
  "signal_sender": "Spawn a subprocess to send two signals: First SIGUSR1, then\n   SIGUSR2.  Return the PID of the process.",
  "dumped_heap_alloc": "Allocate a blob in the fake heap.",
  "rand_next": "Simple random number generator.  The numbers are in the range from\n   0 to UINT_MAX (inclusive).",
  "randomize_buffer": "Fill LENGTH bytes at BUFFER with random contents, as determined by\n   SEED.",
  "dump_hex": "Dumps the buffer to standard output,  in hexadecimal.",
  "check_allocation": "Check that the allocation task allocation has the expected\n   contents.",
  "shuffle_allocation_tasks": "Fisher-Yates shuffle of allocation_tasks.",
  "initial_allocations": "Set up the allocation tasks and the dumped heap.",
  "init_heap": "Executed by glibc malloc, through __malloc_initialize_hook\n   below.",
  "full_heap_check": "Perform a full heap check across the dumped heap allocation tasks,\n   and the simulated heap activity directly above.",
  "my_free": "Used as an optimization barrier to force a heap allocation.",
  "test_tcache": "Try corrupting the tcache list.",
  "test_fastbin": "Try corrupting the fastbin list.",
  "test_fastbin_consolidate": "Try corrupting the fastbin list and trigger a consolidate.",
  "print_trace": "Obtain a backtrace and print it to @code{stdout}.",
  "dummy_function": "A dummy function to make the backtrace more interesting.",
  "mbstouwcs": "Do not include the above headers in the example.",
  "read_from_pipe": "Read characters from the pipe and echo them to @code{stdout}.",
  "write_to_pipe": "Write some random text to the pipe.",
  "print_widget": "@end group",
  "critter_cmp": "This is the comparison function used for sorting and searching.",
  "print_critter": "Print information about a critter.",
  "find_critter": "Do the lookup into the sorted array.",
  "input_timeout": "@group",
  "catch_alarm": "The signal handler just clears the flag and re-enables itself.",
  "child_function": "The child process executes this function.",
  "timeval_subtract": "Subtract the `struct timeval' values X and Y,\n   storing the result in RESULT.\n   Return 1 if the difference is negative, otherwise 0.",
  "exp_mpn": "Compute e^x.",
  "exp2_mpn": "Calculate 2^x.",
  "__ieee754_exp10": "Double-precision 10^x approximation. Largest observed error is ~0.513 ULP.",
  "assert_exact": "Assert that the result of an MPFR operation was exact; that is,\n   that the returned ternary value was 0.",
  "generic_arg_ret_type": "Return the generic type of an argument or return value type T.",
  "generic_value_free": "Free a generic_value *V.",
  "generic_value_copy": "Copy a generic_value *SRC to *DEST.",
  "init_fp_formats": "Initialize data for floating-point formats.",
  "adjust_real": "Given a real number R computed in round-to-zero mode, set the\n   lowest bit as a sticky bit if INEXACT, and saturate the exponent\n   range for very large or small values.",
  "round_real": "Given a finite real number R with sticky bit, compute the roundings\n   to FORMAT in each rounding mode, storing the results in RES, the\n   before-rounding exceptions in EXC_BEFORE and the after-rounding\n   exceptions in EXC_AFTER.",
  "handle_input_arg": "Handle the input argument at ARG (NUL-terminated), updating the\n   lists of test inputs in IT accordingly.  NUM_PREV_ARGS arguments\n   are already in those lists.  If EXACT_ARGS, interpret a value given\n   as a floating-point constant exactly (it must be exact for some\n   supported format) rather than rounding up and down.  The argument,\n   of type GTYPE, comes from file FILENAME, line LINENO.",
  "handle_input_flag": "Handle the input flag ARG (NUL-terminated), storing it in *FLAG.\n   The flag comes from file FILENAME, line LINENO.",
  "add_test": "Add the test LINE (file FILENAME, line LINENO) to the test\n   data.",
  "read_input": "Read in the test input data from FILENAME.",
  "calc_generic_results": "Calculate the generic results (round-to-zero with sticky bit) for\n   the function described by CALC, with inputs INPUTS, if MODE is\n   rm_towardzero; for other modes, calculate results in that mode,\n   which must be exact zero results.",
  "int_type_bits": "Return the number of bits for integer type TYPE, where \"long\" has\n   LONG_BITS bits (32 or 64).",
  "int_fits_type": "Check whether an integer Z fits a given type TYPE, where \"long\" has\n   LONG_BITS bits (32 or 64).",
  "output_generic_value": "Print a generic value V to FP (name FILENAME), preceded by a space,\n   for type TYPE, LONG_BITS bits per long, printing \" IGNORE\" instead\n   if IGNORE.",
  "output_for_one_input_case": "Generate test output to FP (name FILENAME) for test function TF\n   (rounding results to a narrower type if NARROW), input test IT,\n   choice of input values INPUTS.",
  "generate_output": "Generate test output data for FUNCTION to FILENAME.  The function\n   is interpreted as rounding its results to a narrower type if\n   NARROW.",
  "fmt_ftostr": "Converts VALUE (a floating-point number) to string and writes it to DEST.\n   PRECISION specifies the number of fractional digits that should be printed.\n   CONVERSION is the conversion specifier, such as in printf, e.g. 'f' or 'a'.\n   The output is prepended with an empty space if VALUE is non-negative.",
  "compare_ulp_data": "Compare KEY (a string, with the name of a function) with ULP (a\n   pointer to a struct ulp_data structure), returning a value less\n   than, equal to or greater than zero for use in bsearch.",
  "find_ulps": "Return the ulps for NAME in array DATA with NMEMB elements, or 0 if\n   no ulps listed.",
  "print_float": "======================================================================",
  "print_screen": "Should the message print to screen?  This depends on the verbose flag,\n   and the test status.",
  "print_screen_max_error": "Should the message print to screen?  This depends on the verbose flag,\n   and the test status.",
  "update_stats": "Update statistic counters.",
  "fpstack_test": "Test if Floating-Point stack hasn't changed",
  "test_single_exception": "Test whether a given exception was raised.",
  "test_single_errno": "Test whether errno for TEST_NAME, set to ERRNO_VALUE, has value\n   EXPECTED_VALUE (description EXPECTED_NAME).",
  "test_errno": "Test whether errno (value ERRNO_VALUE) has been for TEST_NAME set\n   as required by EXCEPTIONS.",
  "ulp": "Returns the size of an ulp for VALUE.",
  "check_int": "Check that computed and expected values are equal (int values).",
  "check_long": "Check that computed and expected values are equal (long int values).",
  "check_bool": "Check that computed value is true/false.",
  "check_longlong": "check that computed and expected values are equal (long int values)",
  "check_intmax_t": "Check that computed and expected values are equal (intmax_t values).",
  "check_uintmax_t": "Check that computed and expected values are equal (uintmax_t values).",
  "enable_test": "Return whether a test with flags EXCEPTIONS should be run.",
  "check_ulp": "Verify that our ulp () implementation is behaving as expected\n   or abort.",
  "libm_test_init": "Do all initialization for a test run with arguments given by ARGC\n   and ARGV.",
  "libm_test_finish": "Process the test results, returning the exit status.",
  "feenv_nomask_test": "Test that program aborts with no masked interrupts",
  "feenv_mask_test": "Test that program doesn't abort with default environment",
  "feexcp_nomask_test": "Test that program aborts with no masked interrupts",
  "feexcp_mask_test": "Test that program doesn't abort with exception.",
  "feenable_test": "Tests for feenableexcept/fedisableexcept/fegetexcept.",
  "initial_tests": "IEC 559 and ISO C99 define a default startup environment",
  "feraiseexcept_exact": "Like feraiseexcept, but raise exactly the specified exceptions EXC,\n   without possibly raising \"inexact\" together with \"overflow\" or\n   \"underflow\" as permitted by ISO C.  (This is not used with traps\n   enabled, so side-effects from raising and then clearing \"inexact\"\n   are irrelevant.)",
  "test_fma_1": "Testing all arguments of fma would be just too expensive,\n   so test just some.",
  "__acos": "wrapper acos",
  "__acosf": "wrapper acosf",
  "__acosh": "wrapper acosh",
  "__acoshf": "wrapper acoshf",
  "__acoshl": "wrapper acosl",
  "__acosl": "wrapper acosl",
  "__asin": "wrapper asin",
  "__asinf": "wrapper asinf",
  "__asinl": "wrapper asinl",
  "__atanh": "wrapper atanh",
  "__atanhf": "wrapper atanhf",
  "__atanhl": "wrapper atanhl",
  "__exp_compat": "wrapper exp",
  "__expf_compat": "wrapper expf",
  "__fmod_compat": "wrapper fmod",
  "__fmod_compatf": "wrapper fmodf",
  "__fmodl": "wrapper fmodl",
  "__j0": "wrapper j0",
  "__y0": "wrapper y0",
  "__j0f": "wrapper j0f",
  "__y0f": "wrapper y0f",
  "__j0l": "wrapper j0l",
  "__y0l": "wrapper y0l",
  "__j1": "wrapper j1",
  "__y1": "wrapper y1",
  "__j1f": "wrapper j1f",
  "__y1f": "wrapper y1f",
  "__j1l": "wrapper j1l",
  "__y1l": "wrapper y1l",
  "__jn": "wrapper jn",
  "__yn": "wrapper yn",
  "__jnf": "wrapper jnf",
  "__ynf": "wrapper ynf",
  "__log10": "wrapper log10(x)",
  "__log10f": "wrapper log10f(x)",
  "__log10l": "wrapper log10l(x)",
  "__log2_compat": "wrapper log2(x)",
  "__log2f_compat": "wrapper log2f(x)",
  "__log2l": "wrapper log2l(x)",
  "__log_compat": "wrapper log(x)",
  "__logf_compat": "wrapper logf(x)",
  "__logl": "wrapper logl(x)",
  "__pow_compat": "wrapper pow",
  "__powf_compat": "wrapper powf",
  "__powl": "wrapper powl",
  "__remainder": "wrapper remainder",
  "__remainderf": "wrapper remainderf",
  "__remainderl": "wrapper remainderl",
  "__scalb": "Wrapper scalb",
  "__scalbf": "Wrapper scalbf",
  "__scalbl": "Wrapper scalbl",
  "__sqrt": "wrapper sqrt",
  "__sqrtf": "wrapper sqrtf",
  "__sqrtl": "wrapper sqrtl",
  "acct": "Turn accounting on if NAME is an existing file.  The system will then write\n   a record for each process as it terminates, to this file.  If NAME is NULL,\n   turn accounting off.  This call is restricted to the super-user.",
  "__atomic_wide_counter_fetch_add_relaxed": "Values we add or xor are less than or equal to 1<<31, so we only\n   have to make overflow-and-addition atomic wrt. to concurrent load\n   operations and xor operations.  To do that, we split each counter\n   into two 32b values of which we reserve the MSB of each to\n   represent an overflow from the lower-order half to the higher-order\n   half.\n\n   In the common case, the state is (higher-order / lower-order half, and . is\n   basically concatenation of the bits):\n   0.h     / 0.l  = h.l\n\n   When we add a value of x that overflows (i.e., 0.l + x == 1.L), we run the\n   following steps S1-S4 (the values these represent are on the right-hand\n   side):\n   S1:  0.h     / 1.L == (h+1).L\n   S2:  1.(h+1) / 1.L == (h+1).L\n   S3:  1.(h+1) / 0.L == (h+1).L\n   S4:  0.(h+1) / 0.L == (h+1).L\n   If the LSB of the higher-order half is set, readers will ignore the\n   overflow bit in the lower-order half.\n\n   To get an atomic snapshot in load operations, we exploit that the\n   higher-order half is monotonically increasing; if we load a value V from\n   it, then read the lower-order half, and then read the higher-order half\n   again and see the same value V, we know that both halves have existed in\n   the sequence of values the full counter had.  This is similar to the\n   validated reads in the time-based STMs in GCC's libitm (e.g.,\n   method_ml_wt).\n\n   One benefit of this scheme is that this makes load operations\n   obstruction-free because unlike if we would just lock the counter, readers\n   can almost always interpret a snapshot of each halves.  Readers can be\n   forced to read a new snapshot when the read is concurrent with an overflow.\n   However, overflows will happen infrequently, so load operations are\n   practically lock-free.",
  "__brk": "Old braindamage in GCC's crtstuff.c requires this symbol in an attempt\n   to work around different old braindamage in the old Linux ELF dynamic\n   linker.",
  "chflags": "XXX shouldn't this be __chflags?",
  "chroot": "Make PATH be the root directory (the starting point for absolute\n   paths).  Note that while on traditional UNIX systems this call is\n   restricted to the super-user, it isn't on the Hurd.",
  "is_open": "Return non-zero if FD is open.",
  "__error_internal": "Print the program name and error message MESSAGE, which is a printf-style\n   format string with optional args.\n   If ERRNUM is nonzero, print its corresponding system error message.\n   Exit with status STATUS if it is nonzero.",
  "fchflags": "XXX should be __fchflags?",
  "fdatasync": "Synchronize at least the data part of a file with the underlying\n   media.",
  "__libc_fstab_freemem": "Make sure the memory is freed if the programs ends while in\n   memory-debugging mode and something actually was allocated.",
  "fsync": "Make all changes done to FD actually appear on disk.",
  "__ftruncate": "Truncate the file FD refers to LENGTH bytes.",
  "__ftruncate64": "Truncate the file referenced by FD to LENGTH bytes.",
  "futimesat": "Change the access time of FILE relative to FD to TVP[0] and\n   the modification time of FILE to TVP[1].",
  "__getclktck": "Return frequency of times().",
  "getdomainname": "Put the name of the current NIS domain in no more than LEN bytes of NAME.\n   The result is null-terminated if LEN is large enough for the full\n   name and the terminator.",
  "__getdtablesize": "Return the maximum number of file descriptors\n   the current process could possibly have.",
  "__getpagesize": "Return the system page size.",
  "__get_nprocs_conf": "Return the number of processors configured on the system.",
  "__get_phys_pages": "Return the number of pages of total/available physical memory in\n   the system.  This used to be done by parsing /proc/meminfo, but\n   that's unnecessarily expensive (and /proc is not always available).\n   The sysinfo syscall provides the same information, and has been\n   available at least since kernel 2.3.48.",
  "skip": "* Skip over the current field, removing quotes, and return a pointer to\n * the next field.",
  "getusershell": "* Get a list of shells from _PATH_SHELLS, if it exists.",
  "gtty": "Fill in *PARAMS with terminal parameters associated with FD.",
  "hsearch": "Define the non-reentrant function using the reentrant counterparts.",
  "isprime": "For the used double hash method the table size has to be a prime. To\n   correct the user given table size we need a prime test.  This trivial\n   algorithm is adequate because\n   a)  the code is (most probably) called a few times per program run and\n   b)  the number is small because the table must fit in the core",
  "__hcreate_r": "Before using the hash table we must allocate memory for it.\n   Test for an existing table are done. We allocate one element\n   more as the found prime number says. This is done for more effective\n   indexing as explained in the comment for the hsearch function.\n   The contents of the table is zeroed, especially the field used\n   becomes zero.",
  "insque": "Insert ELEM into a doubly-linked list, after PREV.",
  "remque": "Unlink ELEM from the doubly-linked list that it is in.",
  "__madvise": "Advise the system about particular usage patterns the program follows\n   for the region starting at ADDR and extending LEN bytes.",
  "mkdtemp": "Generate a unique temporary directory from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.\n   The directory is created, mode 700, and its name is returned.\n   (This function comes from OpenBSD.)",
  "mkostemp": "Generate a unique temporary file name from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.\n   Then open the file and return a fd.",
  "mkostemp64": "Generate a unique temporary file name from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.\n   Then open the file and return a fd.",
  "mkostemps": "Generate a unique temporary file name from TEMPLATE.  The last six\n   characters before a suffix of length SUFFIXLEN of TEMPLATE must be\n   \"XXXXXX\"; they are replaced with a string that makes the filename\n   unique.  Then open the file and return a fd.",
  "mkostemps64": "Generate a unique temporary file name from TEMPLATE.  The last six\n   characters before a suffix of length SUFFIXLEN of TEMPLATE must be\n   \"XXXXXX\"; they are replaced with a string that makes the filename\n   unique.  Then open the file and return a fd.",
  "mkstemp": "Generate a unique temporary file name from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.\n   Then open the file and return a fd.",
  "mkstemp64": "Generate a unique temporary file name from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.\n   Then open the file and return a fd.",
  "mkstemps": "Generate a unique temporary file name from TEMPLATE.  The last six\n   characters before a suffix of length SUFFIXLEN of TEMPLATE must be\n   \"XXXXXX\"; they are replaced with a string that makes the filename\n   unique.  Then open the file and return a fd.",
  "mkstemps64": "Generate a unique temporary file name from TEMPLATE.  The last six\n   characters before a suffix of length SUFFIXLEN of TEMPLATE must be\n   \"XXXXXX\"; they are replaced with a string that makes the filename\n   unique.  Then open the file and return a fd.",
  "__mktemp": "Generate a unique temporary file name from TEMPLATE.\n   The last six characters of TEMPLATE must be \"XXXXXX\";\n   they are replaced with a string that makes the filename unique.",
  "mlock": "Guarantee all whole pages mapped by the range [ADDR,ADDR+LEN) to\n   be memory resident.",
  "mlockall": "Cause all currently mapped pages of the process to be memory resident\n   until unlocked by a call to the `munlockall', until the process exits,\n   or until the process calls `execve'.",
  "__setmntent": "Prepare to begin reading and/or writing mount table entries from the\n   beginning of FILE.  MODE is as for `fopen'.",
  "__getmntent_r": "Read one mount table entry from STREAM.  Returns a pointer to storage\n   reused on the next call, or null for EOF or error (use feof/ferror to\n   check).",
  "__addmntent": "Write the mount table entry described by MNT to STREAM.\n   Return zero on success, nonzero on failure.",
  "__hasmntopt": "Search MNT->mnt_opts for an option matching OPT.\n   Returns the address of the substring, or null if none found.",
  "__mprotect": "Change the memory protection of the region starting at ADDR and\n   extending LEN bytes to PROT.  Returns 0 if successful, -1 for errors\n   (and sets errno).",
  "munlock": "Undo the effects on these whole pages of any prior mlock calls.",
  "munlockall": "Undo the effects of all prior mlock calls in this process.",
  "__munmap": "Deallocate any mapping for the region starting at ADDR and extending LEN\n   bytes.  Returns 0 if successful, -1 for errors (and sets errno).",
  "reboot": "Call kernel with additional two arguments the syscall requires.",
  "__remap_file_pages": "Remap arbitrary pages of a shared backing store within an existing\n   VMA.",
  "__sbrk": "Extend the process's data space by INCREMENT.\n   If INCREMENT is negative, shrink data space by - INCREMENT.\n   Return the address of the start of the new data space, or -1 for errors.",
  "setdomainname": "Set the name of the current YP domain to NAME, which is LEN bytes long.\n   This call is restricted to the super-user.",
  "sethostname": "XXX should be __sethostname ?",
  "stty": "Set the terminal parameters associated with FD to *PARAMS.",
  "swapoff": "Stop using block special device PATH for swapping.",
  "swapon": "Make the block special device PATH available to the system for swapping.\n   This call is restricted to the super-user.",
  "sync": "Make all changes done to all files actually appear on disk.",
  "__syslog": "* syslog, vsyslog --\n *\tprint message on log file; output is intended for syslogd(8).",
  "setlogmask": "setlogmask -- set the log mask level",
  "__truncate": "Truncate PATH to LENGTH bytes.",
  "truncate64": "Truncate PATH to LENGTH bytes.",
  "maybe_split_for_insert": "Possibly \"split\" a node with two red successors, and/or fix up two red\n   edges in a row.  ROOTP is a pointer to the lowest node we visited, PARENTP\n   and GPARENTP pointers to its parent/grandparent.  P_R and GP_R contain the\n   comparison values that determined which way was taken in the tree to reach\n   ROOTP.  MODE is 1 if we need not do the split, but must check for two red\n   edges between GPARENTP and ROOTP.",
  "__tsearch": "Find or insert datum into search tree.\n   KEY is the key to be located, ROOTP is the address of tree root,\n   COMPAR the ordering function.",
  "__twalk": "Walk the nodes of a tree.\n   ROOT is the root of the tree to be walked, ACTION the function to be\n   called at each node.",
  "allocate_string": "Allocate a new string.",
  "allocate_not_called": "Allocation and deallocation functions which are not expected to be\n   called.",
  "allocate_return_null": "An allocation function which returns NULL and records that it has\n   been called.",
  "fake_race_allocate": "To obtain unique addresses.",
  "fake_race_allocate_for_free": "Similar to fake_race_allocate, but expects to be paired with free\n   as the deallocation function.",
  "special": "Thinking in noninternationalized US-ASCII (per the DNS spec), is\n   this character special (\"in need of quoting\")?",
  "check_ranges": "Check various ranges constructed around powers.",
  "check_open": "Check that it is actually possible to use a the constructed\n   name.",
  "outside_chroot": "Initial test is run outside a chroot, to increase the likelihood of\n   success.",
  "do_test_split_combine": "Confirm that makedev (major (d), minor (d)) == d.",
  "do_test_combine_split": "Confirm that major (makedev (maj, min)) == maj and\n   minor (makedev (maj, min)) == min.",
  "cmp_fn": "Compare two keys.",
  "memfry": "Permute an array of integers.",
  "mangle_tree": "Perform an operation on a tree.",
  "one_test": "Performs one send/receive test.",
  "ualarm": "Set an alarm to go off (generating a SIGALRM signal) in VALUE microseconds.\n   If INTERVAL is nonzero, when the alarm goes off, the timer is reset to go\n   off every INTERVAL microseconds thereafter.\n\n   Returns the number of microseconds remaining before the alarm.",
  "vhangup": "Revoke access permissions to all processes currently communicating\n   with the control terminal, and then send a SIGHUP signal to the process\n   group of the control terminal.",
  "__do_niscall3": "__nisbind_connect (dbp) must be run before calling this function !\n   So we could use the same binding twice",
  "first_shoot": "We try to query the current server for the searched object,\n   maybe he know about it ?",
  "searchXYX": "** Some functions for parsing the -D param and NIS_DEFAULTS Environ",
  "__nis_default_access": "Default access rights are ----rmcdr---r---, but we could change\n   this with the NIS_DEFAULTS variable.",
  "__pmap_getnisport": "* Find the mapped port for program,version.\n * Calls the pmap service remotely to do the lookup.\n * Returns 0 if no map exists.",
  "internal_ismember": "internal_nis_ismember ()\n   return codes: -1 principal is in -group\n                  0 principal isn't in any group\n\t\t  1 pirncipal is in group",
  "xdr_obj_p": "The following functions have prototypes in nis_callback.h.  So\n   we make them public",
  "do_ypcall_tr": "Like do_ypcall, but translate the status value if necessary.",
  "get_cached_stack": "Get a stack frame from the cache.  We have to match by size since\n   some blocks might be too small or far too large.",
  "setup_stack_prot": "Based on stack allocated with PROT_NONE, setup the required portions with\n   'prot' flags based on the guard page position.",
  "advise_stack_range": "Mark the memory of the stack as usable to the kernel.  It frees everything\n   except for the space used for the TCB itself.",
  "allocate_stack": "Returns a usable stack for a new thread either by allocating a\n   new stack or reusing a cached stack of sufficient size.\n   ATTR must be non-NULL and point to a valid pthread_attr.\n   PDP must be non-NULL.",
  "name_stack_maps": "Add or remove an associated name to the PD VMA stack.",
  "__futex_abstimed_wait_common64": "! __ASSUME_TIME64_SYSCALLS",
  "__nptl_deallocate_tsd": "Deallocate POSIX thread-local-storage.",
  "setxid_error": "Check for consistency across set*id system call results.  The abort\n   should not happen as long as all privileges changes happen through\n   the glibc wrappers.  ERROR must be 0 (no error) or an errno\n   code.",
  "__nptl_setxid_sighandler": "We use the SIGSETXID signal in the setuid, setgid, etc. implementations to\n   tell each thread to call the respective setxid syscall on itself.  This is\n   the handler.",
  "start_threads": "Start all the threads we want.  The initial process is thread no. 1.",
  "clock_gettime": "Get current value of CLOCK and store it in TP.",
  "___pthread_barrier_wait": "Wait on the barrier.\n\n   In each round, we wait for a fixed number of threads to enter the barrier\n   (COUNT).  Once that has happened, exactly these threads are allowed to\n   leave the barrier.  Note that POSIX does not require that only COUNT\n   threads can attempt to block using the barrier concurrently.\n\n   We count the number of threads that have entered (IN).  Each thread\n   increments IN when entering, thus getting a position in the sequence of\n   threads that are or have been waiting (starting with 1, so the position\n   is the number of threads that have entered so far including the current\n   thread).\n   CURRENT_ROUND designates the most recent thread whose round has been\n   detected as complete.  When a thread detects that enough threads have\n   entered to make a round complete, it finishes this round by effectively\n   adding COUNT to CURRENT_ROUND atomically.  Threads that believe that their\n   round is not complete yet wait until CURRENT_ROUND is not smaller than\n   their position anymore.\n\n   A barrier can be destroyed as soon as no threads are blocked on the\n   barrier.  This is already the case if just one thread from the last round\n   has stopped waiting and returned to the caller; the assumption is that\n   all threads from the round are unblocked atomically, even though they may\n   return at different times from the respective calls to\n   pthread_barrier_wait).  Thus, a valid call to pthread_barrier_destroy can\n   be concurrent with other threads still figuring out that their round has\n   been completed.  Therefore, threads need to confirm that they have left\n   the barrier by incrementing OUT, and pthread_barrier_destroy needs to wait\n   until OUT equals IN.\n\n   To avoid an ABA issue for futex_wait on CURRENT_ROUND and for archs with\n   32b-only atomics, we additionally reset the barrier when IN reaches\n   a threshold to avoid overflow.  We assume that the total number of threads\n   is less than UINT_MAX/2, and set the threshold accordingly so that we can\n   use a simple atomic_fetch_add on IN instead of a CAS when entering.  The\n   threshold is always set to the end of a round, so all threads that have\n   entered are either pre-reset threads or post-reset threads (i.e., have a\n   position larger than the threshold).\n   Pre-reset threads just run the algorithm explained above.  Post-reset\n   threads wait until IN is reset to a pre-threshold value.\n   When the last pre-reset thread leaves the barrier (i.e., OUT equals the\n   threshold), it resets the barrier to its initial state.  Other (post-reset)\n   threads wait for the reset to have finished by waiting until IN is less\n   than the threshold and then restart by trying to enter the barrier again.\n\n   We reuse the reset mechanism in pthread_barrier_destroy to get notified\n   when all threads have left the barrier: We trigger an artificial reset and\n   wait for the last pre-reset thread to finish reset, thus notifying the\n   thread that is about to destroy the barrier.\n\n   Blocking using futexes is straightforward: pre-reset threads wait for\n   completion of their round using CURRENT_ROUND as futex word, and post-reset\n   threads and pthread_barrier_destroy use IN as futex word.\n\n   Further notes:\n   * It is not simple to let some of the post-reset threads help with the\n     reset because of the ABA issues that arise; therefore, we simply make\n     the last thread to leave responsible for the reset.\n   * POSIX leaves it unspecified whether a signal handler running in a thread\n     that has been unblocked (because its round is complete) can stall all\n     other threads and prevent them from returning from the barrier.  In this\n     implementation, other threads will return.  However,\n     pthread_barrier_destroy will of course wait for the signal handler thread\n     to confirm that it left the barrier.\n\n   TODO We should add spinning with back-off.  Once we do that, we could also\n   try to avoid the futex_wake syscall when a round is detected as finished.\n   If we do not spin, it is quite likely that at least some other threads will\n   have called futex_wait already.",
  "sigcancel_handler": "For asynchronous cancellation we use a signal.",
  "___pthread_cond_broadcast": "We do the following steps from __pthread_cond_signal in one critical\n   section: (1) signal all waiters in G1, (2) close G1 so that it can become\n   the new G2 and make G2 the new G1, and (3) signal all waiters in the new\n   G1.  We don't need to do all these steps if there are no waiters in G1\n   and/or G2.  See __pthread_cond_signal for further details.",
  "__condvar_fetch_xor_wseq_release": "The xor operation needs to be an atomic read-modify-write.  The write\n   itself is not an issue as it affects just the lower-order half but not bits\n   used in the add operation.  To make the full fetch-and-xor atomic, we\n   exploit that concurrently, the value can increase by at most 1<<31 (*): The\n   xor operation is only called while having acquired the lock, so not more\n   than __PTHREAD_COND_MAX_GROUP_SIZE waiters can enter concurrently and thus\n   increment __wseq.  Therefore, if the xor operation observes a value of\n   __wseq, then the value it applies the modification to later on can be\n   derived.",
  "__condvar_acquire_lock": "The lock that signalers use.  See pthread_cond_wait_common for uses.\n   The lock is our normal three-state lock: not acquired (0) / acquired (1) /\n   acquired-with-futex_wake-request (2).  However, we need to preserve the\n   other bits in the unsigned int used for the lock, and therefore it is a\n   little more complex.",
  "__condvar_release_lock": "See __condvar_acquire_lock.",
  "__condvar_get_orig_size": "Only use this when having acquired the lock.",
  "__condvar_set_orig_size": "Only use this when having acquired the lock.",
  "__condvar_get_private": "Returns FUTEX_SHARED or FUTEX_PRIVATE based on the provided __wrefs\n   value.",
  "__condvar_quiesce_and_switch_g1": "This closes G1 (whose index is in G1INDEX), waits for all futex waiters to\n   leave G1, converts G1 into a fresh G2, and then switches group roles so that\n   the former G2 becomes the new G1 ending at the current __wseq value when we\n   eventually make the switch (WSEQ is just an observation of __wseq by the\n   signaler).\n   If G2 is empty, it will not switch groups because then it would create an\n   empty G1 which would require switching groups again on the next signal.\n   Returns false iff groups were not switched because G2 was empty.",
  "___pthread_cond_signal": "See __pthread_cond_wait for a high-level description of the algorithm.",
  "__condvar_confirm_wakeup": "Decrease the waiter reference count.",
  "__condvar_cancel_waiting": "Cancel waiting after having registered as a waiter previously.  SEQ is our\n   position and G is our group index.\n   The goal of cancellation is to make our group smaller if that is still\n   possible.  If we are in a closed group, this is not possible anymore; in\n   this case, we need to send a replacement signal for the one we effectively\n   consumed because the signal should have gotten consumed by another waiter\n   instead; we must not both cancel waiting and consume a signal.\n\n   Must not be called while still holding a reference on the group.\n\n   Returns true iff we consumed a signal.\n\n   On some kind of timeouts, we may be able to pretend that a signal we\n   effectively consumed happened before the timeout (i.e., similarly to first\n   spinning on signals before actually checking whether the timeout has\n   passed already).  Doing this would allow us to skip sending a replacement\n   signal, but this case might happen rarely because the end of the timeout\n   must race with someone else sending a signal.  Therefore, we don't bother\n   trying to optimize this.",
  "__condvar_dec_grefs": "Wake up any signalers that might be waiting.",
  "__condvar_cleanup_waiting": "Clean-up for cancellation of waiters waiting for normal signals.  We cancel\n   our registration as a waiter, confirm we have woken up, and re-acquire the\n   mutex.",
  "__pthread_cond_wait_common": "This condvar implementation guarantees that all calls to signal and\n   broadcast and all of the three virtually atomic parts of each call to wait\n   (i.e., (1) releasing the mutex and blocking, (2) unblocking, and (3) re-\n   acquiring the mutex) happen in some total order that is consistent with the\n   happens-before relations in the calling program.  However, this order does\n   not necessarily result in additional happens-before relations being\n   established (which aligns well with spurious wake-ups being allowed).\n\n   All waiters acquire a certain position in a 64b waiter sequence (__wseq).\n   This sequence determines which waiters are allowed to consume signals.\n   A broadcast is equal to sending as many signals as are unblocked waiters.\n   When a signal arrives, it samples the current value of __wseq with a\n   relaxed-MO load (i.e., the position the next waiter would get).  (This is\n   sufficient because it is consistent with happens-before; the caller can\n   enforce stronger ordering constraints by calling signal while holding the\n   mutex.)  Only waiters with a position less than the __wseq value observed\n   by the signal are eligible to consume this signal.\n\n   This would be straight-forward to implement if waiters would just spin but\n   we need to let them block using futexes.  Futexes give no guarantee of\n   waking in FIFO order, so we cannot reliably wake eligible waiters if we\n   just use a single futex.  Also, futex words are 32b in size, but we need\n   to distinguish more than 1<<32 states because we need to represent the\n   order of wake-up (and thus which waiters are eligible to consume signals);\n   blocking in a futex is not atomic with a waiter determining its position in\n   the waiter sequence, so we need the futex word to reliably notify waiters\n   that they should not attempt to block anymore because they have been\n   already signaled in the meantime.  While an ABA issue on a 32b value will\n   be rare, ignoring it when we are aware of it is not the right thing to do\n   either.\n\n   Therefore, we use a 64b counter to represent the waiter sequence (on\n   architectures which only support 32b atomics, we use a few bits less).\n   To deal with the blocking using futexes, we maintain two groups of waiters:\n   * Group G1 consists of waiters that are all eligible to consume signals;\n     incoming signals will always signal waiters in this group until all\n     waiters in G1 have been signaled.\n   * Group G2 consists of waiters that arrive when a G1 is present and still\n     contains waiters that have not been signaled.  When all waiters in G1\n     are signaled and a new signal arrives, the new signal will convert G2\n     into the new G1 and create a new G2 for future waiters.\n\n   We cannot allocate new memory because of process-shared condvars, so we\n   have just two slots of groups that change their role between G1 and G2.\n   Each has a separate futex word, a number of signals available for\n   consumption, a size (number of waiters in the group that have not been\n   signaled), and a reference count.\n\n   The group reference count is used to maintain the number of waiters that\n   are using the group's futex.  Before a group can change its role, the\n   reference count must show that no waiters are using the futex anymore; this\n   prevents ABA issues on the futex word.\n\n   To represent which intervals in the waiter sequence the groups cover (and\n   thus also which group slot contains G1 or G2), we use a 64b counter to\n   designate the start position of G1 (inclusive), and a single bit in the\n   waiter sequence counter to represent which group slot currently contains\n   G2.  This allows us to switch group roles atomically wrt. waiters obtaining\n   a position in the waiter sequence.  The G1 start position allows waiters to\n   figure out whether they are in a group that has already been completely\n   signaled (i.e., if the current G1 starts at a later position that the\n   waiter's position).  Waiters cannot determine whether they are currently\n   in G2 or G1 -- but they do not have too because all they are interested in\n   is whether there are available signals, and they always start in G2 (whose\n   group slot they know because of the bit in the waiter sequence.  Signalers\n   will simply fill the right group until it is completely signaled and can\n   be closed (they do not switch group roles until they really have to to\n   decrease the likelihood of having to wait for waiters still holding a\n   reference on the now-closed G1).\n\n   Signalers maintain the initial size of G1 to be able to determine where\n   G2 starts (G2 is always open-ended until it becomes G1).  They track the\n   remaining size of a group; when waiters cancel waiting (due to PThreads\n   cancellation or timeouts), they will decrease this remaining size as well.\n\n   To implement condvar destruction requirements (i.e., that\n   pthread_cond_destroy can be called as soon as all waiters have been\n   signaled), waiters increment a reference count before starting to wait and\n   decrement it after they stopped waiting but right before they acquire the\n   mutex associated with the condvar.\n\n   pthread_cond_t thus consists of the following (bits that are used for\n   flags and are not part of the primary value of each field but necessary\n   to make some things atomic or because there was no space for them\n   elsewhere in the data structure):\n\n   __wseq: Waiter sequence counter\n     * LSB is index of current G2.\n     * Waiters fetch-add while having acquire the mutex associated with the\n       condvar.  Signalers load it and fetch-xor it concurrently.\n   __g1_start: Starting position of G1 (inclusive)\n     * LSB is index of current G2.\n     * Modified by signalers while having acquired the condvar-internal lock\n       and observed concurrently by waiters.\n   __g1_orig_size: Initial size of G1\n     * The two least-significant bits represent the condvar-internal lock.\n     * Only accessed while having acquired the condvar-internal lock.\n   __wrefs: Waiter reference counter.\n     * Bit 2 is true if waiters should run futex_wake when they remove the\n       last reference.  pthread_cond_destroy uses this as futex word.\n     * Bit 1 is the clock ID (0 == CLOCK_REALTIME, 1 == CLOCK_MONOTONIC).\n     * Bit 0 is true iff this is a process-shared condvar.\n     * Simple reference count used by both waiters and pthread_cond_destroy.\n     (If the format of __wrefs is changed, update nptl_lock_constants.pysym\n      and the pretty printers.)\n   For each of the two groups, we have:\n   __g_refs: Futex waiter reference count.\n     * LSB is true if waiters should run futex_wake when they remove the\n       last reference.\n     * Reference count used by waiters concurrently with signalers that have\n       acquired the condvar-internal lock.\n   __g_signals: The number of signals that can still be consumed.\n     * Used as a futex word by waiters.  Used concurrently by waiters and\n       signalers.\n     * LSB is true iff this group has been completely signaled (i.e., it is\n       closed).\n   __g_size: Waiters remaining in this group (i.e., which have not been\n     signaled yet.\n     * Accessed by signalers and waiters that cancel waiting (both do so only\n       when having acquired the condvar-internal lock.\n     * The size of G2 is always zero because it cannot be determined until\n       the group becomes G1.\n     * Although this is of unsigned type, we rely on using unsigned overflow\n       rules to make this hold effectively negative values too (in\n       particular, when waiters in G2 cancel waiting).\n\n   A PTHREAD_COND_INITIALIZER condvar has all fields set to zero, which yields\n   a condvar that has G2 starting at position 0 and a G1 that is closed.\n\n   Because waiters do not claim ownership of a group right when obtaining a\n   position in __wseq but only reference count the group when using futexes\n   to block, it can happen that a group gets closed before a waiter can\n   increment the reference count.  Therefore, waiters have to check whether\n   their group is already closed using __g1_start.  They also have to perform\n   this check when spinning when trying to grab a signal from __g_signals.\n   Note that for these checks, using relaxed MO to load __g1_start is\n   sufficient because if a waiter can see a sufficiently large value, it could\n   have also consume a signal in the waiters group.\n\n   Waiters try to grab a signal from __g_signals without holding a reference\n   count, which can lead to stealing a signal from a more recent group after\n   their own group was already closed.  They cannot always detect whether they\n   in fact did because they do not know when they stole, but they can\n   conservatively add a signal back to the group they stole from; if they\n   did so unnecessarily, all that happens is a spurious wake-up.  To make this\n   even less likely, __g1_start contains the index of the current g2 too,\n   which allows waiters to check if there aliasing on the group slots; if\n   there wasn't, they didn't steal from the current G1, which means that the\n   G1 they stole from must have been already closed and they do not need to\n   fix anything.\n\n   It is essential that the last field in pthread_cond_t is __g_signals[1]:\n   The previous condvar used a pointer-sized field in pthread_cond_t, so a\n   PTHREAD_COND_INITIALIZER from that condvar implementation might only\n   initialize 4 bytes to zero instead of the 8 bytes we need (i.e., 44 bytes\n   in total instead of the 48 we need).  __g_signals[1] is not accessed before\n   the first group switch (G2 starts at index 0), which will set its value to\n   zero after a harmless fetch-or whose return value is ignored.  This\n   effectively completes initialization.\n\n\n   Limitations:\n   * This condvar isn't designed to allow for more than\n     __PTHREAD_COND_MAX_GROUP_SIZE * (1 << 31) calls to __pthread_cond_wait.\n   * More than __PTHREAD_COND_MAX_GROUP_SIZE concurrent waiters are not\n     supported.\n   * Beyond what is allowed as errors by POSIX or documented, we can also\n     return the following errors:\n     * EPERM if MUTEX is a recursive mutex and the caller doesn't own it.\n     * EOWNERDEAD or ENOTRECOVERABLE when using robust mutexes.  Unlike\n       for other errors, this can happen when we re-acquire the mutex; this\n       isn't allowed by POSIX (which requires all errors to virtually happen\n       before we release the mutex or change the condvar state), but there's\n       nothing we can do really.\n     * When using PTHREAD_MUTEX_PP_* mutexes, we can also return all errors\n       returned by __pthread_tpp_change_priority.  We will already have\n       released the mutex in such cases, so the caller cannot expect to own\n       MUTEX.\n\n   Other notes:\n   * Instead of the normal mutex unlock / lock functions, we use\n     __pthread_mutex_unlock_usercnt(m, 0) / __pthread_mutex_cond_lock(m)\n     because those will not change the mutex-internal users count, so that it\n     can be detected when a condvar is still associated with a particular\n     mutex because there is a waiter blocked on this condvar using this mutex.",
  "___pthread_cond_wait": "See __pthread_cond_wait_common.",
  "___pthread_cond_timedwait64": "See __pthread_cond_wait_common.",
  "___pthread_cond_clockwait64": "See __pthread_cond_wait_common.",
  "late_init": "This performs the initialization necessary when going from\n   single-threaded to multi-threaded mode for the first time.",
  "start_thread": "Local function to start thread and handle cleanup.",
  "report_thread_creation": "Return true iff obliged to report TD_CREATE events.",
  "__pthread_equal": "Return true if __T1 and __T2 both name the same thread.  Otherwise,\n   false.",
  "__pthread_kill_implementation": "Sends SIGNO to THREADID.  If the thread is about to exit or has\n   already exited on the kernel side, return NO_TID.  Otherwise return\n   0 or an error code.",
  "__pthread_kill_esrch": "Variant which returns ESRCH in the no-TID case, for backwards\n   compatibility.",
  "__pthread_kill_other_threads_np": "This function does not serve a useful purpose in the thread library\n   implementation anymore.  It used to be necessary when then kernel\n   could not shut down \"processes\" but this is not the case anymore.\n\n   We could theoretically provide an equivalent implementation but\n   this is not necessary since the kernel already does a much better\n   job than we ever could.",
  "lll_mutex_lock_optimized": "lll_lock with single-thread optimization.",
  "lll_mutex_unlock_optimized": "lll_lock with single-thread optimization.",
  "__pthread_once_slow": "This is similar to a lock implementation, but we distinguish between three\n   states: not yet initialized (0), initialization in progress\n   (__fork_generation | __PTHREAD_ONCE_INPROGRESS), and initialization\n   finished (__PTHREAD_ONCE_DONE); __fork_generation does not use the bits\n   that are used for __PTHREAD_ONCE_INPROGRESS and __PTHREAD_ONCE_DONE (which\n   is what __PTHREAD_ONCE_FORK_GEN_INCR is used for).  If in the first state,\n   threads will try to run the initialization by moving to the second state;\n   the first thread to do so via a CAS on once_control runs init_routine,\n   other threads block.\n   When forking the process, some threads can be interrupted during the second\n   state; they won't be present in the forked child, so we need to restart\n   initialization in the child.  To distinguish an in-progress initialization\n   from an interrupted initialization (in which case we need to reclaim the\n   lock), we look at the fork generation that's part of the second state: We\n   can reclaim iff it differs from the current fork generation.\n   XXX: This algorithm has an ABA issue on the fork generation: If an\n   initialization is interrupted, we then fork 2^30 times (30 bits of\n   once_control are used for the fork generation), and try to initialize\n   again, we can deadlock because we can't distinguish the in-progress and\n   interrupted cases anymore.\n   XXX: We split out this slow path because current compilers do not generate\n   as efficient code when the fast path in __pthread_once below is not in a\n   separate function.",
  "___pthread_rwlock_clockrdlock64": "See pthread_rwlock_common.c.",
  "___pthread_rwlock_clockwrlock64": "See pthread_rwlock_common.c.",
  "__pthread_rwlock_get_private": "A reader--writer lock that fulfills the POSIX requirements (but operations\n   on this lock are not necessarily full barriers, as one may interpret the\n   POSIX requirement about \"synchronizing memory\").  All critical sections are\n   in a total order, writers synchronize with prior writers and readers, and\n   readers synchronize with prior writers.\n\n   A thread is allowed to acquire a read lock recursively (i.e., have rdlock\n   critical sections that overlap in sequenced-before) unless the kind of the\n   rwlock is set to PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP.\n\n   This lock is built so that workloads of mostly readers can be executed with\n   low runtime overheads.  This matches that the default kind of the lock is\n   PTHREAD_RWLOCK_PREFER_READER_NP.  Acquiring a read lock requires a single\n   atomic addition if the lock is or was previously acquired by other\n   readers; releasing the lock is a single CAS if there are no concurrent\n   writers.\n   Workloads consisting of mostly writers are of secondary importance.\n   An uncontended write lock acquisition is as fast as for a normal\n   exclusive mutex but writer contention is somewhat more costly due to\n   keeping track of the exact number of writers.  If the rwlock kind requests\n   writers to be preferred (i.e., PTHREAD_RWLOCK_PREFER_WRITER_NP or the\n   no-recursive-readers variant of it), then writer--to--writer lock ownership\n   hand-over is fairly fast and bypasses lock acquisition attempts by readers.\n   The costs of lock ownership transfer between readers and writers vary.  If\n   the program asserts that there are no recursive readers and writers are\n   preferred, then write lock acquisition attempts will block subsequent read\n   lock acquisition attempts, so that new incoming readers do not prolong a\n   phase in which readers have acquired the lock.\n\n   The main components of the rwlock are a writer-only lock that allows only\n   one of the concurrent writers to be the primary writer, and a\n   single-writer-multiple-readers lock that decides between read phases, in\n   which readers have acquired the rwlock, and write phases in which a primary\n   writer or a sequence of different primary writers have acquired the rwlock.\n\n   The single-writer-multiple-readers lock is the central piece of state\n   describing the rwlock and is encoded in the __readers field (see below for\n   a detailed explanation):\n\n   State WP  WL  R   RW  Notes\n   ---------------------------\n   #1    0   0   0   0   Lock is idle (and in a read phase).\n   #2    0   0   >0  0   Readers have acquired the lock.\n   #3    0   1   0   0   Lock is not acquired; a writer will try to start a\n\t\t\t write phase.\n   #4    0   1   >0  0   Readers have acquired the lock; a writer is waiting\n\t\t\t and explicit hand-over to the writer is required.\n   #4a   0   1   >0  1   Same as #4 except that there are further readers\n\t\t\t waiting because the writer is to be preferred.\n   #5    1   0   0   0   Lock is idle (and in a write phase).\n   #6    1   0   >0  0   Write phase; readers will try to start a read phase\n\t\t\t (requires explicit hand-over to all readers that\n\t\t\t do not start the read phase).\n   #7    1   1   0   0   Lock is acquired by a writer.\n   #8    1   1   >0  0   Lock acquired by a writer and readers are waiting;\n\t\t\t explicit hand-over to the readers is required.\n\n   WP (PTHREAD_RWLOCK_WRPHASE) is true if the lock is in a write phase, so\n   potentially acquired by a primary writer.\n   WL (PTHREAD_RWLOCK_WRLOCKED) is true if there is a primary writer (i.e.,\n   the thread that was able to set this bit from false to true).\n   R (all bits in __readers except the number of least-significant bits\n   denoted in PTHREAD_RWLOCK_READER_SHIFT) is the number of readers that have\n   or are trying to acquired the lock.  There may be more readers waiting if\n   writers are preferred and there will be no recursive readers, in which\n   case RW (PTHREAD_RWLOCK_RWAITING) is true in state #4a.\n\n   We want to block using futexes but using __readers as a futex word directly\n   is not a good solution.  First, we want to wait on different conditions\n   such as waiting for a phase change vs. waiting for the primary writer to\n   release the writer-only lock.  Second, the number of readers could change\n   frequently, which would make it likely that a writer's futex_wait fails\n   frequently too because the expected value does not match the value of\n   __readers anymore.\n   Therefore, we split out the futex words into the __wrphase_futex and\n   __writers_futex fields.  The former tracks the value of the WP bit and is\n   changed after changing WP by the thread that changes WP.  However, because\n   of the POSIX requirements regarding mutex/rwlock destruction (i.e., that\n   destroying a rwlock is allowed as soon as no thread has acquired or will\n   acquire the lock), we have to be careful and hand over lock ownership (via\n   a phase change) carefully to those threads waiting.  Specifically, we must\n   prevent a situation in which we are not quite sure whether we still have\n   to unblock another thread through a change to memory (executing a\n   futex_wake on a former futex word that is now used for something else is\n   fine).\n   The scheme we use for __wrphase_futex is that waiting threads that may\n   use the futex word to block now all have to use the futex word to block; it\n   is not allowed to take the short-cut and spin-wait on __readers because\n   then the waking thread cannot just make one final change to memory to\n   unblock all potentially waiting threads.  If, for example, a reader\n   increments R in states #7 or #8, it has to then block until __wrphase_futex\n   is 0 and it can confirm that the value of 0 was stored by the primary\n   writer; in turn, the primary writer has to change to a read phase too when\n   releasing WL (i.e., to state #2), and it must change __wrphase_futex to 0\n   as the next step.  This ensures that the waiting reader will not be able to\n   acquire, release, and then destroy the lock concurrently with the pending\n   futex unblock operations by the former primary writer.  This scheme is\n   called explicit hand-over in what follows.\n   Note that waiting threads can cancel waiting only if explicit hand-over has\n   not yet started (e.g., if __readers is still in states #7 or #8 in the\n   example above).\n\n   Writers determine the primary writer through WL.  Blocking using futexes\n   is performed using __writers_futex as a futex word; primary writers will\n   enable waiting on this futex by setting it to 1 after they acquired the WL\n   bit and will disable waiting by setting it to 0 before they release WL.\n   This leaves small windows where blocking using futexes is not possible\n   although a primary writer exists, but in turn decreases complexity of the\n   writer--writer synchronization and does not affect correctness.\n   If writers are preferred, writers can hand over WL directly to other\n   waiting writers that registered by incrementing __writers:  If the primary\n   writer can CAS __writers from a non-zero value to the same value with the\n   PTHREAD_RWLOCK_WRHANDOVER bit set, it effectively transfers WL ownership\n   to one of the registered waiting writers and does not reset WL; in turn,\n   a registered writer that can clear PTHREAD_RWLOCK_WRHANDOVER using a CAS\n   then takes over WL.  Note that registered waiting writers can cancel\n   waiting by decrementing __writers, but the last writer to unregister must\n   become the primary writer if PTHREAD_RWLOCK_WRHANDOVER is set.\n   Also note that adding another state/bit to signal potential writer--writer\n   contention (e.g., as done in the normal mutex algorithm) would not be\n   helpful because we would have to conservatively assume that there is in\n   fact no other writer, and wake up readers too.\n\n   To avoid having to call futex_wake when no thread uses __wrphase_futex or\n   __writers_futex, threads will set the PTHREAD_RWLOCK_FUTEX_USED bit in the\n   respective futex words before waiting on it (using a CAS so it will only be\n   set if in a state in which waiting would be possible).  In the case of\n   __writers_futex, we wake only one thread but several threads may share\n   PTHREAD_RWLOCK_FUTEX_USED, so we must assume that there are still others.\n   This is similar to what we do in pthread_mutex_lock.  We do not need to\n   do this for __wrphase_futex because there, we always wake all waiting\n   threads.\n\n   Blocking in the state #4a simply uses __readers as futex word.  This\n   simplifies the algorithm but suffers from some of the drawbacks discussed\n   before, though not to the same extent because R can only decrease in this\n   state, so the number of potentially failing futex_wait attempts will be\n   bounded.  All threads moving from state #4a to another state must wake\n   up threads blocked on the __readers futex.\n\n   The ordering invariants that we have to take care of in the implementation\n   are primarily those necessary for a reader--writer lock; this is rather\n   straightforward and happens during write/read phase switching (potentially\n   through explicit hand-over), and between writers through synchronization\n   involving the PTHREAD_RWLOCK_WRLOCKED or PTHREAD_RWLOCK_WRHANDOVER bits.\n   Additionally, we need to take care that modifications of __writers_futex\n   and __wrphase_futex (e.g., by otherwise unordered readers) take place in\n   the writer critical sections or read/write phases, respectively, and that\n   explicit hand-over observes stores from the previous phase.  How this is\n   done is explained in more detail in comments in the code.\n\n   Many of the accesses to the futex words just need relaxed MO.  This is\n   possible because we essentially drive both the core rwlock synchronization\n   and the futex synchronization in parallel.  For example, an unlock will\n   unlock the rwlock and take part in the futex synchronization (using\n   PTHREAD_RWLOCK_FUTEX_USED, see above); even if they are not tightly\n   ordered in some way, the futex synchronization ensures that there are no\n   lost wake-ups, and woken threads will then eventually see the most recent\n   state of the rwlock.  IOW, waiting threads will always be woken up, while\n   not being able to wait using futexes (which can happen) is harmless; in\n   turn, this means that waiting threads don't need special ordering wrt.\n   waking threads.\n\n   The futex synchronization consists of the three-state futex word:\n   (1) cannot block on it, (2) can block on it, and (3) there might be a\n   thread blocked on it (i.e., with PTHREAD_RWLOCK_FUTEX_USED set).\n   Relaxed-MO atomic read-modify-write operations are sufficient to maintain\n   this (e.g., using a CAS to go from (2) to (3) but not from (1) to (3)),\n   but we need ordering of the futex word modifications by the waking threads\n   so that they collectively make correct state changes between (1)-(3).\n   The futex-internal synchronization (i.e., the conceptual critical sections\n   around futex operations in the kernel) then ensures that even an\n   unconstrained load (i.e., relaxed MO) inside of futex_wait will not lead to\n   lost wake-ups because either the waiting thread will see the change from\n   (3) to (1) when a futex_wake came first, or this futex_wake will wake this\n   waiting thread because the waiting thread came first.\n\n\n   POSIX allows but does not require rwlock acquisitions to be a cancellation\n   point.  We do not support cancellation.\n\n   TODO We do not try to elide any read or write lock acquisitions currently.\n   While this would be possible, it is unclear whether HTM performance is\n   currently predictable enough and our runtime tuning is good enough at\n   deciding when to use elision so that enabling it would lead to consistently\n   better performance.",
  "___pthread_rwlock_init": "See pthread_rwlock_common.c.",
  "___pthread_rwlock_rdlock": "See pthread_rwlock_common.c.",
  "___pthread_rwlock_timedrdlock64": "See pthread_rwlock_common.c.",
  "___pthread_rwlock_timedwrlock64": "See pthread_rwlock_common.c.",
  "___pthread_rwlock_tryrdlock": "See pthread_rwlock_common.c for an overview.",
  "___pthread_rwlock_trywrlock": "See pthread_rwlock_common.c for an overview.",
  "___pthread_rwlock_unlock": "See pthread_rwlock_common.c for an overview.",
  "___pthread_rwlock_wrlock": "See pthread_rwlock_common.c.",
  "__default_pthread_attr_freeres": "This is placed in the same file as pthread_setattr_default_np\n   because only this function can trigger allocation of attribute\n   data.  This way, the function is automatically defined for all the\n   cases when it is needed in static builds.",
  "__new_sem_post": "See sem_wait for an explanation of the algorithm.",
  "___sem_timedwait64": "This is in a separate file because because sem_timedwait is only provided\n   if __USE_XOPEN2K is defined.",
  "__new_sem_trywait": "Always assume the semaphore is shared.",
  "do_futex_wait": "Wait until at least one token is available, possibly with a timeout.\n   This is in a separate function in order to make sure gcc\n   puts the call site into an exception region, and thus the\n   cleanups get properly run.  TODO still necessary?  Other futex_wait\n   users don't seem to need it.",
  "__new_sem_wait_fast": "Fast path: Try to grab a token without blocking.",
  "__new_sem_wait_slow64": "Slow path that blocks.",
  "__sem_wait_32_finish": "Stop being a registered waiter (non-64b-atomics code only).",
  "test_status_destroyed": "Initializes MUTEX, then destroys it.",
  "condvar_reinit": "Destroys CONDVAR and re-initializes it using ATTR.",
  "test_setclock": "Tests setting the clock ID attribute.",
  "test_setpshared": "Tests setting whether the rwlock can be shared between processes.",
  "test_status_no_robust": "Tests locking of non-robust mutexes.",
  "test_status_robust": "Tests locking of robust mutexes.",
  "test_locking_state_robust": "Tests locking and state corruption of robust mutexes.  We'll mark it as\n   inconsistent, then not recoverable.",
  "test_recursive_locks": "Tests locking the mutex multiple times in a row.",
  "mutex_reinit": "Destroys MUTEX and re-initializes it using ATTR.",
  "test_settype": "Tests setting the mutex type.",
  "test_setrobust": "Tests setting whether the mutex is robust.",
  "test_setprotocol": "Tests setting the mutex protocol and, for Priority Protect, the Priority\n   Ceiling.",
  "test_locking_reader": "Tests locking the rwlock multiple times as a reader.",
  "test_locking_writer": "Tests locking the rwlock as a writer.",
  "rwlock_reinit": "Destroys RWLOCK and re-initializes it using ATTR.",
  "test_setkind_np": "Tests setting whether the rwlock prefers readers or writers.",
  "start_routine": "The purpose of this test is to test the setgroups API as root and in\n   the presence of threads.  Once we create a thread the setgroups\n   implementation must ensure that all threads are set to the same\n   group and this operation should not fail. Lastly we test setgroups\n   with a zero sized group and a bad address and verify we get EPERM.",
  "check_sigmask": "Report an error if ACTUAL_MASK does not match EXPECTED_MASK.\n   CONTEXT is used in error messages.",
  "check_current_sigmask": "Report an error if the current thread signal mask does not match\n   EXPECTED_MASK.  CONTEXT is used in error messages.",
  "check_sigmask_thread_function": "Thread start routine which checks the current thread signal mask\n   against CLOSURE.",
  "check_sigmask_thread_function_c11": "Same for C11 threads.",
  "check_posix_thread": "Launch a POSIX thread with ATTR (which can be NULL) and check that\n   it has the expected signal mask.",
  "check_c11_thread": "Launch a C11 thread and check that it has the expected signal\n   mask.",
  "read_elf_header": "Reads the ELF header from PATH.  Returns true if the header can be\n   read, false if the file is too short.",
  "find_gdb": "Searches for \"gdb\" alongside the path variable.  See execvpe.",
  "write_gdbscript": "Writes the GDB script to run the test to PATH.",
  "debugger_inspection_point": "The test sets a breakpoint on this function and alters the\n   altered_by_debugger thread-local variable.",
  "subprocess_thread": "Thread function for the test thread in the subprocess.",
  "in_subprocess": "This function implements the subprocess under test.  It creates a\n   second thread, waiting for its value to change to 2, and checks\n   that the main thread also changed its value to 1.",
  "allocate_and_test": "Test that the page in which TARGET lies is accessible.  This will\n   segfault if the write fails.  This function has only half a page\n   of thread stack left and so should not do anything and immediately\n   return the address to which the stack reached.",
  "check_stack_top": "Verify that the stack size returned by pthread_getattr_np is usable when\n   the returned value is subject to rlimit.",
  "worker_timedlock": "Call pthread_mutex_timedlock()/pthread_mutex_unlock() repetitively, hoping\n   that one of them returns EAGAIN or EINTR unexpectedly.",
  "get_self_comm": "On Linux we can read this task's name from /proc.",
  "dtv_slotinfo_list": "Get the DTV slotinfo list head entry from the dynamic loader state\n   into *LISTHEAD.",
  "dtv_slotinfo": "Get the address of the DTV slotinfo entry for MODID into\n   *DTVSLOTINFO.",
  "td_thr_tlsbase": "Return in *BASE the base address of the TLS block for MODID within\n   TH.\n\n   It should return success and yield the correct pointer in any\n   circumstance where the TLS block for the module and thread\n   requested has already been initialized.\n\n   It should fail with TD_TLSDEFER only when the thread could not\n   possibly have observed any values in that TLS block.  That way, the\n   debugger can fall back to showing initial values from the PT_TLS\n   segment (and refusing attempts to mutate) for the TD_TLSDEFER case,\n   and never fail to make the values the program will actually see\n   available to the user of the debugger.",
  "cache_search": "Search the cache for a matching entry and return it when found.  If\n   this fails search the negative cache and return (void *) -1 if this\n   search was successful.  Otherwise return NULL.\n\n   This function must be called with the read-lock held.",
  "cache_add": "Add a new entry to the cache.  The return value is zero if the function\n   call was successful.\n\n   This function must be called with the read-lock held.\n\n   We modify the table but we nevertheless only acquire a read-lock.\n   This is ok since we use operations which would be safe even without\n   locking, given that the `prune_cache' function never runs.  Using\n   the readlock reduces the chance of conflicts.",
  "prune_cache": "Walk through the table and remove all entries which lifetime ended.\n\n   We have a problem here.  To actually remove the entries we must get\n   the write-lock.  But since we want to keep the time we have the\n   lock as short as possible we cannot simply acquire the lock when we\n   start looking for timedout entries.\n\n   Therefore we do it in two stages: first we look for entries which\n   must be invalidated and remember them.  Then we get the lock and\n   actually remove them.  This is complicated by the way we have to\n   free the data structures since some hash table entries share the same\n   data.",
  "data_string": "Given a chunk of raw data CP of length LEN, print it in a hopefully\n   user-readable format, including colorizing non-readable characters.\n   STR prefixes it, if non-NULL.  If LEN is -1, CP is\n   NUL-terminated.",
  "verify_persistent_db": "Verify data in persistent database.",
  "nscd_init": "Initialize database information structures.",
  "register_traced_file": "Register the file in FINFO as a traced file for the database DBS[DBIX].\n\n   We support registering multiple files per database. Each call to\n   register_traced_file adds to the list of registered files.\n\n   When we prune the database, either through timeout or a request to\n   invalidate, we will check to see if any of the registered files has changed.\n   When we accept new connections to handle a cache request we will also\n   check to see if any of the registered files has changed.\n\n   If we have inotify support then we install an inotify fd to notify us of\n   file deletion or modification, both of which will require we invalidate\n   the cache for the database.  Without inotify support we stat the file and\n   store st_mtime to determine if the file has been modified.",
  "close_sockets": "Close the connections.",
  "handle_request": "Handle new request.",
  "restart": "Restart the process.",
  "restart_p": "Check whether restarting should happen.",
  "check_file": "Returns 0 if the file is there otherwise -1.",
  "inotify_check_files": "Process the inotify event in INEV. If the event matches any of the files\n   registered with a database then mark that database as requiring its cache\n   to be cleared. We indicate the cache needs clearing by setting\n   TO_CLEAR[DBCNT] to true for the matching database.",
  "clear_db_cache": "If an entry in the array of booleans TO_CLEAR is TRUE then clear the cache\n   for the associated database, otherwise do nothing. The TO_CLEAR array must\n   have LASTDB entries.",
  "begin_drop_privileges": "Look up the uid, gid, and supplementary groups to run nscd as. When\n   this function is called, we are not listening on the nscd socket yet so\n   we can just use the ordinary lookup functions without causing a lockup",
  "finish_drop_privileges": "Call setgroups(), setgid(), and setuid() to drop root privileges and\n   run nscd as the user specified in the configuration file.",
  "do_notfound": "Sends a notfound message and prepares a notfound dataset to write to the\n   cache.  Returns true if there was enough memory to allocate the dataset and\n   returns the dataset in DATASETP, total bytes to write in TOTALP and the\n   timeout in TIMEOUTP.  KEY_COPY is set to point to the copy of the key in the\n   dataset.",
  "invalidate_db": "Behave like a daemon.",
  "nscd_open_socket": "Create a socket connected to a name.",
  "termination_handler": "Cleanup.",
  "check_pid": "Returns 1 if the process in pid file FILE is running, 0 if not.",
  "write_pid": "Write the current process id to the file FILE.\n   Returns 0 if successful, -1 if not.",
  "__nscd_gr_map_freemem": "Note that we only free the structure if necessary.  The memory\n   mapping is not removed since it is not visible to the malloc\n   handling.",
  "__nscd_hst_map_freemem": "Note that we only free the structure if necessary.  The memory\n   mapping is not removed since it is not visible to the malloc\n   handling.",
  "__nscd_pw_map_freemem": "Note that we only free the structure if necessary.  The memory\n   mapping is not removed since it is not visible to the malloc\n   handling.",
  "__nscd_serv_map_freemem": "Note that we only free the structure if necessary.  The memory\n   mapping is not removed since it is not visible to the malloc\n   handling.",
  "__nscd_get_mapping": "Try to get a file descriptor for the shared memory segment\n   containing the database.",
  "__nscd_cache_search": "Don't return const struct datahead *, as even though the record\n   is normally constant, it can change arbitrarily during nscd\n   garbage collection.",
  "__nscd_open_socket": "Create a socket connected to a name.",
  "__nscd_group_map_freemem": "Note that we only free the structure if necessary.  The memory\n   mapping is not removed since it is not visible to the malloc\n   handling.",
  "log_callback": "When an avc denial occurs, log it to audit system",
  "audit_init": "Initialize the connection to the audit system",
  "nscd_selinux_enabled": "Determine if we are running on an SELinux kernel. Set selinux_enabled\n   to the result.",
  "avc_create_thread": "Create thread for AVC netlink notification.",
  "avc_stop_thread": "Stop AVC netlink thread.",
  "avc_alloc_lock": "Allocate a new AVC lock.",
  "avc_get_lock": "Acquire an AVC lock.",
  "avc_release_lock": "Release an AVC lock.",
  "avc_free_lock": "Free an AVC lock.",
  "nscd_avc_init": "Initialize the user space access vector cache (AVC) for NSCD along with\n   log/thread/lock callbacks.",
  "nscd_request_avc_has_perm": "Check the permission from the caller (via getpeercon) to nscd.\n   Returns 0 if access is allowed, 1 if denied, and -1 on error.\n\n   The SELinux policy, enablement, and permission bits are all dynamic and the\n   caching done by glibc is not entirely correct.  This nscd support should be\n   rewritten to use selinux_check_permission.  A rewrite is risky though and\n   requires some refactoring.  Currently we use symbolic mappings instead of\n   compile time constants (which SELinux upstream says are going away), and we\n   use security_deny_unknown to determine what to do if selinux-policy* doesn't\n   have a definition for the the permission or object class we are looking\n   up.",
  "nscd_avc_print_stats": "Print the AVC statistics to stdout.",
  "equal": "Complain if first two args don't strcmp as equal.",
  "init_test_items": "Initialize test_items and test_count above, with data from the\n   passwd database.",
  "check_padding": "Return true if the padding has not been tampered with.",
  "test_buffer_size": "Test one buffer size with different paddings.",
  "__nss_passwd_lookup": "On i386, the function calling convention changed from the standard\n   ABI calling convention to three register parameters in glibc 2.8.\n   The following error-returning stub happens to be compatible with\n   glibc 2.7 and earlier and glibc 2.8 and later, even on i386.",
  "__nss_next": "These functions were exported under a non-GLIBC_PRIVATE version,\n   even though it is not usable externally due to the service_user\n   (now nss_action_list) type dependency.",
  "fgetgrent": "Read one entry from the given stream.",
  "__fgetgrent_r": "Read one entry from the given stream.",
  "fgetpwent": "Read one entry from the given stream.",
  "fgetsgent": "Read one shadow entry from the given stream.",
  "__fgetsgent_r": "Read one shadow entry from the given stream.",
  "fgetspent": "Read one shadow entry from the given stream.",
  "__fgetspent_r": "Read one shadow entry from the given stream.",
  "INTERNAL": "There is no `long double' type, use the `double' implementations.",
  "convert_hostent_to_gaih_addrtuple": "Convert struct hostent to a list of struct gaih_addrtuple objects.  The new\n   addresses are appended to the tuple array in RES.",
  "getcanonname": "This function is called if a canonical name is requested, but if\n   the service function did not provide it.  It tries to obtain the\n   name using getcanonname_r from the same service NIP.  If the name\n   cannot be canonicalized, return a copy of NAME.  Return NULL on\n   memory allocation failure.  The returned string is allocated on the\n   heap; the caller has to free it.",
  "process_canonname": "Process looked up canonical name and if necessary, decode to IDNA.  Result\n   is a new string written to CANONP and the earlier string is freed.",
  "get_nscd_addresses": "Query addresses from nscd cache, returning a non-zero value on error.\n   RES members have the lookup result; RES->AT is NULL if there were no errors\n   but also no results.",
  "text_to_binary_address": "Convert numeric addresses to binary into RES.  On failure, RES->AT is set to\n   NULL and an error code is returned.  If AI_NUMERIC_HOST is not requested and\n   the function cannot determine a result, RES->AT is set to NULL and 0\n   returned.",
  "try_simple_gethostbyname": "If possible, call the simple, old functions, which do not support IPv6 scope\n   ids, nor retrieving the canonical name.",
  "get_local_addresses": "Add local address information into RES.  RES->AT is assumed to have enough\n   space for two tuples and is zeroed out.",
  "generate_addrinfo": "Generate results in PAI and its count in NADDRS.  Return 0 on success or an\n   error code on failure.",
  "fls": "Find last bit set in a word.",
  "print_aliases": "This is for aliases",
  "ethers_keys": "This is for ethers",
  "print_group": "This is for group",
  "print_gshadow": "This is for gshadow",
  "print_hosts": "This is for hosts",
  "ahosts_keys_int": "This is for hosts, but using getaddrinfo",
  "netgroup_keys": "This is for netgroup",
  "initgroups_keys": "This is for initgroups",
  "print_networks": "This is for networks",
  "print_passwd": "Now is all for passwd",
  "print_protocols": "This is for protocols",
  "print_rpc": "Now is all for rpc",
  "print_services": "for services",
  "print_shadow": "This is for shadow",
  "parse_option": "Handle arguments found by argp.",
  "nrl_domainname_core": "Return true if no memory allocation failure happened (even if domain\n   name could not be obtained) or false otherwise.",
  "checked_copy": "Copy a string to a destination buffer with length checking.  Return\n   EAI_OVERFLOW if the buffer is not large enough, and 0 on\n   success.",
  "check_sprintf_result": "Helper function for CHECKED_SNPRINTF below.",
  "gni_host_inet_name": "Convert host name, AF_INET/AF_INET6 case, name only.",
  "gni_host_inet_numeric": "Convert host name, AF_INET/AF_INET6 case, numeric conversion.",
  "gni_host_inet": "Convert AF_INET or AF_INET6 socket address, host part.",
  "gni_host_local": "Convert AF_LOCAL socket address, host part.",
  "gni_host": "Convert the host part of an AF_LOCAK socket address.",
  "gni_serv_inet": "Convert service to string, AF_INET and AF_INET6 variant.",
  "gni_serv_local": "Convert service to string, AF_LOCAL variant.",
  "gni_serv": "Convert service to string, dispatching to the implementations\n   above.",
  "setup": "Set up NIP to run through the services.  If ALL is zero, use NIP's\n   current location if it's not nil.  Return nonzero if there are no\n   services (left).",
  "free_memory": "Free used memory.",
  "innetgr": "Test whether given (host,user,domain) triple is in NETGROUP.",
  "getgrouplist": "Store at most *NGROUPS members of the group set for USER into\n   *GROUPS.  Also include GROUP.  The actual number of groups found is\n   returned in *NGROUPS.  Return -1 if the if *NGROUPS is too small.",
  "actions_equal": "Returns true if the actions are equal (same module, same actions\n   array).",
  "action_lists_equal": "Returns true if COUNT actions at A and B are equal (according to\n   actions_equal above). Caller must ensure that either A or B have at\n   least COUNT actions.",
  "find_allocated": "Returns a pre-allocated action list for COUNT actions at ACTIONS,\n   or NULL if no such list exists.",
  "nss_action_parse": "Read the source names:\n        `( <source> ( \"[\" \"!\"? (<status> \"=\" <action> )+ \"]\" )? )*'",
  "global_state_allocate": "Allocate and return pointer to nss_database_state object or\n   on failure return NULL.",
  "nss_database_state_get": "Return pointer to global NSS database state, allocating as\n   required, or returning NULL on failure.",
  "nss_database_reload_1": "Iterate over the lines in FP, parse them, and store them in DATA.\n   Return false on memory allocation failure, true on success.",
  "__nss_files_data_get": "Like __nss_files_data_open, but does not perform the open call.",
  "__nss_files_data_internal_open": "Helper function for opening the backing file at PATH.",
  "__nss_hash": "* This is INCREDIBLY ugly, but fast.  We break the string up into 4 byte\n * units.  On the first time through the loop we get the \"leftover bytes\"\n * (len % 4).  On every other iteration, we perform a 4x unrolled version\n * HASHC. Further unrolling does not appear to help.\n *\n * OZ's original sdbm hash",
  "__nss_module_allocate": "Allocate the service NAME with length NAME_LENGTH.  If the service\n   is already allocated in the nss_module_list cache then we return a\n   pointer to the struct nss_module, otherwise we try to allocate a\n   new struct nss_module entry and add it to the global\n   nss_modules_list cache.  If we fail to allocate the entry we return\n   NULL.  Failure to allocate the entry is always transient.",
  "module_load_builtin": "Loads a built-in module, binding the symbols using the supplied\n   callback function.  Always returns true.",
  "module_load_nss_files": "Loads the built-in nss_files module.",
  "module_load_nss_dns": "Loads the built-in nss_dns module.",
  "module_load": "Internal implementation of __nss_module_load.",
  "__nss_module_load": "Force the module identified by MODULE to be loaded.  We return\n   false if the module could not be loaded, true otherwise.  Loading\n   the module requires looking up all the possible interface APIs and\n   caching the results.",
  "__nss_module_get_function": "Load module MODULE (if it isn't already) and return a pointer to\n   the module's implementation of NAME, otherwise return NULL on\n   failure or error.",
  "nss_load_all_libraries": "Load all libraries for the service.",
  "__nss_disable_nscd": "Called by nscd and nscd alone.",
  "__nss_module_disable_loading": "Block attempts to dlopen any module we haven't already opened.",
  "NAME": "Note: only the first address is supported, intentionally.",
  "_nss_test_errno_setpwent": "Catch misnamed function definitions.",
  "__nss_lookup": "-1 == not found\n    0 == function found\n    1 == finished",
  "putgrent": "Write an entry to the given stream.\n   This must know the format of the group file.",
  "putpwent": "Write an entry to the given stream.  This must know the format of\n   the password file.  If the input contains invalid characters,\n   return EINVAL, or replace them with spaces (if they are contained\n   in the GECOS field).",
  "putsgent": "Write an entry to the given stream.\n   This must know the format of the group file.",
  "putspent": "Write an entry to the given stream.\n   This must know the format of the password file.",
  "__nss_rewrite_field": "Rewrite VALUE to a valid field value in the NSS database.  Invalid\n   characters are replaced with a single space character ' '.  If\n   VALUE is NULL, the empty string is returned.  *TO_BE_FREED is\n   overwritten with a pointer the caller has to free if the function\n   returns successfully.  On failure, return NULL.",
  "sgetsgent": "Read one shadow entry from the given stream.",
  "__sgetsgent_r": "Read one shadow entry from the given stream.",
  "sgetspent": "Read one shadow entry from the given stream.",
  "__sgetspent_r": "Read one shadow entry from the given stream.",
  "setdb": "Override /etc/nsswitch.conf for this program.  This is mainly\n   useful for developers.",
  "format_ent": "Turn a parsed struct back into a line string.  The returned string\n   should be freed.",
  "create_test_file": "Writes the test data to a temporary file and returns its name.  The\n   returned pointer should be freed.",
  "try_it": "It is entirely allowed to start with a getpwent call without\n   resetting the state of the service via a call to setpwent.\n   You can also call getpwent more times than you have entries in\n   the service, and it should not fail.  This test iteratates the\n   database once, gets to the end, and then attempts a second\n   iteration to look for crashes.",
  "write_hosts": "Create the /etc/hosts file from outside the chroot.",
  "test_gai": "getaddrinfo test.  To be run from a subprocess.",
  "subprocess_gethost": "Subprocess routine for gethostbyname/getaddrinfo testing.",
  "expected_ghbn": "Expected result of gethostbyname/gethostbyname2.",
  "expected_gai": "Expected result of getaddrinfo.",
  "test_cross_switch_consistency": "If the actions change while in the midst of doing a series of\n   lookups, make sure they're consistent.",
  "__getline": "Like getdelim, but always looks for a newline.",
  "__nss_valid_field": "Check that VALUE is either NULL or a NUL-terminated string which\n   does not contain characters not permitted in NSS database\n   fields.",
  "__nss_valid_list_field": "Check that all list members match the field syntax requirements and\n   do not contain the character ','.",
  "init_nss_interface": "Initialize the NSS interface/functions. The calling function must\n   hold the lock.",
  "internal_endgrent_noerror": "Like internal_endgrent, but preserve errno in all cases.",
  "getgrent_next_nss": "Get the next group from NSS  (+ entry). If the NSS module supports\n   initgroups_dyn, get all entries at once.",
  "getgrnam_plusgroup": "This function handle the +group entries in /etc/group",
  "internal_getgrnam_r": "Searches in /etc/group and the NIS/NIS+ map for a special group",
  "internal_getgrgid_r": "Searches in /etc/group and the NIS/NIS+ map for a special group id",
  "blacklist_store_name": "Support routines for remembering -@netgroup and -user entries.\n   The names are stored in a single string with `|' as separator.",
  "in_blacklist": "Returns whether ent->blacklist contains name.",
  "add_group": "Add new group record.",
  "check_and_add_group": "This function checks, if the user is a member of this group and if\n   yes, add the group id to the list.  Return nonzero is we couldn't\n   handle the group because the user is not in the member list.",
  "internal_endpwent_noerror": "Like internal_endpwent, but preserve errno in all cases.",
  "getpwent_next_nss": "get the next user from NSS  (+ entry)",
  "getpwnam_plususer": "This function handle the +user entries in /etc/passwd",
  "internal_getpwnam_r": "Searches in /etc/passwd and the NIS/NIS+ map for a special user",
  "getpwuid_plususer": "This function handle the + entry in /etc/passwd for getpwuid",
  "internal_getpwuid_r": "Searches in /etc/passwd and the NSS subsystem for a special user id",
  "internal_endspent_noerror": "Like internal_endspent, but preserve errno in all cases.",
  "getspnam_plususer": "This function handle the +user entries in /etc/shadow",
  "internal_getspnam_r": "Searches in /etc/passwd and the NIS/NIS+ map for a special user",
  "_nss_db_setnetgrent": "Maintenance of the shared handle open on the database.",
  "internal_setent": "Maintenance of the stream open on the database file.  For getXXent\n   operations the stream needs to be held open across calls, the other\n   getXXbyYY operations all use their own stream.",
  "internal_endent": "Close the database.",
  "internal_getent": "Parsing the database file into `struct STRUCTURE' data structures.",
  "_nss_files_setaliasent": "Thread-safe, exported version of that.",
  "get_next_alias": "Parsing the database file into `struct aliasent' data structures.",
  "strtou32": "Helper function.",
  "alarm": "Schedule an alarm.  In SECONDS seconds, the process will get a SIGALRM.\n   If SECONDS is zero, any currently scheduled alarm will be cancelled.\n   The function returns the number of seconds remaining until the last\n   alarm scheduled would have signaled, or zero if there wasn't one.\n   There is no return value to indicate an error, but you can set `errno'\n   to 0 and check its value after calling `alarm', and this might tell you.\n   The signal may come late due to processor scheduling.",
  "my_stat": "We use this function for lstat as well since we don't have any.",
  "__confstr": "If BUF is not NULL and LEN > 0, fill in at most LEN - 1 bytes\n   of BUF with the value corresponding to NAME and zero-terminate BUF.\n   Return the number of bytes required to hold NAME's entire value.",
  "execl": "Execute PATH with all arguments after PATH until\n   a NULL pointer and environment from `environ'.",
  "execle": "Execute PATH with all arguments after PATH until a NULL pointer,\n   and the argument after that for environment.",
  "execlp": "Execute FILE, searching in the `PATH' environment variable if\n   it contains no slashes, with all arguments after FILE until a\n   NULL pointer and environment from `environ'.",
  "execv": "Execute PATH with arguments ARGV and environment from `environ'.",
  "__execve": "Replace the current process, executing FILE_NAME with arguments ARGV and\n   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.",
  "__execveat": "Replace the current process, executing FILE_NAME with arguments ARGV and\n   environment ENVP.  ARGV and ENVP are terminated by NULL pointers.",
  "execvp": "Execute FILE, searching in the `PATH' environment variable if it contains\n   no slashes, with arguments ARGV and environment from `environ'.",
  "maybe_script_execute": "Older version requires that shell script without shebang definition\n   to be called explicitly using /bin/sh (_PATH_BSHELL).",
  "__execvpe": "Execute FILE, searching in the `PATH' environment variable if it contains\n   no slashes, with arguments ARGV and environment from ENVP.",
  "__execvpex": "Same as __EXECVPE, but does not try to execute NOEXEC files.",
  "fexecve": "Execute the file FD refers to, overlaying the running program image.\n   ARGV and ENVP are passed to the new program, as for `execve'.",
  "is_char_class": "We have to convert the wide character string in a multibyte string.  But\n   we know that the character class names consist of alphanumeric characters\n   from the portable character set, and since the wide character encoding\n   for a member of the portable character set is the same code point as\n   its single-byte encoding, we can use a simplified method to convert the\n   string to a multibyte character string.",
  "__fpathconf": "Get file-specific information about descriptor FD.",
  "__getegid": "Get the effective group ID of the calling process.",
  "__geteuid": "Get the effective user ID of the calling process.",
  "__getgid": "Get the real group ID of the calling process.",
  "exchange": "Exchange two adjacent subsequences of ARGV.\n   One subsequence is elements [first_nonopt,last_nonopt)\n   which contains all the non-options that have been skipped so far.\n   The other is elements [last_nonopt,optind), which contains all\n   the options processed since those non-options were skipped.\n\n   'first_nonopt' and 'last_nonopt' are relocated so that they describe\n   the new indices of the non-options in ARGV after they are moved.",
  "process_long_option": "Process the argument starting with d->__nextchar as a long option.\n   d->optind should *not* have been advanced over this argument.\n\n   If the value returned is -1, it was not actually a long option, the\n   state is unchanged, and the argument should be processed as a set\n   of short options (this can only happen when long_only is true).\n   Otherwise, the option (and its argument, if any) have been consumed\n   and the return value is the value to return from _getopt_internal_r.",
  "_getopt_initialize": "Initialize internal data upon the first call to getopt.",
  "_getopt_internal_r": "Scan elements of ARGV (whose length is ARGC) for option characters\n   given in OPTSTRING.\n\n   If an element of ARGV starts with '-', and is not exactly \"-\" or \"--\",\n   then it is an option element.  The characters of this element\n   (aside from the initial '-') are option characters.  If 'getopt'\n   is called repeatedly, it returns successively each of the option characters\n   from each of the option elements.\n\n   If 'getopt' finds another option character, it returns that character,\n   updating 'optind' and 'nextchar' so that the next call to 'getopt' can\n   resume the scan with the following option character or ARGV-element.\n\n   If there are no more option characters, 'getopt' returns -1.\n   Then 'optind' is the index in ARGV of the first ARGV-element\n   that is not an option.  (The ARGV-elements have been permuted\n   so that those that are not options now come last.)\n\n   OPTSTRING is a string containing the legitimate option characters.\n   If an option character is seen that is not listed in OPTSTRING,\n   return '?' after printing an error message.  If you set 'opterr' to\n   zero, the error message is suppressed but we still return '?'.\n\n   If a char in OPTSTRING is followed by a colon, that means it wants an arg,\n   so the following text in the same ARGV-element, or the text of the following\n   ARGV-element, is returned in 'optarg'.  Two colons mean an option that\n   wants an optional arg; if there is text in the current ARGV-element,\n   it is returned in 'optarg', otherwise 'optarg' is set to zero.\n\n   If OPTSTRING starts with '-' or '+', it requests different methods of\n   handling the non-option ARGV-elements.\n   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.\n\n   Long-named options begin with '--' instead of '-'.\n   Their names may be abbreviated as long as the abbreviation is unique\n   or is an exact match for some defined option.  If they have an\n   argument, it follows the option name in the same ARGV-element, separated\n   from the option name by a '=', or else the in next ARGV-element.\n   When 'getopt' finds a long-named option, it returns 0 if that option's\n   'flag' field is nonzero, the value of the option's 'val' field\n   if the 'flag' field is zero.\n\n   The elements of ARGV aren't really const, because we permute them.\n   But we pretend they're const in the prototype to be compatible\n   with other systems.\n\n   LONGOPTS is a vector of 'struct option' terminated by an\n   element containing a name which is zero.\n\n   LONGIND returns the index in LONGOPT of the long-named option found.\n   It is only valid when a long-named option has been found by the most\n   recent call.\n\n   If LONG_ONLY is nonzero, '-' as well as '--' can introduce\n   long-named options.",
  "getopt_long_only": "Like getopt_long, but '-' as well as '--' can indicate a long option.\n   If an option that starts with '-' (not '--') doesn't match a long option,\n   but does match a short option, it is parsed as a short option\n   instead.",
  "__getpgid": "Get the process group ID of process PID.",
  "getpgrp": "Get the process group ID of the calling process.",
  "__getpid": "Get the process ID of the calling process.",
  "__getppid": "Get the parent process ID of the calling process.",
  "__getresgid": "Fetch the real group ID, effective group ID, and saved-set group ID,\n   of the calling process.",
  "__getresuid": "Fetch the real user ID, effective user ID, and saved-set user ID,\n   of the calling process.",
  "__getuid": "Get the real user ID of the calling process.",
  "readdir_result_type": "Initialize and return type member of struct readdir_result.",
  "convert_dirent": "Extract name and type from directory entry.  No copy of the name is\n   made.  If SOURCE is NULL, result name is NULL.  Keep in sync with\n   convert_dirent64 below.",
  "convert_dirent64": "Like convert_dirent, but works on struct dirent64 instead.  Keep in\n   sync with convert_dirent above.",
  "size_add_wrapv": "Set *R = A + B.  Return true if the answer is mathematically\n   incorrect due to overflow; in this case, *R is the low order\n   bits of the correct answer.",
  "is_dir": "Return true if FILENAME is a directory or a symbolic link to a directory.\n   Use FLAGS and PGLOB to resolve the filename.",
  "next_brace_sub": "Find the end of the sub-pattern in a brace expression.",
  "__glob": "Do glob searching for PATTERN, placing results in PGLOB.\n   The bits defined above may be set in FLAGS.\n   If a directory cannot be opened or read and ERRFUNC is not nil,\n   it is called with the pathname that caused the error, and the\n   'errno' value from the failing call; if it returns non-zero\n   'glob' returns GLOB_ABORTED; if it returns zero, the error is ignored.\n   If memory cannot be allocated for PGLOB, GLOB_NOSPACE is returned.\n   Otherwise, 'glob' returns zero.",
  "collated_compare": "Do a collated comparison of A and B.",
  "prefix_array": "Prepend DIRNAME to each of N members of ARRAY, replacing ARRAY's\n   elements in place.  Return nonzero if out of memory, zero if successful.\n   A slash is inserted between DIRNAME and each elt of ARRAY,\n   unless DIRNAME is just \"/\".  Each old element of ARRAY is freed.",
  "glob_in_dir": "Like 'glob', but PATTERN is a final pathname component,\n   and matches are searched for in DIRECTORY.\n   The GLOB_NOSORT bit in FLAGS is ignored.  No sorting is ever done.\n   The GLOB_APPEND flag is assumed to be set (always appends).",
  "__glob64_time64": "Do glob searching for PATTERN, placing results in PGLOB.\n   The bits defined above may be set in FLAGS.\n   If a directory cannot be opened or read and ERRFUNC is not nil,\n   it is called with the pathname that caused the error, and the\n   `errno' value from the failing call; if it returns non-zero\n   `glob' returns GLOB_ABORTED; if it returns zero, the error is ignored.\n   If memory cannot be allocated for PGLOB, GLOB_NOSPACE is returned.\n   Otherwise, `glob' returns zero.",
  "glob64": "Do glob searching for PATTERN, placing results in PGLOB.\n   The bits defined above may be set in FLAGS.\n   If a directory cannot be opened or read and ERRFUNC is not nil,\n   it is called with the pathname that caused the error, and the\n   `errno' value from the failing call; if it returns non-zero\n   `glob' returns GLOB_ABORTED; if it returns zero, the error is ignored.\n   If memory cannot be allocated for PGLOB, GLOB_NOSPACE is returned.\n   Otherwise, `glob' returns zero.",
  "__glob_pattern_p": "Return nonzero if PATTERN contains any metacharacters.\n   Metacharacters can be quoted with backslashes if QUOTE is nonzero.",
  "globfree": "Free storage allocated in PGLOB by a previous `glob' call.",
  "__globfree64_time64": "Free storage allocated in PGLOB by a previous `glob' call.",
  "globfree64": "Free storage allocated in PGLOB by a previous `glob' call.",
  "__pathconf": "Get file-specific information about FILE.",
  "pause": "Suspend the process until a signal arrives.\n   This is supposed to always return -1 and set errno to EINTR,\n   but rules were meant to be broken.",
  "re_compile_pattern": "re_compile_pattern is the GNU regular expression compiler: it\n   compiles PATTERN (of length LENGTH) and puts the result in BUFP.\n   Returns 0 if the pattern was valid, otherwise an error string.\n\n   Assumes the 'allocated' (and perhaps 'buffer') and 'translate' fields\n   are set in BUFP on entry.",
  "re_set_syntax": "Specify the precise syntax of regexps for compilation.  This provides\n   for compatibility for various utilities which historically have\n   different, incompatible syntaxes.\n\n   The argument SYNTAX is a bit mask comprised of the various bits\n   defined in regex.h.  We return the old syntax.",
  "re_compile_fastmap_iter": "Helper function for re_compile_fastmap.\n   Compile fastmap for the initial_state INIT_STATE.",
  "regcomp": "regcomp takes a regular expression as a string and compiles it.\n\n   PREG is a regex_t *.  We do not expect any fields to be initialized,\n   since POSIX says we shouldn't.  Thus, we set\n\n     'buffer' to the compiled pattern;\n     'used' to the length of the compiled pattern;\n     'syntax' to RE_SYNTAX_POSIX_EXTENDED if the\n       REG_EXTENDED bit in CFLAGS is set; otherwise, to\n       RE_SYNTAX_POSIX_BASIC;\n     'newline_anchor' to REG_NEWLINE being set in CFLAGS;\n     'fastmap' to an allocated space for the fastmap;\n     'fastmap_accurate' to zero;\n     're_nsub' to the number of subexpressions in PATTERN.\n\n   PATTERN is the address of the pattern string.\n\n   CFLAGS is a series of bits which affect compilation.\n\n     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we\n     use POSIX basic syntax.\n\n     If REG_NEWLINE is set, then . and [^...] don't match newline.\n     Also, regexec will try a match beginning after every newline.\n\n     If REG_ICASE is set, then we considers upper- and lowercase\n     versions of letters to be equivalent when matching.\n\n     If REG_NOSUB is set, then when PREG is passed to regexec, that\n     routine will report only success or failure, and nothing about the\n     registers.\n\n   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for\n   the return codes and their meanings.)",
  "free_dfa_content": "This static array is used for the map to single-byte characters when\n   UTF-8 is used.  Otherwise we would allocate memory just to initialize\n   it the same all the time.  UTF-8 is the preferred encoding so this is\n   a worthwhile optimization.",
  "regfree": "Free dynamically allocated space used by PREG.",
  "re_comp": "Make these definitions weak in libc, so POSIX programs can redefine\n   these names if they don't use our functions, and still use\n   regcomp/regexec above without link errors.",
  "re_compile_internal": "Internal entry point.\n   Compile the regular expression PATTERN, whose length is LENGTH.\n   SYNTAX indicate regular expression's syntax.",
  "init_dfa": "Initialize DFA.  We use the length of the regular expression PAT_LEN\n   as the initial length of some arrays.",
  "init_word_char": "Initialize WORD_CHAR table, which indicate which character is\n   \"word\".  In this case \"word\" means that it is the word construction\n   character used by some operators like \"\\<\", \"\\>\", etc.",
  "free_workarea_compile": "Free the work area which are only used while compiling.",
  "create_initial_state": "Create initial states for all contexts.",
  "optimize_utf8": "If it is possible to do searching in single byte encoding instead of UTF-8\n   to speed things up, set dfa->mb_cur_max to 1, clear is_utf8 and change\n   DFA nodes where needed.",
  "analyze": "Analyze the structure tree, and calculate \"first\", \"next\", \"edest\",\n   \"eclosure\", and \"inveclosure\".",
  "postorder": "Our parse trees are very unbalanced, so we cannot use a stack to\n   implement parse tree visits.  Instead, we use parent pointers and\n   some hairy code in these two functions.",
  "optimize_subexps": "Optimization pass: if a SUBEXP is entirely contained, strip it and tell\n   re_search_internal to map the inner one's opr.idx to this one's.  Adjust\n   backreferences as well.  Requires a preorder visit.",
  "lower_subexps": "Lowering pass: Turn each SUBEXP node into the appropriate concatenation\n   of OP_OPEN_SUBEXP, the body of the SUBEXP (if any) and OP_CLOSE_SUBEXP.",
  "calc_first": "Pass 1 in building the NFA: compute FIRST and create unlinked automaton\n   nodes.  Requires a postorder visit.",
  "calc_next": "Pass 2: compute NEXT on the tree.  Preorder visit.",
  "link_nfa_nodes": "Pass 3: link all DFA nodes to their NEXT node (any order will do).",
  "duplicate_node_closure": "Duplicate the epsilon closure of the node ROOT_NODE.\n   Note that duplicated nodes have constraint INIT_CONSTRAINT in addition\n   to their own constraint.",
  "search_duplicated_node": "Search for a node which is duplicated from the node ORG_NODE, and\n   satisfies the constraint CONSTRAINT.",
  "duplicate_node": "Duplicate the node whose index is ORG_IDX and set the constraint CONSTRAINT.\n   Return the index of the new node, or -1 if insufficient storage is\n   available.",
  "calc_eclosure": "Calculate \"eclosure\" for all the node in DFA.",
  "calc_eclosure_iter": "Calculate epsilon closure of NODE.",
  "fetch_token": "Fetch a token from INPUT.\n   We must not use this function inside bracket expressions.",
  "peek_token": "Peek a token from INPUT, and return the length of the token.\n   We must not use this function inside bracket expressions.",
  "peek_token_bracket": "Peek a token from INPUT, and return the length of the token.\n   We must not use this function out of bracket expressions.",
  "parse": "Entry point of the parser.\n   Parse the regular expression REGEXP and return the structure tree.\n   If an error occurs, ERR is set by error code, and return NULL.\n   This function build the following tree, from regular expression <reg_exp>:\n\t   CAT\n\t   / \\\n\t  /   \\\n   <reg_exp>  EOR\n\n   CAT means concatenation.\n   EOR means end of regular expression.",
  "parse_reg_exp": "This function build the following tree, from regular expression\n   <branch1>|<branch2>:\n\t   ALT\n\t   / \\\n\t  /   \\\n   <branch1> <branch2>\n\n   ALT means alternative, which represents the operator '|'.",
  "parse_branch": "This function build the following tree, from regular expression\n   <exp1><exp2>:\n\tCAT\n\t/ \\\n       /   \\\n   <exp1> <exp2>\n\n   CAT means concatenation.",
  "parse_expression": "This function build the following tree, from regular expression a*:\n\t *\n\t |\n\t a",
  "parse_sub_exp": "This function build the following tree, from regular expression\n   (<reg_exp>):\n\t SUBEXP\n\t    |\n\t<reg_exp>",
  "parse_dup_op": "This function parse repetition operators like \"*\", \"+\", \"{1,3}\" etc.",
  "parse_byte": "Convert the byte B to the corresponding wide character.  In a\n   unibyte locale, treat B as itself.  In a multibyte locale, return\n   WEOF if B is an encoding error.",
  "seek_collating_symbol_entry": "Local function for parse_bracket_exp used in _LIBC environment.\n   Seek the collating symbol entry corresponding to NAME.\n   Return the index of the symbol in the SYMB_TABLE,\n   or -1 if not found.",
  "lookup_collation_sequence_value": "Local function for parse_bracket_exp used in _LIBC environment.\n   Look up the collation sequence value of BR_ELEM.\n   Return the value if succeeded, UINT_MAX otherwise.",
  "build_range_exp": "Local function for parse_bracket_exp used in _LIBC environment.\n   Build the range expression which starts from START_ELEM, and ends\n   at END_ELEM.  The result are written to MBCSET and SBCSET.\n   RANGE_ALLOC is the allocated size of mbcset->range_starts, and\n   mbcset->range_ends, is a pointer argument since we may\n   update it.",
  "build_collating_symbol": "Local function for parse_bracket_exp used in _LIBC environment.\n   Build the collating element which is represented by NAME.\n   The result are written to MBCSET and SBCSET.\n   COLL_SYM_ALLOC is the allocated size of mbcset->coll_sym, is a\n   pointer argument since we may update it.",
  "parse_bracket_exp": "This function parse bracket expression like \"[abc]\", \"[a-c]\",\n   \"[[.a-a.]]\" etc.",
  "parse_bracket_element": "Parse an element in the bracket expression.",
  "parse_bracket_symbol": "Parse a bracket symbol in the bracket expression.  Bracket symbols are\n   such as [:<character_class>:], [.<collating_element>.], and\n   [=<equivalent_class>=].",
  "fetch_number": "This is intended for the expressions like \"a{1,3}\".\n   Fetch a number from 'input', and return the number.\n   Return -1 if the number field is empty like \"{,1}\".\n   Return RE_DUP_MAX + 1 if the number field is too large.\n   Return -2 if an error occurred.",
  "create_tree": "Create a tree node.",
  "mark_opt_subexp": "Mark the tree SRC as an optional subexpression.\n   To be called from preorder or postorder.",
  "free_token": "Free the allocated memory inside NODE.",
  "free_tree": "Worker function for tree walking.  Free the allocated memory inside NODE\n   and its children.",
  "duplicate_tree": "Duplicate the node SRC, and return new node.  This is a preorder\n   visit similar to the one implemented by the generic visitor, but\n   we need more infrastructure to maintain two parallel trees --- so,\n   it's easier to duplicate.",
  "re_string_allocate": "This function allocate the buffers.  It is necessary to call\n   re_string_reconstruct before using the object.",
  "re_string_construct": "This function allocate the buffers, and initialize them.",
  "re_string_realloc_buffers": "Helper functions for re_string_allocate, and re_string_construct.",
  "build_wcs_buffer": "Build wide character buffer PSTR->WCS.\n   If the byte sequence of the string are:\n     <mb1>(0), <mb1>(1), <mb2>(0), <mb2>(1), <sb3>\n   Then wide character buffer will be:\n     <wc1>   , WEOF    , <wc2>   , WEOF    , <wc3>\n   We use WEOF for padding, they indicate that the position isn't\n   a first byte of a multibyte character.\n\n   Note that this function assumes PSTR->VALID_LEN elements are already\n   built and starts from PSTR->VALID_LEN.",
  "build_wcs_upper_buffer": "Build wide character buffer PSTR->WCS like build_wcs_buffer,\n   but for REG_ICASE.",
  "re_string_skip_chars": "Skip characters until the index becomes greater than NEW_RAW_IDX.\n   Return the index.",
  "build_upper_buffer": "Build the buffer PSTR->MBS, and apply the translation if we need.\n   This function is used in case of REG_ICASE.",
  "re_string_translate_buffer": "Apply TRANS to the buffer in PSTR.",
  "re_string_reconstruct": "This function re-construct the buffers.\n   Concretely, convert to wide character in case of pstr->mb_cur_max > 1,\n   convert to upper case in case of REG_ICASE, apply translation.",
  "re_string_context_at": "Return the context at IDX in INPUT.",
  "re_node_set_alloc": "Functions for set operation.",
  "re_node_set_add_intersect": "Calculate the intersection of the sets SRC1 and SRC2. And merge it to\n   DEST. Return value indicate the error code or REG_NOERROR if succeeded.\n   Note: We assume dest->elems is NULL, when dest->alloc is 0.",
  "re_node_set_init_union": "Calculate the union set of the sets SRC1 and SRC2. And store it to\n   DEST. Return value indicate the error code or REG_NOERROR if succeeded.",
  "re_node_set_merge": "Calculate the union set of the sets DEST and SRC. And store it to\n   DEST. Return value indicate the error code or REG_NOERROR if succeeded.",
  "re_node_set_insert": "Insert the new element ELEM to the re_node_set* SET.\n   SET should not already have ELEM.\n   Return true if successful.",
  "re_node_set_insert_last": "Insert the new element ELEM to the re_node_set* SET.\n   SET should not already have any element greater than or equal to ELEM.\n   Return true if successful.",
  "re_node_set_compare": "Compare two node sets SET1 and SET2.\n   Return true if SET1 and SET2 are equivalent.",
  "re_node_set_contains": "Return (idx + 1) if SET contains the element ELEM, return 0 otherwise.",
  "re_dfa_add_node": "Add the token TOKEN to dfa->nodes, and return the index of the token.\n   Or return -1 if an error occurred.",
  "re_acquire_state": "Search for the state whose node_set is equivalent to NODES.\n   Return the pointer to the state, if we found it in the DFA.\n   Otherwise create the new one and return it.  In case of an error\n   return NULL and set the error code in ERR.\n   Note: - We assume NULL as the invalid state, then it is possible that\n\t   return value is NULL and ERR is REG_NOERROR.\n\t - We never return non-NULL value in case of any errors, it is for\n\t   optimization.",
  "re_acquire_state_context": "Search for the state whose node_set is equivalent to NODES and\n   whose context is equivalent to CONTEXT.\n   Return the pointer to the state, if we found it in the DFA.\n   Otherwise create the new one and return it.  In case of an error\n   return NULL and set the error code in ERR.\n   Note: - We assume NULL as the invalid state, then it is possible that\n\t   return value is NULL and ERR is REG_NOERROR.\n\t - We never return non-NULL value in case of any errors, it is for\n\t   optimization.",
  "register_state": "Finish initialization of the new state NEWSTATE, and using its hash value\n   HASH put in the appropriate bucket of DFA's state table.  Return value\n   indicates the error code if failed.",
  "create_ci_newstate": "Create the new state which is independent of contexts.\n   Return the new state if succeeded, otherwise return NULL.",
  "create_cd_newstate": "Create the new state which is depend on the context CONTEXT.\n   Return the new state if succeeded, otherwise return NULL.",
  "regexec": "regexec searches for a given pattern, specified by PREG, in the\n   string STRING.\n\n   If NMATCH is zero or REG_NOSUB was set in the cflags argument to\n   'regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at\n   least NMATCH elements, and we set them to the offsets of the\n   corresponding matched substrings.\n\n   EFLAGS specifies \"execution flags\" which affect matching: if\n   REG_NOTBOL is set, then ^ does not match at the beginning of the\n   string; if REG_NOTEOL is set, then $ does not match at the end.\n\n   Return 0 if a match is found, REG_NOMATCH if not, REG_BADPAT if\n   EFLAGS is invalid.",
  "re_match": "re_match, re_search, re_match_2, re_search_2\n\n   The former two functions operate on STRING with length LENGTH,\n   while the later two operate on concatenation of STRING1 and STRING2\n   with lengths LENGTH1 and LENGTH2, respectively.\n\n   re_match() matches the compiled pattern in BUFP against the string,\n   starting at index START.\n\n   re_search() first tries matching at index START, then it tries to match\n   starting from index START + 1, and so on.  The last start position tried\n   is START + RANGE.  (Thus RANGE = 0 forces re_search to operate the same\n   way as re_match().)\n\n   The parameter STOP of re_{match,search}_2 specifies that no match exceeding\n   the first STOP characters of the concatenation of the strings should be\n   concerned.\n\n   If REGS is not NULL, and BUFP->no_sub is not set, the offsets of the match\n   and all groups is stored in REGS.  (For the \"_2\" variants, the offsets are\n   computed relative to the concatenation, not relative to the individual\n   strings.)\n\n   On success, re_match* functions return the length of the match, re_search*\n   return the position of the start of the match.  They return -1 on\n   match failure, -2 on error.",
  "re_search_stub": "The parameters have the same meaning as those of re_search.\n   Additional parameters:\n   If RET_LEN is true the length of the match is returned (re_match style);\n   otherwise the position of the match is returned.",
  "re_set_registers": "Set REGS to hold NUM_REGS registers, storing them in STARTS and\n   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use\n   this memory for recording register information.  STARTS and ENDS\n   must be allocated using the malloc library routine, and must each\n   be at least NUM_REGS * sizeof (regoff_t) bytes long.\n\n   If NUM_REGS == 0, then subsequent matches should allocate their own\n   register data.\n\n   Unless this function is called, the first search or match using\n   PATTERN_BUFFER will allocate its own register data, without\n   freeing the old data.",
  "re_search_internal": "Searches for a compiled pattern PREG in the string STRING, whose\n   length is LENGTH.  NMATCH, PMATCH, and EFLAGS have the same\n   meaning as with regexec.  LAST_START is START + RANGE, where\n   START and RANGE have the same meaning as with re_search.\n   Return REG_NOERROR if we find a match, and REG_NOMATCH if not,\n   otherwise return the error code.\n   Note: We assume front end functions already check ranges.\n   (0 <= LAST_START && LAST_START <= LENGTH)",
  "check_matching": "Check whether the regular expression match input string INPUT or not,\n   and return the index where the matching end.  Return -1 if\n   there is no match, and return -2 in case of an error.\n   FL_LONGEST_MATCH means we want the POSIX longest matching.\n   If P_MATCH_FIRST is not NULL, and the match fails, it is set to the\n   next place where we may want to try matching.\n   Note that the matcher assumes that the matching starts from the current\n   index of the buffer.",
  "check_halt_node_context": "Check NODE match the current context.",
  "check_halt_state_context": "Check the halt state STATE match the current context.\n   Return 0 if not match, if the node, STATE has, is a halt node and\n   match the context, return the node.",
  "proceed_next_node": "Compute the next node to which \"NFA\" transit from NODE(\"NFA\" is a NFA\n   corresponding to the DFA).\n   Return the destination node, and update EPS_VIA_NODES;\n   return -1 on match failure, -2 on error.",
  "set_regs": "Set the positions where the subexpressions are starts/ends to registers\n   PMATCH.\n   Note: We assume that pmatch[0] is already set, and\n   pmatch[i].rm_so == pmatch[i].rm_eo == -1 for 0 < i < nmatch.",
  "clean_state_log_if_needed": "Helper functions.",
  "check_subexp_limits": "Check the limitations of sub expressions LIMITS, and remove the nodes\n   which are against limitations from DEST_NODES.",
  "transit_state": "Return the next state to which the current state STATE will transit by\n   accepting the current input byte, and update STATE_LOG if necessary.\n   Return NULL on failure.\n   If STATE can accept a multibyte char/collating element/back reference\n   update the destination of STATE_LOG.",
  "merge_state_with_log": "Update the state_log if we need",
  "find_recover_state": "Skip bytes in the input that correspond to part of a\n   multi-byte match, then look in the log for a state\n   from which to restart matching.",
  "check_subexp_matching_top": "From the node set CUR_NODES, pick up the nodes whose types are\n   OP_OPEN_SUBEXP and which have corresponding back references in the regular\n   expression. And register them to use them later for evaluating the\n   corresponding back references.",
  "transit_state_sb": "Return the next state to which the current state STATE will transit by\n   accepting the current input byte.  Return NULL on failure.",
  "transit_state_bkref": "RE_ENABLE_I18N",
  "get_subexp": "Enumerate all the candidates which the backreference BKREF_NODE can match\n   at BKREF_STR_IDX, and register them by match_ctx_add_entry().\n   Note that we might collect inappropriate candidates here.\n   However, the cost of checking them strictly here is too high, then we\n   delay these checking for prune_impossible_nodes().",
  "get_subexp_sub": "Check SUB_LAST can arrive to the back reference BKREF_NODE at BKREF_STR.\n   If it can arrive, register the sub expression expressed with SUB_TOP\n   and SUB_LAST.",
  "find_subexp_node": "Find the first node which is '(' or ')' and whose index is SUBEXP_IDX.\n   Search '(' if FL_OPEN, or search ')' otherwise.\n   TODO: This function isn't efficient...\n\t Because there might be more than one nodes whose types are\n\t OP_OPEN_SUBEXP and whose index is SUBEXP_IDX, we must check all\n\t nodes.\n\t E.g. RE: (a){2}",
  "check_arrival": "Check whether the node TOP_NODE at TOP_STR can arrive to the node\n   LAST_NODE at LAST_STR.  We record the path onto PATH since it will be\n   heavily reused.\n   Return REG_NOERROR if it can arrive, REG_NOMATCH if it cannot,\n   REG_ESPACE if memory is exhausted.",
  "check_arrival_add_next_nodes": "Calculate the destination nodes of CUR_NODES at STR_IDX, and append them\n   to NEXT_NODES.\n   TODO: This function is similar to the functions transit_state*(),\n\t however this function has many additional works.\n\t Can't we unify them?",
  "check_arrival_expand_ecl": "For all the nodes in CUR_NODES, add the epsilon closures of them to\n   CUR_NODES, however exclude the nodes which are:\n    - inside the sub expression whose number is EX_SUBEXP, if FL_OPEN.\n    - out of the sub expression whose number is EX_SUBEXP, if !FL_OPEN.",
  "check_arrival_expand_ecl_sub": "Helper function for check_arrival_expand_ecl.\n   Check incrementally the epsilon closure of TARGET, and if it isn't\n   problematic append it to DST_NODES.",
  "expand_bkref_cache": "For all the back references in the current state, calculate the\n   destination of the back references by the appropriate entry\n   in MCTX->BKREF_ENTS.",
  "build_trtable": "Build transition table for the state.\n   Return true if successful.",
  "group_nodes_into_DFAstates": "Group all nodes belonging to STATE into several destinations.\n   Then for all destinations, set the nodes belonging to the destination\n   to DESTS_NODE[i] and set the characters accepted by the destination\n   to DEST_CH[i].  Return the number of destinations if successful,\n   -1 on internal error.",
  "check_node_accept": "Check whether the node accepts the byte which is IDX-th\n   byte of the INPUT.",
  "extend_buffers": "Extend the buffers, if the buffers have run out.",
  "match_ctx_init": "Initialize MCTX.",
  "match_ctx_clean": "Clean the entries which depend on the current input in MCTX.\n   This function must be invoked when the matcher changes the start index\n   of the input, or changes the input string.",
  "match_ctx_free": "Free all the memory associated with MCTX.",
  "match_ctx_add_entry": "Add a new backreference entry to MCTX.\n   Note that we assume that caller never call this function with duplicate\n   entry, and call with STR_IDX which isn't smaller than any existing entry.",
  "search_cur_bkref_entry": "Return the first entry with the same str_idx, or -1 if none is\n   found.  Note that MCTX->BKREF_ENTS is already sorted by MCTX->STR_IDX.",
  "match_ctx_add_subtop": "Register the node NODE, whose type is OP_OPEN_SUBEXP, and which matches\n   at STR_IDX.",
  "match_ctx_add_sublast": "Register the node NODE, whose type is OP_CLOSE_SUBEXP, and which matches\n   at STR_IDX, whose corresponding OP_OPEN_SUBEXP is SUB_TOP.\n   Return the new entry if successful, NULL if memory is exhausted.",
  "countbits": "Counting bits set, Brian Kernighan's way.\n   Using a open-coded routine is slight better for architectures that\n   do not have a popcount instruction (compiler might emit a library\n   call).",
  "sched_getaffinity": "Retrieve the CPU affinity mask for a particular process.",
  "__sched_getparam": "Retrieve scheduling parameters for a particular process.",
  "__sched_getscheduler": "Retrieve scheduling algorithm for a particular purpose.",
  "__sched_get_priority_max": "Get maximum priority value for a scheduler.",
  "__sched_get_priority_min": "Get minimum priority value for a scheduler.",
  "sched_setaffinity": "Retrieve the CPU affinity mask for a particular process.",
  "__sched_setparam": "Set scheduling parameters for a process.",
  "__sched_setscheduler": "Set scheduling algorithm and/or parameters for a process.",
  "__sched_yield": "Yield the processor.",
  "setgroups": "Set the group set for the current user to GROUPS (N of them).  For\n   Linux we must convert the array of groups into the format that the\n   kernel expects.",
  "__setpgid": "Set the process group ID of the process matching PID to PGID.\n   If PID is zero, the current process's process group ID is set.\n   If PGID is zero, the process ID of the process is used.",
  "__setsid": "Create a new session with the calling process as its leader.\n   The process group IDs of the session and the calling process\n   are set to the process ID of the calling process, which is returned.",
  "__sleep": "Make the process sleep for SECONDS seconds, or until a signal arrives\n   and is not ignored.  The function returns the number of seconds less\n   than SECONDS which it actually slept (zero if it slept the full time).\n   If a signal handler does a `longjmp' or modifies the handling of the\n   SIGALRM signal while inside `sleep' call, the handling of the SIGALRM\n   signal afterwards is undefined.  There is no return value to indicate\n   error, but if `sleep' returns SECONDS, it probably didn't work.",
  "__posix_spawn": "Spawn a new process executing PATH with the attributes describes in *ATTRP.\n   Before running the process perform the actions described in FILE-ACTIONS.",
  "__posix_spawn_file_actions_addclose": "Add an action to FILE-ACTIONS which tells the implementation to call\n   `close' for the given file descriptor during the `spawn' call.",
  "__posix_spawn_file_actions_adddup2": "Add an action to FILE-ACTIONS which tells the implementation to call\n   `dup2' for the given file descriptors during the `spawn' call.",
  "__posix_spawn_file_actions_addopen": "Add an action to FILE-ACTIONS which tells the implementation to call\n   `open' for the given file during the `spawn' call.",
  "__posix_spawn_file_actions_destroy": "Deallocate the file actions.",
  "__posix_spawn_file_actions_realloc": "Function used to increase the size of the allocated array.  This\n   function is called from the `add'-functions.",
  "__posix_spawn_file_actions_init": "Initialize data structure for file attribute for `spawn' call.",
  "__posix_spawnattr_destroy": "Initialize data structure for file attribute for `spawn' call.",
  "posix_spawnattr_getsigdefault": "Store signal mask for signals with default handling from ATTR in\n   SIGDEFAULT.",
  "posix_spawnattr_getflags": "Get flag word from the attribute structure.",
  "posix_spawnattr_getpgroup": "Get process group ID from the attribute structure.",
  "posix_spawnattr_getschedparam": "Get scheduling parameters from the attribute structure.",
  "posix_spawnattr_getschedpolicy": "Get scheduling policy from the attribute structure.",
  "posix_spawnattr_getsigmask": "Store signal mask for the new process from ATTR in SIGMASK.",
  "__posix_spawnattr_init": "Initialize data structure for file attribute for `spawn' call.",
  "__posix_spawnattr_setsigdefault": "Set signal mask for signals with default handling in ATTR to SIGDEFAULT.",
  "__posix_spawnattr_setflags": "Store flags in the attribute structure.",
  "posix_spawnattr_setpgroup": "Store process group ID in the attribute structure.",
  "posix_spawnattr_setschedparam": "Store scheduling parameters in the attribute structure.",
  "posix_spawnattr_setschedpolicy": "Store scheduling policy in the attribute structure.",
  "__posix_spawnattr_setsigmask": "Set signal mask for the new process in ATTR to SIGMASK.",
  "__spawni": "Spawn a new process executing PATH with the attributes describes in *ATTRP.\n   Before running the process perform the actions described in FILE-ACTIONS.",
  "__posix_spawnp": "Spawn a new process executing FILE with the attributes describes in *ATTRP.\n   Before running the process perform the actions described in FILE-ACTIONS.",
  "__sysconf": "Get the value of the system variable NAME.",
  "noop": "Used to create a dummy thread ID distinct from all other thread\n   IDs.",
  "singlethread_test": "For single-thread, _Fork behaves like fork.",
  "singlethread_atfork_test": "Different than fork, _Fork does not execute any pthread_atfork\n   handlers.",
  "run_script": "Run a script by reading lines and passing them to the above\n   function.",
  "try_fexecve": "Try executing \"/bin/sh -c true\", using FD opened on /bin/sh.",
  "repeating_string": "Return a string of SIZE characters.",
  "do_test_bz18877": "Check if negative offsets are handled correctly by mmap.",
  "do_test_large_offset": "Check if invalid offset are handled correctly by mmap.",
  "do_test_common": "Effectively testing posix_fadvise is hard because side effects are not\n   observed without checking either performance or any kernel specific\n   supplied information.  Also, the syscall is meant to be an advisory,\n   so the kernel is free to use this information in any way it deems fit,\n   including ignoring it.\n\n   This test check for some invalid returned operation to check argument\n   passing and if implementation follows POSIX error definition.",
  "mb_frob_pattern": "Like mb_frob_string, but don't replace anything between\n   [: and :], [. and .] or [= and =] or characters escaped\n   with a backslash.",
  "mb_test": "The test case file assumes something only guaranteed by the\n\t rxspencer regex implementation.  Namely that for empty\n\t expressions regcomp() return REG_EMPTY.  This is not the case\n\t for us and so we ignore this error.",
  "read_one_line": "Reads the file at PATH, which must consist of exactly one line.\n   Removes the line terminator at the end of the file.",
  "get_pwd_program": "Return the path to the \"pwd\" program.",
  "add_chdir": "Adds chdir operations to ACTIONS, using PATH.  If DO_FCHDIR, use\n   the open function and TMPFD to emulate chdir using fchdir.",
  "is_smp_callback": "Check for an SMP system in a forked process, so that the parent\n   process does not cache the value.",
  "chroot_callback": "The actual test.  Run it in a subprocess, so that the test harness\n   can remove the temporary directory in --direct mode.",
  "next_pid": "Allocate the next PID and return it.  The process is terminated.\n   Note that the test itself advances the next PID.",
  "__vfork": "If we don't have vfork, fork is close enough.",
  "__wait": "Wait for a child to die.  When one does, put its status in *STAT_LOC\n   and return its process ID.  For errors, return (pid_t) -1.",
  "__waitpid": "Wait for a child matching PID to die.\n   If PID is greater than 0, match any process whose process ID is PID.\n   If PID is (pid_t) -1, match any process.\n   If PID is (pid_t) 0, match any process with the\n   same process group as the current process.\n   If PID is less than -1, match any process whose\n   process group is the absolute value of PID.\n   If the WNOHANG bit is set in OPTIONS, and that child\n   is not already dead, return (pid_t) 0.  If successful,\n   return PID and store the dead child's status in STAT_LOC.\n   Return (pid_t) -1 for errors.  If the WUNTRACED bit is set in OPTIONS,\n   return status for stopped children; otherwise don't.",
  "w_newword": "Result of w_newword will be ignored if it's the last word.",
  "parse_backslash": "The parse_*() functions should leave *offset being the offset in 'words'\n * to the last character processed.",
  "eval_expr_val": "Functions to evaluate an arithmetic expression",
  "exec_comm_child": "Function called by child process in exec_comm()",
  "exec_comm": "pwordexp contains NULL if field-splitting is forbidden",
  "wordfree": "* wordfree() is to be called after pwordexp is finished with.",
  "b64_ntop": "(From RFC1521 and draft-ietf-dnssec-secext-03.txt)\n   The following encoding technique is taken from RFC 1521 by Borenstein\n   and Freed.  It is reproduced here in a slightly edited form for\n   convenience.\n\n   A 65-character subset of US-ASCII is used, enabling 6 bits to be\n   represented per printable character. (The extra 65th character, \"=\",\n   is used to signify a special processing function.)\n\n   The encoding process represents 24-bit groups of input bits as output\n   strings of 4 encoded characters. Proceeding from left to right, a\n   24-bit input group is formed by concatenating 3 8-bit input groups.\n   These 24 bits are then treated as 4 concatenated 6-bit groups, each\n   of which is translated into a single digit in the base64 alphabet.\n\n   Each 6-bit group is used as an index into an array of 64 printable\n   characters. The character referenced by the index is placed in the\n   output string.\n\n                         Table 1: The Base64 Alphabet\n\n      Value Encoding  Value Encoding  Value Encoding  Value Encoding\n          0 A            17 R            34 i            51 z\n          1 B            18 S            35 j            52 0\n          2 C            19 T            36 k            53 1\n          3 D            20 U            37 l            54 2\n          4 E            21 V            38 m            55 3\n          5 F            22 W            39 n            56 4\n          6 G            23 X            40 o            57 5\n          7 H            24 Y            41 p            58 6\n          8 I            25 Z            42 q            59 7\n          9 J            26 a            43 r            60 8\n         10 K            27 b            44 s            61 9\n         11 L            28 c            45 t            62 +\n         12 M            29 d            46 u            63 /\n         13 N            30 e            47 v\n         14 O            31 f            48 w         (pad) =\n         15 P            32 g            49 x\n         16 Q            33 h            50 y\n\n   Special processing is performed if fewer than 24 bits are available\n   at the end of the data being encoded.  A full encoding quantum is\n   always completed at the end of a quantity.  When fewer than 24 input\n   bits are available in an input group, zero bits are added (on the\n   right) to form an integral number of 6-bit groups.  Padding at the\n   end of the data is performed using the '=' character.\n\n   Since all base64 input is an integral number of octets, only the\n         -------------------------------------------------\n   following cases can arise:\n\n       (1) the final quantum of encoding input is an integral\n           multiple of 24 bits; here, the final unit of encoded\n\t   output will be an integral multiple of 4 characters\n\t   with no \"=\" padding,\n       (2) the final quantum of encoding input is exactly 8 bits;\n           here, the final unit of encoded output will be two\n\t   characters followed by two \"=\" padding characters, or\n       (3) the final quantum of encoding input is exactly 16 bits;\n           here, the final unit of encoded output will be three\n\t   characters followed by one \"=\" padding character.",
  "___dn_comp": "Packs domain name SRC in presentation form into DST.  Returns the\n   size of the compressed name or -1.  DSTSIZ is the size of the array\n   pointed to by COMPDN.",
  "___dn_expand": "Expand compressed domain name COMP_DN to full domain name.  MSG is\n   a pointer to the beginning of the message, EOMORIG points to the\n   first location after the message, EXP_DN is a pointer to a buffer\n   of size LENGTH for the result.  Returns size of compressed name or\n   -1 if there was an error.",
  "___dn_skipname": "Skips over a compressed domain name. Returns the size or -1.",
  "get_elem": "Functions to handle request list pool.",
  "__gai_enqueue_request": "The main function of the async I/O handling.  It enqueues requests\n   and if necessary starts and handles threads.",
  "__gai_sigqueue": "Return any pending signal or wait for one for the given time.",
  "___gai_suspend": "!PTHREAD_IN_LIBC",
  "herror": "* herror --\n *\tprint the error indicated by the h_errno value.",
  "hstrerror": "* hstrerror --\n *\treturn the string associated with a given \"host\" errno value.",
  "inet_aton_end": "Check whether \"cp\" is a valid ASCII representation of an IPv4\n   Internet address and convert it to a binary address.  Returns 1 if\n   the address is valid, 0 if not.  This replaces inet_addr, the\n   return value from which cannot distinguish between failure and a\n   local broadcast address.  Write a pointer to the first\n   non-converted character to *endp.",
  "__inet_addr": "ASCII IPv4 Internet address interpretation routine.  The value\n   returned is in network order.",
  "inet_net_ntop": "* char *\n * inet_net_ntop(af, src, bits, dst, size)\n *\tconvert network number from network to presentation format.\n *\tgenerates CIDR style result always.\n * return:\n *\tpointer to dst, or NULL if an error occurred (check errno).\n * author:\n *\tPaul Vixie (ISC), July 1996",
  "inet_net_ntop_ipv4": "* static char *\n * inet_net_ntop_ipv4(src, bits, dst, size)\n *\tconvert IPv4 network number from network to presentation format.\n *\tgenerates CIDR style result always.\n * return:\n *\tpointer to dst, or NULL if an error occurred (check errno).\n * note:\n *\tnetwork byte order assumed.  this means 192.5.5.240/28 has\n *\t0b11110000 in its fourth octet.\n * author:\n *\tPaul Vixie (ISC), July 1996",
  "inet_net_pton": "* static int\n * inet_net_pton(af, src, dst, size)\n *\tconvert network number from presentation to network format.\n *\taccepts hex octets, hex strings, decimal octets, and /CIDR.\n *\t\"size\" is in bytes and describes \"dst\".\n * return:\n *\tnumber of bits, either imputed classfully or specified with /CIDR,\n *\tor -1 if some failure occurred (check errno).  ENOENT means it was\n *\tnot a valid network specification.\n * author:\n *\tPaul Vixie (ISC), June 1996",
  "inet_net_pton_ipv4": "* static int\n * inet_net_pton_ipv4(src, dst, size)\n *\tconvert IPv4 network number from presentation to network format.\n *\taccepts hex octets, hex strings, decimal octets, and /CIDR.\n *\t\"size\" is in bytes and describes \"dst\".\n * return:\n *\tnumber of bits, either imputed classfully or specified with /CIDR,\n *\tor -1 if some failure occurred (check errno).  ENOENT means it was\n *\tnot an IPv4 network specification.\n * note:\n *\tnetwork byte order assumed.  this means 192.5.5.240/28 has\n *\t0b11110000 in its fourth octet.\n * author:\n *\tPaul Vixie (ISC), June 1996",
  "inet_neta": "* char *\n * inet_neta(src, dst, size)\n *\tformat a u_long network number into presentation format.\n * return:\n *\tpointer to dst, or NULL if an error occurred (check errno).\n * note:\n *\tformat of ``src'' is as for inet_network().\n * author:\n *\tPaul Vixie (ISC), July 1996",
  "inet_ntop": "char *\n * inet_ntop(af, src, dst, size)\n *\tconvert a network format address to presentation format.\n * return:\n *\tpointer to presentation format address (`dst'), or NULL (see errno).\n * author:\n *\tPaul Vixie, 1996.",
  "inet_ntop6": "const char *\n * inet_ntop6(src, dst, size)\n *\tconvert IPv6 binary address into presentation (printable) format\n * author:\n *\tPaul Vixie, 1996.",
  "hex_digit_value": "Return the value of CH as a hexadecimal digit, or -1 if it is a\n   different type of character.",
  "inet_pton6": "Convert presentation-level IPv6 address to network order binary\n   form.  Return 1 if SRC is a valid [RFC1884 2.2] address, else 0.\n   This function does not touch DST unless it's returning 1.\n   Author: Paul Vixie, 1996.  Inspired by Mark Andrews.",
  "ns_datetosecs": "%\n * Convert a date in ASCII into the number of seconds since\n * 1 January 1970 (GMT assumed).  Format is yyyymmddhhmmss, all\n * digits required, no spaces allowed.",
  "datepart": "%\n * Parse part of a date.  Set error flag if any error.\n * Don't reset the flag if there is no error.",
  "__libc_ns_makecanon": "Make a canonical copy of domain name SRC in DST.  Behavior:\n      foo -> foo.\n      foo. -> foo.\n      foo.. -> foo.\n      foo\\. -> foo\\..\n      foo\\\\. -> foo\\\\.",
  "ns_name_ntol": "%\n *\tConvert a network strings labels into all lowercase.\n *\n * return:\n *\\li\tNumber of bytes written to buffer, or -1 (with errno set)\n *\n * notes:\n *\\li\tEnforces label and domain length limits.",
  "ns_name_rollback": "%\n * Reset dnptrs so that there are no active references to pointers at or\n * after src.",
  "labellen": "Return the length of the encoded label starting at LP, or -1 for\n   compression references and extended label types.",
  "___ns_name_compress": "Compresses a domain name into wire format, using compression pointers.\n   Returns the number of bytes consumed in DST or -1 (with errno set).\n\n   DNPTRS is an array of pointers to previous compressed names.\n   DNPTRS[0] is a pointer to the beginning of the message.\n\n   The list ends with NULL.  LASTDNPTR is a pointer to the end of the\n   array pointed to by DNPTRS.  Side effect is to update the list of\n   pointers for labels inserted into the message as we compress the\n   name.  If DNPTRS is NULL, we don't try to compress names.  If\n   LASTDNPTR * is NULL, we don't update the list.",
  "printable": "Thinking in noninternationalized US-ASCII (per the DNS spec), is\n   this character visible and not a space when printed?",
  "___ns_name_ntop": "Converts an uncompressed, encoded domain name to printable ASCII as\n   per RFC1035.  Returns the number of bytes written to buffer, or -1\n   (with errno set).  The root is returned as \".\"  All other domains\n   are returned in non absolute form.",
  "mklower": "Thinking in noninternationalized USASCII (per the DNS spec),\n   convert this character to lower case if it's upper case.",
  "dn_find": "Search for the counted-label name in an array of compressed names.\n   Returns the offset from MSG if found, or -1.\n\n   DNPTRS is the pointer to the first name on the list, not the\n   pointer to the start of the message.",
  "___ns_name_pack": "Packs domain name SRC into DST.  Returns size of the compressed\n   name, or -1.\n\n   DNPTRS is an array of pointers to previous compressed names.\n   DNPTRS[0] is a pointer to the beginning of the message. The array\n   ends with NULL.  LASTDNPTR is a pointer to the end of the array\n   pointed to by 'dnptrs'.\n\n   The list of pointers in DNPTRS is updated for labels inserted into\n   the message as we compress the name.  If DNPTRS is NULL, we don't\n   try to compress names. If LASTDNPTR is NULL, we don't update the\n   list.",
  "___ns_name_pton": "Converts an ASCII string into an encoded domain name as per\n   RFC1035.  Returns -1 if it fails, 1 if string was fully qualified,\n   0 is string was not fully qualified.  Enforces label and domain\n   length limits.",
  "___ns_name_skip": "Advances *PTRPTR to skip over the compressed name it points at.\n   Returns 0 on success, -1 (with errno set) on failure.",
  "___ns_name_uncompress": "Expand compressed domain name to presentation format.  Returns the\n   number of bytes read out of `src', or -1 (with errno set).  The\n   root domain is returned as \".\", not \"\".",
  "___ns_name_unpack": "Unpack a domain name from a message, source may be compressed.\n   Returns -1 if it fails, or consumed octets if it succeeds.",
  "ns_get16": "Public.",
  "ns_sprintrr": "%\n *\tConvert an RR to presentation format.\n *\n * return:\n *\\li\tNumber of characters written to buf, or -1 (check errno).",
  "charstr": "%\n * int\n * charstr(rdata, edata, buf, buflen)\n *\tFormat a <character-string> into the presentation buffer.\n * return:\n *\tNumber of rdata octets consumed\n *\t0 for protocol format error\n *\t-1 for output buffer error\n * side effects:\n *\tbuffer is advanced on success.",
  "ascii_toupper": "Convert ASCII letters to upper case.",
  "ns_samedomain": "%\n *\tCheck whether a name belongs to a domain.\n *\n * Inputs:\n *\\li\ta - the domain whose ancestry is being verified\n *\\li\tb - the potential ancestor we're checking against\n *\n * Return:\n *\\li\tboolean - is a at or below b?\n *\n * Notes:\n *\\li\tTrailing dots are first removed from name and domain.\n *\tAlways compare complete subdomains, not only whether the\n *\tdomain name is the trailing string of the given name.\n *\n *\\li\t\"host.foobar.top\" lies in \"foobar.top\" and in \"top\" and in \"\"\n *\tbut NOT in \"bar.top\"",
  "__libc_ns_samename": "Determines whether domain name A is the same as domain name B.\n   Returns -1 on error, 0 if names differ, 1 if names are the\n   same.",
  "ns_format_ttl": "Public.",
  "fmt1": "Private.",
  "__res_iclose": "Close all open sockets.  If FREE_ADDR is true, deallocate any\n   separately allocated name server addresses.",
  "printable_string": "Return true if the string consists of printable ASCII characters\n   only.",
  "binary_hnok": "Return true if DN points to a name consisting only of [0-9a-zA-Z_-]\n   characters.  DN must be in DNS wire format, without\n   compression.",
  "binary_leading_dash": "Return true if the binary domain name has a first labels which\n   starts with '-'.",
  "___res_hnok": "Return 1 if res_hnok is a valid host name.  Labels must only\n   contain [0-9a-zA-Z_-] characters, and the name must not start with\n   a '-'.  The latter is to avoid confusion with program options.",
  "___res_ownok": "Hostname-like (A, MX, WKS) owners can have \"*\" as their first label\n   but must otherwise be as a host name.",
  "___res_mailok": "SOA RNAMEs and RP RNAMEs can have any byte in their first label,\n   but the rest of the name has to look like a host name.",
  "___res_dnok": "Return 1 if DN is a syntactically valid domain name.  Empty names\n   are accepted.",
  "qtype_matches": "Returns true if the question type at P matches EXPECTED, and the\n   class is IN.",
  "__res_handle_no_aaaa": "Handle RES_NOAAAA translation of AAAA queries.  To produce a Name\n   Error (NXDOMAIN) response for domain names that do not exist, it is\n   still necessary to send a query.  Using question type A is a\n   conservative choice.  In the returned answer, it is necessary to\n   switch back the question type to AAAA.",
  "__res_close": "This function belongs to libresolv, which is why it is not included\n   in res-close.c.",
  "fp_resstat": "* Print the current options.",
  "fp_nquery": "* Print the contents of a query.\n * This is intended to be primarily a debugging routine.",
  "p_fqnname": "Return a fully-qualified domain name from a compressed name (with\n   length supplied).",
  "p_type": "* Return a string for the type.",
  "p_class": "* Return a mnemonic for class.",
  "p_rcode": "* Return a string for the rcode.",
  "precsize_ntoa": "takes an XeY precision/size value, returns a string representation.",
  "precsize_aton": "converts ascii size/precision X * 10**Y(cm) to 0xXY.  moves pointer.",
  "latlon2ul": "converts ascii lat/lon to unsigned encoded 32-bit number.  moves pointer.",
  "loc_aton": "converts a zone file representation in a string to an RDATA on-the-wire\n * representation.",
  "loc_ntoa": "takes an on-the-wire LOC RR and formats it in a human readable format.",
  "__p_secstodate": "* Make dates expressed in seconds-since-Jan-1-1970 easy to read.\n * SIG records are required to be printed like this, by the Secure DNS RFC.\n * This is an obsolescent function and does not handle dates outside the\n * signed 32-bit range.",
  "skip_ws": "Skip white space.",
  "skip_string": "Skip until whitespace, comma, end of line, or comment character.",
  "_res_hconf_init": "Initialize hconf datastructure by reading host.conf file and\n   environment variables.",
  "_res_hconf_reorder_addrs": "Reorder addresses returned in a hostent such that the first address\n   is an address on the local subnet, if there is such an address.\n   Otherwise, nothing is changed.\n\n   Note that this function currently only handles IPv4 addresses.",
  "_res_hconf_trim_domain": "If HOSTNAME has a postfix matching any of the trimdomains, trim away\n   that postfix.  Notice that HOSTNAME is modified inplace.  Also, the\n   original code applied all trimdomains in order, meaning that the\n   same domainname could be trimmed multiple times.  I believe this\n   was unintentional.",
  "_res_hconf_trim_domains": "Trim all hostnames/aliases in HP according to the trimdomain list.\n   Notice that HP is modified inplace!",
  "context_hostalias_common": "Common part of res_hostalias and hostalias.",
  "has_preinit_values": "Return true if *PREINIT contains actual preinitialization.",
  "allocate_address_v4": "Allocate a struct sockaddr_in object on the heap, with the\n   specified address and port.",
  "domain_from_hostname": "Try to obtain the domain name from the host name and store it in\n   *RESULT.  Return false on memory allocation failure.  If the domain\n   name cannot be determined for any other reason, write NULL to\n   *RESULT and return true.",
  "res_vinit_1": "Internal helper function for __res_vinit, to aid with resource\n   deallocation and error handling.  Return true on success, false on\n   failure.",
  "__res_vinit": "Set up default settings.  If the /etc/resolv.conf configuration\n   file exist, the values there will have precedence.  Otherwise, the\n   server address is set to INADDR_LOOPBACK and the default domain\n   name comes from gethostname.  The RES_OPTIONS and LOCALDOMAIN\n   environment variables can be used to override some settings.\n   Return 0 if completes successfully, -1 on error.",
  "res_ourserver_p": "author: paul vixie, 29may94",
  "___res_nmkquery": "Form all types of queries.  Returns the size of the result or -1 on\n   error.\n\n   STATP points to an initialized resolver state.  OP is the opcode of\n   the query.  DNAME is the domain.  CLASS and TYPE are the DNS query\n   class and type.  DATA can be NULL; otherwise, it is a pointer to a\n   domain name which is included in the generated packet (if op ==\n   NS_NOTIFY_OP).  BUF must point to the out buffer of BUFLEN bytes.\n\n   DATALEN and NEWRR_IN are currently ignored.",
  "__res_nopt": "Create an OPT resource record.  Return the length of the final\n   packet, or -1 on error.\n\n   STATP must be an initialized resolver state.  N0 is the current\n   number of bytes of the packet (already written to BUF by the\n   aller).  BUF is the packet being constructed.  The array it\n   pointers to must be BUFLEN bytes long.  ANSLEN is the advertised\n   EDNS buffer size (to be included in the OPT resource record).",
  "__libc_res_nameinquery": "Author: paul vixie, 29may94.",
  "__libc_res_queriesmatch": "Author: paul vixie, 29may94.",
  "__res_context_query": "Formulate a normal query, send, and await answer.  Returned answer\n   is placed in supplied buffer ANSWER.  Perform preliminary check of\n   answer, returning success only if no error is indicated and the\n   answer count is nonzero.  Return the size of the response on\n   success, -1 on error.  Error number is left in h_errno.\n\n   Caller must parse answer and determine whether it answers the\n   question.",
  "__res_context_search": "Formulate a normal query, send, and retrieve answer in supplied\n   buffer.  Return the size of the response on success, -1 on error.\n   If enabled, implement search rules until answer or unrecoverable\n   failure is detected.  Error code, if any, is left in h_errno.",
  "__res_context_querydomain": "Perform a call on res_query on the concatenation of name and\n    domain.",
  "context_querydomain_common": "Common part of res_nquerydomain and res_querydomain.",
  "nameserver_offset": "Returns a shift value for the name server index.  Used to implement\n   RES_ROTATE.",
  "mask_ad_bit": "Clear the AD bit unless the trust-ad option was specified in the\n   resolver configuration.",
  "close_and_return_error": "Close the resolver structure, assign zero to *RESPLEN2 if RESPLEN2\n   is not NULL, and return zero.",
  "send_vc": "The send_vc function is responsible for sending a DNS query over TCP\n   to the nameserver numbered NS from the res_state STATP i.e.\n   EXT(statp).nssocks[ns].  The function supports sending both IPv4 and\n   IPv6 queries at the same serially on the same socket.\n\n   Please note that for TCP there is no way to disable sending both\n   queries, unlike UDP, which honours RES_SNGLKUP and RES_SNGLKUPREOP\n   and sends the queries serially and waits for the result after each\n   sent query.  This implementation should be corrected to honour these\n   options.\n\n   Please also note that for TCP we send both queries over the same\n   socket one after another.  This technically violates best practice\n   since the server is allowed to read the first query, respond, and\n   then close the socket (to service another client).  If the server\n   does this, then the remaining second query in the socket data buffer\n   will cause the server to send the client an RST which will arrive\n   asynchronously and the client's OS will likely tear down the socket\n   receive buffer resulting in a potentially short read and lost\n   response data.  This will force the client to retry the query again,\n   and this process may repeat until all servers and connection resets\n   are exhausted and then the query will fail.  It's not known if this\n   happens with any frequency in real DNS server implementations.  This\n   implementation should be corrected to use two sockets by default for\n   parallel queries.\n\n   The query stored in BUF of BUFLEN length is sent first followed by\n   the query stored in BUF2 of BUFLEN2 length.  Queries are sent\n   serially on the same socket.\n\n   Answers to the query are stored firstly in *ANSP up to a max of\n   *ANSSIZP bytes.  If more than *ANSSIZP bytes are needed and ANSCP\n   is non-NULL (to indicate that modifying the answer buffer is allowed)\n   then malloc is used to allocate a new response buffer and ANSCP and\n   ANSP will both point to the new buffer.  If more than *ANSSIZP bytes\n   are needed but ANSCP is NULL, then as much of the response as\n   possible is read into the buffer, but the results will be truncated.\n   When truncation happens because of a small answer buffer the DNS\n   packets header field TC will bet set to 1, indicating a truncated\n   message and the rest of the socket data will be read and discarded.\n\n   Answers to the query are stored secondly in *ANSP2 up to a max of\n   *ANSSIZP2 bytes, with the actual response length stored in\n   *RESPLEN2.  If more than *ANSSIZP bytes are needed and ANSP2\n   is non-NULL (required for a second query) then malloc is used to\n   allocate a new response buffer, *ANSSIZP2 is set to the new buffer\n   size and *ANSP2_MALLOCED is set to 1.\n\n   The ANSP2_MALLOCED argument will eventually be removed as the\n   change in buffer pointer can be used to detect the buffer has\n   changed and that the caller should use free on the new buffer.\n\n   Note that the answers may arrive in any order from the server and\n   therefore the first and second answer buffers may not correspond to\n   the first and second queries.\n\n   It is not supported to call this function with a non-NULL ANSP2\n   but a NULL ANSCP.  Put another way, you can call send_vc with a\n   single unmodifiable buffer or two modifiable buffers, but no other\n   combination is supported.\n\n   It is the caller's responsibility to free the malloc allocated\n   buffers by detecting that the pointers have changed from their\n   original values i.e. *ANSCP or *ANSP2 has changed.\n\n   If errors are encountered then *TERRNO is set to an appropriate\n   errno value and a zero result is returned for a recoverable error,\n   and a less-than zero result is returned for a non-recoverable error.\n\n   If no errors are encountered then *TERRNO is left unmodified and\n   a the length of the first response in bytes is returned.",
  "send_dg": "The send_dg function is responsible for sending a DNS query over UDP\n   to the nameserver numbered NS from the res_state STATP i.e.\n   EXT(statp).nssocks[ns].  The function supports IPv4 and IPv6 queries\n   along with the ability to send the query in parallel for both stacks\n   (default) or serially (RES_SINGLKUP).  It also supports serial lookup\n   with a close and reopen of the socket used to talk to the server\n   (RES_SNGLKUPREOP) to work around broken name servers.\n\n   The query stored in BUF of BUFLEN length is sent first followed by\n   the query stored in BUF2 of BUFLEN2 length.  Queries are sent\n   in parallel (default) or serially (RES_SINGLKUP or RES_SNGLKUPREOP).\n\n   Answers to the query are stored firstly in *ANSP up to a max of\n   *ANSSIZP bytes.  If more than *ANSSIZP bytes are needed and ANSCP\n   is non-NULL (to indicate that modifying the answer buffer is allowed)\n   then malloc is used to allocate a new response buffer and ANSCP and\n   ANSP will both point to the new buffer.  If more than *ANSSIZP bytes\n   are needed but ANSCP is NULL, then as much of the response as\n   possible is read into the buffer, but the results will be truncated.\n   When truncation happens because of a small answer buffer the DNS\n   packets header field TC will bet set to 1, indicating a truncated\n   message, while the rest of the UDP packet is discarded.\n\n   Answers to the query are stored secondly in *ANSP2 up to a max of\n   *ANSSIZP2 bytes, with the actual response length stored in\n   *RESPLEN2.  If more than *ANSSIZP bytes are needed and ANSP2\n   is non-NULL (required for a second query) then malloc is used to\n   allocate a new response buffer, *ANSSIZP2 is set to the new buffer\n   size and *ANSP2_MALLOCED is set to 1.\n\n   The ANSP2_MALLOCED argument will eventually be removed as the\n   change in buffer pointer can be used to detect the buffer has\n   changed and that the caller should use free on the new buffer.\n\n   Note that the answers may arrive in any order from the server and\n   therefore the first and second answer buffers may not correspond to\n   the first and second queries.\n\n   It is not supported to call this function with a non-NULL ANSP2\n   but a NULL ANSCP.  Put another way, you can call send_vc with a\n   single unmodifiable buffer or two modifiable buffers, but no other\n   combination is supported.\n\n   It is the caller's responsibility to free the malloc allocated\n   buffers by detecting that the pointers have changed from their\n   original values i.e. *ANSCP or *ANSP2 has changed.\n\n   If an answer is truncated because of UDP datagram DNS limits then\n   *V_CIRCUIT is set to 1 and the return value non-zero to indicate to\n   the caller to retry with TCP.  The value *GOTSOMEWHERE is set to 1\n   if any progress was made reading a response from the nameserver and\n   is used by the caller to distinguish between ECONNREFUSED and\n   ETIMEDOUT (the latter if *GOTSOMEWHERE is 1).\n\n   If errors are encountered then *TERRNO is set to an appropriate\n   errno value and a zero result is returned for a recoverable error,\n   and a less-than zero result is returned for a non-recoverable error.\n\n   If no errors are encountered then *TERRNO is left unmodified and\n   a the length of the first response in bytes is returned.",
  "get_locked_global": "Ensure that GLOBAL is allocated and lock it.  Return NULL if\n   memory allocation fails.",
  "put_locked_global": "Relinquish the lock acquired by get_locked_global.",
  "conf_decrement": "Decrement the reference counter.  The caller must acquire the lock\n   around the function call.",
  "resolv_conf_get_1": "Internal implementation of __resolv_conf_get, without validation\n   against *RESP.",
  "same_address_v4": "Return true if both IPv4 addresses are equal.",
  "same_address_v6": "Return true if both IPv6 addresses are equal.  This ignores the\n   flow label.",
  "resolv_conf_matches": "Check that *RESP and CONF match.  Used by __resolv_conf_get.",
  "update_from_conf": "Update *RESP from the extended state.",
  "decrement_at_index": "Decrement the configuration object at INDEX and free it if the\n   reference counter reaches 0.  *GLOBAL_COPY must be locked and\n   remains so.",
  "__libc_resolv_conf_freemem": "Deallocate the global data.",
  "replicated_configuration_matches": "The resolv_conf handling will gives us a ctx->conf pointer even if\n   these fields do not match because a mismatch does not cause a loss\n   of state (_res objects can store the full information).  This\n   function checks to ensure that there is a full patch, to prevent\n   overwriting a patched configuration.",
  "maybe_init": "Initialize *RESP if RES_INIT is not yet set in RESP->options, or if\n   res_init in some other thread requested re-initializing.",
  "context_alloc": "Allocate a new context object and initialize it.  The object is put\n   on the current list.",
  "context_free": "Deallocate the context object and all the state within.",
  "context_reuse": "Reuse the current context object.",
  "context_get": "Backing function for the __resolv_context_get family of\n   functions.",
  "response": "For each server, buffer the first query and then send both answers\n   to the second query, reordered if requested.",
  "base64_to_buffer": "Convert a base64-encoded string to its binary representation.",
  "free_test_case": "Deallocate the buffers associated with the test case.",
  "parse_test_case": "Extract the test case information from a test file line.",
  "print_hex": "Format the buffer as a hexadecimal string and write it to standard\n   output.",
  "run_test_case": "Run the test case specified in *T.",
  "run_test_file": "Open the file at PATH, parse the test cases contained in it, and\n   run them.",
  "test_exact_fit": "Check that we can process names which fit into the destination\n   buffer exactly.  See bug 21359.",
  "reference_length": "Reference implementation based on other building blocks.",
  "test_valid": "Check that parsing valid_packet succeeds.",
  "test_compressed_qname": "Check that trying to parse a packet with a compressed QNAME fails.",
  "test_two_questions": "Check that trying to parse a packet with two questions fails.",
  "test_truncated_one_rr": "Truncated packet in the second resource record.",
  "test_truncated_no_rr": "Truncated packet in the first resource record.",
  "test_truncated_before_rr": "Truncated packet before first resource record.",
  "one_char": "Run 255 tests using all the bytes from 1 to 255, surround the byte\n   with the strings PREFIX and SUFFIX, and check that FUNC (named\n   FUNCNAME) accepts only those bytes listed in ACCEPTED.",
  "response_ptr": "Called from response below.  The LSB (first byte) controls what\n   goes into the response, see enum gni_test.",
  "gni_test": "Run one getnameinfo test.  FLAGS is automatically augmented with\n   NI_NUMERICSERV.",
  "gai_tests_with_libidn2": "Tests for getaddrinfo which assume a working libidn2 library.",
  "gni_tests_with_libidn2": "Tests for getnameinfo which assume a working libidn2 library.",
  "gai_tests": "Tests for getaddrinfo.",
  "gni_tests": "Tests for getnameinfo.",
  "test_bug_21295": "Test for bug 21295: getaddrinfo used to discard address information\n   instead of merging it.",
  "test_nodata_nxdomain": "Run tests which do not expect any data.",
  "check_gethostbyaddr": "Perform a gethostbyaddr call and check the result.",
  "check_getnameinfo": "Perform a getnameinfo call and check the result.",
  "put_response": "Extract information from the query, store it in a struct\n   response_data object, and return its index in the\n   response_data_array.",
  "get_response": "Verify the index into the response_data array and return the data\n   at it.",
  "free_response_data": "Deallocate all response data.",
  "decode_address": "Update *DATA with data from ADDRESS of SIZE.  Set the corresponding\n   flag in SHADOW for each byte written.",
  "verify_response_data_payload": "Verify the decoded response data against the flags above.",
  "verify_response_data": "Same as verify_response_data_payload, but use the default\n   payload.",
  "do_res_search": "Call libresolv function OP to look up PROBE_NAME, with an answer\n   buffer of SIZE bytes.  Check that the advertised UDP buffer size is\n   in fact EXPECTED_BUFFER_SIZE.",
  "append_names": "Append the name and aliases to OUT.",
  "append_addresses": "Append the address information to OUT.",
  "check_long_name": "Test for CVE-2016-3075.",
  "check_chroot_working": "Verify that the chroot environment has been set up.",
  "print_option_flag": "If FLAG is set in *OPTIONS, write NAME to FP, and clear it in\n   *OPTIONS.",
  "print_resp": "Write a decoded version of the resolver configuration *RESP to the\n   stream FP.",
  "run_res_init": "Run res_ninit or res_init in a subprocess and dump the parsed\n   resolver state to standard output.",
  "run_res_init_thread_func": "Helper function which calls run_res_init from a thread.",
  "run_res_init_on_thread": "Variant of res_run_init which runs the function on a non-main\n   thread.",
  "test_file_contents": "Run the indicated test case.  This function assumes that the chroot\n   contents has already been set up.",
  "special_test_callback": "Implementation of special tests.",
  "special_test_thread_func": "Helper function which calls special_test_callback from a\n   thread.",
  "run_special_test_on_thread": "Variant of special_test_callback which runs the function on a\n   non-main thread.",
  "special_test": "Perform the requested special test in a subprocess using\n   special_test_callback.",
  "start_dummy_server": "Dummy DNS server.  It ensures that the probe queries sent by\n   gethostbyname and getaddrinfo receive a reply even if the system\n   applies a very strict rate limit to localhost.",
  "sort_res_state": "Order the resolver states by their extended resolver state\n   index.",
  "get_thread_number": "Return a small positive number identifying this thread.",
  "check_have_conf": "Check that the resolver configuration for this thread has an\n   extended resolver configuration.",
  "byname": "Test gethostbyname2_r (if do_2 is false) or gethostbyname2_r with\n   AF_INET (if do_2 is true).",
  "thread_byname": "Test gethostbyname_r.",
  "thread_byname2": "Test gethostbyname2_r with AF_INET.",
  "thread_byname2_af_inet6": "Test gethostbyname2_r with AF_INET6.",
  "gai": "Run getaddrinfo tests for FAMILY.",
  "thread_gai_inet": "Test getaddrinfo with AF_INET.",
  "thread_gai_inet6": "Test getaddrinfo with AF_INET6.",
  "thread_gai_unspec": "Test getaddrinfo with AF_UNSPEC.",
  "parse_qname": "Fills *PARSED based on QNAME.",
  "build_response": "Used to construct a response. The first server responds with an\n   error, the second server succeeds.",
  "test_qname": "Runs a query for QNAME and checks for the expected reply.  See\n   struct parsed_qname for the expected format for QNAME.",
  "rrtype_to_rdata_length": "Return the expected RDATA length for an address record type (A or\n   AAAA).",
  "check_name": "Verify that the name looks like a host name.  There is no point in\n   sending a query which will not produce a usable name in the\n   response.",
  "getanswer_r_store_alias": "Convert the uncompressed, binary domain name CDNAME into its\n   textual representation and add it to the end of ALIASES, allocating\n   space for a copy of the name from ABUF.  Skip adding the name if it\n   is not a valid host name, and return false in that case, otherwise\n   true.",
  "gaih_getanswer_slice": "Parses DNS data found in PACKETLEN bytes at PACKET in struct\n   gaih_addrtuple address tuples.  The new address tuples are linked\n   from **TAILP, with backing store allocated from ABUF, and *TAILP is\n   updated to point where the next tuple pointer should be stored.  If\n   TTLP is not null, *TTLP is updated to reflect the minimum TTL.  If\n   STORE_CANON is true, the canonical name is stored as part of the\n   first address tuple being written.",
  "gaih_getanswer_noaaaa": "Variant of gaih_getanswer without a second (AAAA) response.",
  "__getpriority": "Return the highest priority of any process specified by WHICH and WHO\n   (see above); if WHO is zero, the current process, process group, or user\n   (as specified by WHO) is used.  A lower priority number means higher\n   priority.  Priorities range from PRIO_MIN to PRIO_MAX.",
  "__getrlimit": "Put the soft and hard limits for RESOURCE in *RLIMITS.\n   Returns 0 if successful, -1 if not (and sets errno).",
  "__getrlimit64": "Put the soft and hard limits for RESOURCE in *RLIMITS.\n   Returns 0 if successful, -1 if not (and sets errno).",
  "nice": "Increment the scheduling priority of the calling process by INCR.\n   The superuser may use a negative INCR to decrement the priority.",
  "__setpriority": "Set the priority of all processes specified by WHICH and WHO\n   to PRIO.  Returns 0 on success, -1 on errors.",
  "setrlimit64": "Set the soft and hard limits for RESOURCE to *RLIMITS.\n   Only the super-user can increase hard limits.\n   Return 0 if successful, -1 if not (and sets errno).",
  "__ulimit": "Function depends on CMD:\n   1 = Return the limit on the size of a file, in units of 512 bytes.\n   2 = Set the limit on the size of a file to NEWLIMIT.  Only the\n       super-user can increase the limit.\n   3 = illegal due to shared libraries; normally is\n       (Return the maximum possible address of the data segment.)\n   4 = Return the maximum number of files that the calling process\n       can open.\n   Returns -1 on errors.",
  "vlimit": "Set the soft limit for RESOURCE to be VALUE.\n   Returns 0 for success, -1 for failure.",
  "vtimes_one": "If VT is not NULL, write statistics for WHO into *VT.\n   Return 0 for success, -1 for failure.",
  "__vtimes": "If CURRENT is not NULL, write statistics for the current process into\n   *CURRENT.  If CHILD is not NULL, write statistics for all terminated child\n   processes into *CHILD.  Returns 0 for success, -1 for failure.",
  "__aio_init": "User optimization.",
  "__aio_enqueue_request": "The main function of the async I/O handling.  It enqueues requests\n   and if necessary starts and handles threads.",
  "add_request_to_runlist": "Add newrequest to the runlist. The __abs_prio flag of newrequest must\n   be correctly set to do this. Also, you had better set newrequest's\n   \"running\" flag to \"yes\" before you release your lock or you'll throw an\n   assertion.",
  "__aio_sigqueue": "Return any pending signal or wait for one for the given time.",
  "__aio_suspend": "The conditional is slightly wrong: PTHREAD_IN_LIBC is a stand-in\n   for whether time64 support is needed.",
  "LIO_LISTIO_NEW": "OTHER_SHLIB_COMPAT",
  "mq_close": "Removes the association between message queue descriptor MQDES and its\n   message queue.",
  "mq_getattr": "Query status and attributes of message queue MQDES.",
  "mq_notify": "Register notification upon message arrival to an empty message queue\n   MQDES.",
  "__mq_open": "Establish connection between a process and a message queue NAME and\n   return message queue descriptor or (mqd_t) -1 on error.  OFLAG determines\n   the type of access used.  If O_CREAT is on OFLAG, the third argument is\n   taken as a `mode_t', the mode of the created message queue, and the fourth\n   argument is taken as `struct mq_attr *', pointer to message queue\n   attributes.  If the fourth argument is NULL, default attributes are\n   used.",
  "mq_receive": "Receive the oldest from highest priority messages in message queue\n   MQDES.",
  "mq_send": "Add message pointed by MSG_PTR to message queue MQDES.",
  "mq_setattr": "Set attributes associated with message queue MQDES and if OMQSTAT is\n   not NULL also query its old attributes.",
  "__mq_timedreceive": "Receive the oldest from highest priority messages in message queue\n   MQDES, stop waiting if ABS_TIMEOUT expires.",
  "__mq_timedsend": "Add message pointed by MSG_PTR to message queue MQDES, stop blocking\n   on full message queue if ABS_TIMEOUT expires.",
  "mq_unlink": "Remove message queue named NAME.",
  "__shm_open": "Open shared memory object.",
  "__shm_unlink": "Remove shared memory object.",
  "timer_create": "Create new per-process timer using CLOCK.",
  "timer_delete": "Delete timer TIMERID.",
  "timer_getoverrun": "Get expiration overrun for timer TIMERID.",
  "timer_gettime": "Get current value of timer TIMERID and store it in VALUE.",
  "timer_settime": "Set timer TIMERID to VALUE, returning old value in OVLAUE.",
  "chew_cpu": "This function is intended to rack up both user and system time.",
  "do_timer_create": "Creating timers in another thread should work too.",
  "check_ts": "Check if end is later or equal to start + nsec.",
  "__longjmp": "Jump to the position specified by ENV, causing the\n   setjmp call there to return VAL, or 1 if VAL is 0.",
  "_setjmp": "This implementation in C will not usually work, because the call\n   really needs to be a tail-call so __sigsetjmp saves the state of\n   the caller, not the state of this `setjmp' frame which then\n   immediate unwinds.",
  "setjmp": "This implementation in C will not usually work, because the call\n   really needs to be a tail-call so __sigsetjmp saves the state of\n   the caller, not the state of this `setjmp' frame which then\n   immediate unwinds.",
  "__libc_siglongjmp": "Set the signal mask to the one specified in ENV, and jump\n   to the position specified in ENV, causing the setjmp\n   call there to return VAL, or 1 if VAL is 0.",
  "__libc_sigsetjmp": "Save the current program position in ENV and return 0.",
  "__sigjmp_save": "This function is called by the `sigsetjmp' macro\n   before doing a `__setjmp' on ENV[0].__jmpbuf.\n   Always return zero.",
  "__libc_current_sigrtmin": "Return number of available real-time signal with highest priority.",
  "__kill": "Send signal SIG to process number PID.  If PID is zero,\n   send SIG to all processes in the current process's process group.\n   If PID is < -1, send SIG to all processes in process group - PID.",
  "killpg": "Send SIG to all processes in process group PGRP.\n   If PGRP is zero, send SIG to all processes in\n   the current process's process group.",
  "__libc_sigaction": "If ACT is not NULL, change the action for SIG to *ACT.\n   If OACT is not NULL, put the old action for SIG in *OACT.",
  "raise": "Raise the signal SIG.",
  "__sigaction": "If ACT is not NULL, change the action for SIG to *ACT.\n   If OACT is not NULL, put the old action for SIG in *OACT.",
  "sigaddset": "Add SIGNO to SET.",
  "sigaltstack": "Run signals handlers on the stack specified by SS (if not NULL).\n   If OSS is not NULL, it is filled in with the old signal stack status.",
  "sigandset": "Combine sets LEFT and RIGHT by logical AND and place result in DEST.",
  "__sigblock": "Block signals in MASK, returning the old mask.",
  "sigdelset": "Add SIGNO to SET.",
  "sigemptyset": "Clear all signals from SET.",
  "sigfillset": "Set all signals in SET.",
  "siginterrupt": "If INTERRUPT is nonzero, make signal SIG interrupt system calls\n   (causing them to fail with EINTR); if INTERRUPT is zero, make system\n   calls be restarted after signal SIG.",
  "sigisemptyset": "Test whether SET is empty.",
  "sigismember": "Return 1 if SIGNO is in SET, 0 if not.",
  "signal": "Set the handler for the signal SIG to HANDLER,\n   returning the old handler, or SIG_ERR on error.",
  "sigorset": "Combine sets LEFT and RIGHT by logical OR and place result in DEST.",
  "sigpending": "Change the set of blocked signals to SET,\n   wait until a signal arrives, and restore the set of blocked signals.",
  "__sigprocmask": "Get and/or change the set of blocked signals.",
  "__sigqueue": "Return any pending signal or wait for one for the given time.",
  "sigset": "Set the disposition for SIG.",
  "__sigsetmask": "Set the mask of blocked signals to MASK, returning the old mask.",
  "__sigsuspend": "Change the set of blocked signals to SET,\n   wait until a signal arrives, and restore the set of blocked signals.",
  "__sigvec": "If VEC is non-NULL, set the handler for SIG to the `sv_handler' member\n   of VEC.  The signals in `sv_mask' will be blocked while the handler runs.\n   If the SV_RESETHAND bit is set in `sv_flags', the handler for SIG will be\n   reset to SIG_DFL before `sv_handler' is entered.  If OVEC is non-NULL,\n   it is filled in with the old information for SIG.",
  "__sigwaitinfo": "Return any pending signal or wait for one for the given time.",
  "__sysv_signal": "Set the handler for the signal SIG to HANDLER,\n   returning the old handler, or SIG_ERR on error.",
  "printSigMask": "Print mask of blocked signals for this process",
  "printDisposition": "handler",
  "returnTest1": "printDisposition",
  "returnTest2": "returnTest1",
  "returnTest3": "returnTest2",
  "accept": "Await a connection on socket FD.\n   When a connection arrives, open a new socket to communicate with it,\n   set *ADDRARG (which is *ADDR_LEN bytes long) to the address of the connecting\n   peer and *ADDR_LEN to the address's actual length, and return the\n   new socket's descriptor, or -1 for errors.",
  "__libc_accept4": "Await a connection on socket FD.\n   When a connection arrives, open a new socket to communicate with it,\n   set *ADDRARG (which is *ADDR_LEN bytes long) to the address of the connecting\n   peer and *ADDR_LEN to the address's actual length, and return the\n   new socket's descriptor, or -1 for errors.  The operation can be influenced\n   by the FLAGS parameter.",
  "__connect": "Open a connection on socket FD to peer at ADDR (which LEN bytes long).\n   For connectionless socket types, just set the default address to send to\n   and the only address from which to accept transmissions.\n   Return 0 on success, -1 for errors.",
  "getpeername": "Put the address of the peer connected to socket FD into *ADDR\n   (which is *LEN bytes long), and its actual length into *LEN.",
  "getsockopt": "XXX should be __getsockopt ?",
  "__listen": "Prepare to accept connections on socket FD.\n   N connection requests will be queued before further requests are refused.\n   Returns 0 on success, -1 for errors.",
  "__opensock": "Return a socket of any type.  The socket can be used in subsequent\n   ioctl calls to talk to the kernel.",
  "__recv": "Read N bytes into BUF from socket FD.\n   Returns the number read or -1 for errors.",
  "__recvfrom": "Read N bytes into BUF through socket FD.\n   If ADDR is not NULL, fill in *ADDR_LEN bytes of it with the address of\n   the sender, and store the actual size of the address in *ADDR_LEN.\n   Returns the number of bytes read or -1 for errors.",
  "recvmmsg": "Receive up to VLEN messages as described by VMESSAGES from socket FD.\n   Returns the number of bytes read or -1 for errors.",
  "__recvmsg": "Receive a message as described by MESSAGE from socket FD.\n   Returns the number of bytes read or -1 for errors.",
  "__send": "Send N bytes of BUF to socket FD.  Returns the number sent or -1.",
  "__sendmsg": "Send a message described MESSAGE on socket FD.\n   Returns the number of bytes sent, or -1 for errors.",
  "__sendto": "Send N bytes of BUF on socket FD to peer at address ADDR (which is\n   ADDR_LEN bytes long).  Returns the number sent, or -1 for errors.",
  "shutdown": "XXX should be __shutdown ?",
  "sockatmark": "Determine whether socket is at a out-of-band mark.",
  "socketpair": "Create two new sockets, of type TYPE in domain DOMAIN and using\n   protocol PROTOCOL, which are connected to each other, and put file\n   descriptors for them in FDS[0] and FDS[1].  If PROTOCOL is zero,\n   one will be chosen automatically.  Returns 0 on success, -1 for errors.",
  "is_cloexec": "Return true if the descriptor has the FD_CLOEXEC flag set.",
  "client_connect": "Perform a non-blocking connect to *SERVER_ADDRESS.",
  "r_adddf3": "definitions for functions we are checking against",
  "_fitoa_word": "`unsigned long long int' always has 64 bits.",
  "___asprintf": "VARARGS2",
  "ctermid": "Return the name of the controlling terminal.  If S is not NULL, the\n   name is copied into it (it should be at least L_ctermid bytes\n   long), otherwise we return a pointer to a non-const but read-only\n   string literal, that POSIX states the caller must not modify.",
  "cuserid": "Return the username of the caller.\n   If S is not NULL, it points to a buffer of at least L_cuserid bytes\n   into which the name is copied; otherwise, a static buffer is used.",
  "__dprintf": "VARARGS2",
  "__fprintf": "VARARGS2",
  "__fscanf": "VARARGS2",
  "getw": "Read a word (int) from STREAM.",
  "__grouping_iterator_init_none": "Initializes *IT with no grouping information for a string of length\n   DIGITS, and return false to indicate no grouping.",
  "get_grouping": "Returns the appropriate grouping item in LOC depending on CATEGORY\n   (which must be LC_MONETARY or LC_NUMERIC).",
  "perror": "Print a line on stderr consisting of the text in S, a colon, a space,\n   a message describing the meaning of the contents of `errno' and a newline.\n   If S is NULL or \"\", the colon and space are omitted.",
  "__printf": "VARARGS1",
  "__printf_buffer_as_file_commit": "Commit the data directly written through the stdio stream.",
  "__printf_buffer_as_file_switch_to_buffer": "Pointer the FILE * write buffer into the active printf_buffer\n   area.",
  "__printf_buffer_as_file_overflow": "Only a small subset of the vtable functions is implemented here,\n   following _IO_obstack_jumps.",
  "__printf_buffer_do_flush": "!SHARED",
  "__printf_buffer_to_file_switch": "Switch to the file buffer if possible.  If the file has write_ptr\n   == write_end, use the stage buffer instead.",
  "__printf_fp_buffer_1": "Version that performs grouping (if INFO->group && THOUSANDS_SEP != 0),\n   but not i18n digit translation.\n\n   The output buffer is always multibyte (not wide) at this stage.\n   Wide conversion and i18n digit translation happen later, with a\n   temporary buffer.  To prepare for that, THOUSANDS_SEP_LENGTH is the\n   final length of the thousands separator.",
  "__printf_buffer_flush_fp": "Multibyte buffer-to-buffer flush function with full translation.",
  "__printf_buffer_flush_fphex_to_wide": "Translate to wide characters, rewriting \".\" to the actual decimal\n   point.",
  "printf_size_info": "This is the function used by `vfprintf' to determine number and\n   type of the arguments.",
  "psiginfo": "Print out on stderr a line consisting of the test in S, a colon, a space,\n   a message describing the meaning of the signal number PINFO and a newline.\n   If S is NULL or \"\", the colon and space are omitted.",
  "psignal": "Print out on stderr a line consisting of the test in S, a colon, a space,\n   a message describing the meaning of the signal number SIG and a newline.\n   If S is NULL or \"\", the colon and space are omitted.",
  "putw": "Write the word (int) W to STREAM.",
  "rename": "Rename the file OLD to NEW.",
  "__scanf": "VARARGS1",
  "__snprintf": "VARARGS3",
  "__sprintf": "VARARGS2",
  "__sscanf": "Read formatted input from S, according to the format string FORMAT.",
  "tempnam": "Generate a unique temporary filename using up to five characters of\n   PFX if it is not NULL.  The directory to put this file in is\n   searched for as follows: First the environment variable \"TMPDIR\" is\n   checked.  If it contains the name of a directory, that directory is\n   used.  If not and if DIR is not NULL, that value is checked.  If\n   that fails, P_tmpdir is tried and finally \"/tmp\".  The storage for\n   the filename is allocated by `malloc'.",
  "__path_search": "Path search algorithm, for tmpnam, tmpfile, etc.  If DIR is\n   non-null and exists, uses it; otherwise uses the first of $TMPDIR,\n   P_tmpdir, /tmp that exists.  Copies into TMPL a template suitable\n   for use with mk[s]temp.  Will fail (-1) if DIR is non-null and\n   doesn't exist, none of the searched dirs exists, or there's not\n   enough space in TMPL.",
  "read_data": "Read data from PID's address space, from ADDR for DATA bytes.",
  "tmpfile": "This returns a new stream opened on a temporary file (generated\n   by tmpnam).  The file is opened with mode \"w+b\" (binary read/write).\n   If we couldn't generate a unique filename or the file couldn't\n   be opened, NULL is returned.",
  "tmpnam": "Generate a unique filename in P_tmpdir.\n\n   This function is *not* thread safe!",
  "tmpnam_r": "Generate a unique filename in P_tmpdir.  If S is NULL return NULL.\n   This makes this function thread safe.",
  "do_test_with_buffer": "Check fmemopen with user provided buffer open for write.",
  "do_test_without_buffer": "Check fmemopen without user provided buffer open for write.",
  "do_test_length_zero": "Check fmemopen with a buffer length of zero.",
  "do_test_write_append": "This test check append mode initial position (a/a+) based on POSIX definition\n   (BZ#6544 and BZ#13151).",
  "do_test_write_append_without_null": "This test check append mode initial position (a/a+) based on POSIX definition\n   (BZ#6544 and BZ#13151) for buffer without null byte end.",
  "do_test_read_append": "This test check for initial position and seek value for fmemopen objects\n   opened with append mode.",
  "do_test_read_seek_neg": "This test check for fseek (SEEK_END) using negative offsets (BZ#14292).  The\n   starting position of descriptor is different base on the opening mode.",
  "char_from_index": "Returns a printable ASCII character based on INDEX.",
  "delete_all_files": "Delete all files, preparing a clean slate for the next test.",
  "rename_without_existing_target": "Rename tests where the target does not exist.",
  "make_random_string": "Creates two large, random strings used for truncation testing.\n   After the call, *MBS will be encoded in UTF-8, and *WIDE will\n   contain the same string in the internal UCS-32 encoding.  Both\n   strings are null-terminated.  The array *LENGTH counts the number\n   of multi-byte characters for each prefix string of *WIDE: The first\n   N wide characters of *WIDE correspond the first (*LENGTH)[N] bytes\n   of *MBS.  The caller should deallocate all three arrays using\n   free.",
  "test_mbs_result": "snprintf tests (multi-byte result).",
  "test_wide_result": "swprintf tests (wide string result).",
  "test_mbs_long": "Test with long strings and multi-byte result.",
  "test_wide_long": "Test with long strings and wide string result.",
  "outstring_converted_wide_string": "Write the string SRC to S.  If PREC is non-negative, write at most\n   PREC bytes.  If LEFT is true, perform left justification.",
  "__printf_fp_spec": "Calls __printf_fp or __printf_fphex based on the value of the\n   format specifier INFO->spec.",
  "Xprintf_buffer": "The buffer-based function itself.",
  ":": "!COMPILE_WPRINTF",
  "printf_unknown": "Handle an unknown format specifier.  This prints out a canonicalized\n   representation of the format spec itself.",
  "char_buffer_start": "Returns a pointer to the first CHAR_T object in the buffer.  Only\n   valid if char_buffer_add (BUFFER, CH) has been called and\n   char_buffer_error (BUFFER) is false.",
  "char_buffer_size": "Returns the number of CHAR_T objects in the buffer.  Only valid if\n   char_buffer_error (BUFFER) is false.",
  "char_buffer_rewind": "Reinitializes BUFFER->current and BUFFER->end to cover the entire\n   scratch buffer.",
  "char_buffer_error": "Returns true if a previous call to char_buffer_add (BUFFER, CH)\n   failed.",
  "char_buffer_add_slow": "Slow path for char_buffer_add.",
  "__vprintf": "Write formatted output to stdout according to the\n   format string FORMAT, using the argument list in ARG.",
  "__wprintf_buffer_as_file_commit": "Commit the data directly written through the stdio stream.",
  "__wprintf_buffer_as_file_switch_to_buffer": "Pointer the FILE * write buffer into the active struct __wprintf_buffer\n   area.",
  "__wprintf_buffer_as_file_overflow": "Only a small subset of the vtable functions is implemented here,\n   following _IO_obstack_jumps.",
  "abs": "Return the absolute value of I.",
  "__arc4random_uniform": "Return a uniformly distributed random number less than N.  The algorithm\n   calculates a mask being the lowest power of two bounding the upper bound\n   N, successively queries new random values, and rejects values outside of\n   the request range.\n\n   For reject values, it also tries if the remaining entropy could fit on\n   the asked range after range adjustment.\n\n   The algorithm avoids modulo and divide operations, which might be costly\n   depending on the architecture.",
  "at_quick_exit": "Register FUNC to be executed by `quick_exit'.",
  "atof": "Convert a string to a double.",
  "atoi": "Convert a string to an int.",
  "atol": "Convert a string to a long int.",
  "atoll": "Convert a string to a long long int.",
  "file_accessible": "Return true if FILE's existence can be shown, false (setting errno)\n   otherwise.  Follow symbolic links.",
  "suffix_requires_dir_check": "True if concatenating END as a suffix to a file name means that the\n   code needs to check that the file name is that of a searchable\n   directory, since the canonicalize_filename_mode_stk code won't\n   check this later anyway when it checks an ordinary file name\n   component within END.  END must either be empty, or start with a\n   slash.",
  "dir_check": "Return true if DIR is a searchable dir, false (setting errno) otherwise.\n   DIREND points to the NUL byte at the end of the DIR string.\n   Store garbage into DIREND[0 .. strlen (dir_suffix)].",
  "__realpath": "Return the canonical absolute name of file NAME.  A canonical name\n   does not contain any \".\", \"..\" components nor any repeated file name\n   separators ('/') or symlinks.  All file name components must exist.  If\n   RESOLVED is null, the result is malloc'd; otherwise, if the\n   canonical name is PATH_MAX chars or more, returns null with 'errno'\n   set to ENAMETOOLONG; if the name fits in fewer than PATH_MAX chars,\n   returns the name in RESOLVED.  If the name cannot be resolved and\n   RESOLVED is non-NULL, it contains the name of the first component\n   that cannot be resolved.  If the name can be resolved, RESOLVED\n   holds the same value as the value returned.",
  "mpn_cmp": "Compare OP1_PTR/OP1_SIZE with OP2_PTR/OP2_SIZE.\n   There are no restrictions on the relative sizes of\n   the two arguments.\n   Return 1 if OP1 > OP2, 0 if they are equal, and -1 if OP1 < OP2.",
  "__cxa_at_quick_exit": "Register a function to be called by quick_exit.",
  "__cxa_atexit": "Register a function to be called by exit or when a shared library\n   is unloaded.  This function is only called from code generated by\n   the C++ compiler.",
  "__new_exitfn": "Must be called with __exit_funcs_lock held.",
  "__cxa_finalize": "If D is non-NULL, call all functions registered with `__cxa_atexit'\n   with the same dso handle.  Otherwise, if D is NULL, call all of the\n   registered handlers.",
  "__cxa_thread_atexit_impl": "Register a destructor for TLS variables declared with the 'thread_local'\n   keyword.  This function is only called from code generated by the C++\n   compiler.  FUNC is the destructor function and OBJ is the object to be\n   passed to the destructor.  DSO_SYMBOL is the __dso_handle symbol that each\n   DSO has at a unique address in its map, added from crtbegin.o during the\n   linking phase.",
  "__call_tls_dtors": "Call the destructors.  This is called either when a thread returns from the\n   initial function or when the process exits via the exit function.",
  "__mpn_extract_double": "Convert a `double' in IEEE754 standard double-precision format to a\n   multi-precision integer representing the significand scaled up by its\n   number of bits (52 for double) and an integral power of two (MPN frexp).",
  "div": "Return the `div_t' representation of NUMER over DENOM.",
  "mpn_divmod_1": "FIXME: We should be using invert_limb (or invert_normalized_limb)\n   here (not udiv_qrnnd).",
  "mpn_divrem": "Divide num (NP/NSIZE) by den (DP/DSIZE) and write\n   the NSIZE-DSIZE least significant quotient limbs at QP\n   and the DSIZE long remainder at NP.  If QEXTRA_LIMBS is\n   non-zero, generate that many fraction bits and append them after the\n   other quotient limbs.\n   Return the most significant limb of the quotient, this is always 0 or 1.\n\n   Preconditions:\n   0. NSIZE >= DSIZE.\n   1. The most significant bit of the divisor must be set.\n   2. QP must either not overlap with the input operands at all, or\n      QP + DSIZE >= NP must hold true.  (This means that it's\n      possible to put the quotient in the high part of NUM, right after the\n      remainder in NUM.\n   3. NSIZE >= DSIZE, even if QEXTRA_LIMBS is non-zero.",
  "__run_exit_handlers": "Call all functions registered with `atexit' and `on_exit',\n   in the reverse of the order in which they were registered\n   perform stdio cleanup, and terminate program execution with STATUS.",
  "internal_addseverity": "Add the new entry to the list.",
  "__addseverity": "Add new severity level or remove old one.",
  "getentropy": "Write LENGTH bytes of randomness starting at BUFFER.  Return 0 on\n   success and -1 on failure.",
  "__getrandom": "Write up to LENGTH bytes of randomness starting at BUFFER.\n   Return the number of bytes written, or -1 on error.",
  "getsubopt": "Parse comma separated suboption from *OPTIONP and match against\n   strings in TOKENS.  If found return index and set *VALUEP to\n   optional value introduced by an equal sign.  If the suboption is\n   not part of TOKENS return in *VALUEP beginning of unknown\n   suboption.  On exit *OPTIONP is set to the beginning of the next\n   token or at the terminating NUL character.",
  "labs": "Return the absolute value of I.",
  "ldiv": "Return the `ldiv_t' representation of NUMER over DENOM.",
  "llabs": "Return the absolute value of I.",
  "lldiv": "Return the `lldiv_t' representation of NUMER over DENOM.",
  "mpn_lshift": "Shift U (pointed to by UP and USIZE digits long) CNT bits to the left\n   and store the USIZE least significant digits of the result at WP.\n   Return the bits shifted out from the most significant digit.\n\n   Argument constraints:\n   1. 0 < CNT < BITS_PER_MP_LIMB\n   2. If the result is to be written over the input, WP must be >= UP.",
  "mblen": "Return the length of the multibyte character (if there is one)\n   at S which is no longer than N characters.\n   The ISO C standard says that the `mblen' function must not change\n   the state of the `mbtowc' function.",
  "mbstowcs": "Convert the string of multibyte characters in S to `wchar_t's in\n   PWCS, writing no more than N.  Return the number written,\n   or (size_t) -1 if an invalid multibyte character is encountered.",
  "mbtowc": "Convert the multibyte character at S, which is no longer\n   than N characters, to its `wchar_t' representation, placing\n   this n *PWC and returning its length.\n\n   Attention: this function should NEVER be intentionally used.\n   The interface is completely stupid.  The state is shared between\n   all conversion functions.  You should use instead the restartable\n   version `mbrtowc'.",
  "mpn_mod_1": "FIXME: We should be using invert_limb (or invert_normalized_limb)\n   here (not udiv_qrnnd).",
  "__mpn_construct_double": "Convert a multi-precision integer of the needed number of bits (53 for\n   double) and an integral power of two to a `double' in IEEE754 double-\n   precision format.",
  "__mpn_construct_float": "Convert a multi-precision integer of the needed number of bits (24 for\n   float) and an integral power of two to a `float' in IEEE754 single-\n   precision format.",
  "impn_mul_n_basecase": "Handle simple cases with traditional multiplication.\n\n   This is the most critical code of multiplication.  All multiplies rely\n   on this, both small and huge.  Small ones arrive here immediately.  Huge\n   ones arrive here as this is the base case for Karatsuba's recursive\n   algorithm below.",
  "mpn_mul_n": "This should be made into an inline function in gmp.h.",
  "__on_exit": "Register a function to be called by exit.",
  "putenv": "Put STRING, which is of the form \"NAME=VALUE\", in the environment.",
  "is_aligned": "If this function returns true, elements can be safely copied using word\n   loads and stores.  Otherwise, it might not be safe.  BASE (as an integer)\n   must be a multiple of the word alignment.  SIZE must be a multiple of\n   WORDSIZE.  Since WORDSIZE must be a multiple of the word alignment, and\n   WORDSIZE is a power of two on all supported platforms, this function for\n   speed merely checks that BASE and SIZE are both multiples of the word\n   size.",
  "do_swap": "Replace the indirect call with a serie of if statements.  It should help\n   the branch predictor.",
  "siftdown": "Establish the heap condition at index K, that is, the key at K will\n   not be less than either of its children, at 2 * K + 1 and 2 * K + 2\n   (if they exist).  N is the last valid index.",
  "heapify": "Establish the heap condition for the indices 0 to N (inclusive).",
  "heapsort_r": "A non-recursive heapsort, used on introsort implementation as a\n   fallback routine with worst-case performance of O(nlog n) and\n   worst-case space complexity of O(1).  It sorts the array starting\n   at BASE and ending at END (inclusive), with each element of SIZE\n   bytes.  The SWAP_TYPE is the callback function used to swap\n   elements, and CMP is the function used to compare elements.",
  "__qsort_r": "Order size using quicksort.  This implementation incorporates\n   four optimizations discussed in Sedgewick:\n\n   1. Non-recursive, using an explicit stack of pointer that store the\n      next array partition to sort.  To save time, this maximum amount\n      of space required to store an array of SIZE_MAX is allocated on the\n      stack.  Assuming a 32-bit (64 bit) integer for size_t, this needs\n      only 32 * sizeof(stack_node) == 256 bytes (for 64 bit: 1024 bytes).\n      Pretty cheap, actually.\n\n   2. Chose the pivot element using a median-of-three decision tree.\n      This reduces the probability of selecting a bad pivot value and\n      eliminates certain extraneous comparisons.\n\n   3. Only quicksorts TOTAL_ELEMS / MAX_THRESH partitions, leaving\n      insertion sort to order the MAX_THRESH items within each partition.\n      This is a big win, since insertion sort is faster for small, mostly\n      sorted array segments.\n\n   4. The larger of the two sub-partitions is always pushed onto the\n      stack first, with the algorithm then concentrating on the\n      smaller partition.  This *guarantees* no more than log (total_elems)\n      stack size is needed (actually O(1) in this case)!",
  "rand": "Return a random integer between 0 and RAND_MAX.",
  "rand_r": "This algorithm is mentioned in the ISO C standard, here extended\n   for 32 bits.",
  "__srandom": "Initialize the random number generator based on the given seed.  If the\n   type is the trivial no-state-information type, just remember the seed.\n   Otherwise, initializes state[] based on the given \"seed\" via a linear\n   congruential generator.  Then, the pointers are set to known locations\n   that are exactly rand_sep places apart.  Lastly, it cycles the state\n   information a given number of times to get rid of any initial dependencies\n   introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]\n   for default usage relies on values produced by this routine.",
  "__initstate": "Initialize the state information in the given array of N bytes for\n   future random number generation.  Based on the number of bytes we\n   are given, and the break values for the different R.N.G.'s, we choose\n   the best (largest) one we can and set things up for it.  srandom is\n   then called to initialize the state information.  Note that on return\n   from srandom, we set state[-1] to be the type multiplexed with the current\n   value of the rear pointer; this is so successive calls to initstate won't\n   lose this information and will be able to restart with setstate.\n   Note: The first thing we do is save the current state, if any, just like\n   setstate so that it doesn't matter when initstate is called.\n   Returns a pointer to the old state.",
  "__setstate": "Restore the state from the given state array.\n   Note: It is important that we also remember the locations of the pointers\n   in the current state information, and restore the locations of the pointers\n   from the old state information.  This is done by multiplexing the pointer\n   location into the zeroth word of the state information. Note that due\n   to the order in which things are done, it is OK to call setstate with the\n   same state as the current state\n   Returns a pointer to the old state information.",
  "__random": "If we are using the trivial TYPE_0 R.N.G., just do the old linear\n   congruential bit.  Otherwise, we do our fancy trinomial stuff, which is the\n   same in all the other cases due to all the global variables that have been\n   set up.  The basic operation is to add the number at the rear pointer into\n   the one at the front pointer.  Then both pointers are advanced to the next\n   location cyclically in the table.  The value returned is the sum generated,\n   reduced to 31 bits by throwing away the \"least random\" low bit.\n   Note: The code takes advantage of the fact that both the front and\n   rear pointers can't wrap on the same call by not testing the rear\n   pointer if the front one has wrapped.  Returns a 31-bit random number.",
  "__srandom_r": "Initialize the random number generator based on the given seed.  If the\n   type is the trivial no-state-information type, just remember the seed.\n   Otherwise, initializes state[] based on the given \"seed\" via a linear\n   congruential generator.  Then, the pointers are set to known locations\n   that are exactly rand_sep places apart.  Lastly, it cycles the state\n   information a given number of times to get rid of any initial dependencies\n   introduced by the L.C.R.N.G.  Note that the initialization of randtbl[]\n   for default usage relies on values produced by this routine.",
  "__initstate_r": "Initialize the state information in the given array of N bytes for\n   future random number generation.  Based on the number of bytes we\n   are given, and the break values for the different R.N.G.'s, we choose\n   the best (largest) one we can and set things up for it.  srandom is\n   then called to initialize the state information.  Note that on return\n   from srandom, we set state[-1] to be the type multiplexed with the current\n   value of the rear pointer; this is so successive calls to initstate won't\n   lose this information and will be able to restart with setstate.\n   Note: The first thing we do is save the current state, if any, just like\n   setstate so that it doesn't matter when initstate is called.\n   Returns 0 on success, non-zero on failure.",
  "__setstate_r": "Restore the state from the given state array.\n   Note: It is important that we also remember the locations of the pointers\n   in the current state information, and restore the locations of the pointers\n   from the old state information.  This is done by multiplexing the pointer\n   location into the zeroth word of the state information. Note that due\n   to the order in which things are done, it is OK to call setstate with the\n   same state as the current state\n   Returns 0 on success, non-zero on failure.",
  "__random_r": "If we are using the trivial TYPE_0 R.N.G., just do the old linear\n   congruential bit.  Otherwise, we do our fancy trinomial stuff, which is the\n   same in all the other cases due to all the global variables that have been\n   set up.  The basic operation is to add the number at the rear pointer into\n   the one at the front pointer.  Then both pointers are advanced to the next\n   location cyclically in the table.  The value returned is the sum generated,\n   reduced to 31 bits by throwing away the \"least random\" low bit.\n   Note: The code takes advantage of the fact that both the front and\n   rear pointers can't wrap on the same call by not testing the rear\n   pointer if the front one has wrapped.  Returns a 31-bit random number.",
  "mpn_rshift": "Shift U (pointed to by UP and USIZE limbs long) CNT bits to the right\n   and store the USIZE least significant limbs of the result at WP.\n   The bits shifted out to the right are returned.\n\n   Argument constraints:\n   1. 0 < CNT < BITS_PER_MP_LIMB\n   2. If the result is to be written over the input, WP must be <= UP.",
  "__libc_secure_getenv": "Some programs and especially the libc itself have to be careful\n   what values to accept from the environment.  This special version\n   checks for SUID or SGID first before doing any work.",
  "__add_to_environ": "This function is used by `setenv' and `putenv'.  The difference between\n   the two functions is that for the former must create a new string which\n   is then placed in the environment, while the argument of `putenv'\n   must be used directly.  This is all complicated by the fact that we try\n   to reuse values once generated for a `setenv' call since we can never\n   free the strings.",
  "clearenv": "The `clearenv' was planned to be added to POSIX.1 but probably\n   never made it.  Nevertheless the POSIX.9 standard (POSIX bindings\n   for Fortran 77) requires this function.",
  "__vstrfmon_l_buffer": "We have to overcome some problems with this implementation.  On the\n   one hand the strfmon() function is specified in XPG4 and of course\n   it has to follow this.  But on the other hand POSIX.2 specifies\n   some information in the LC_MONETARY category which should be used,\n   too.  Some of the information contradicts the information which can\n   be specified in format string.",
  "overflow_value": "Set errno and return an overflowing value with sign specified by\n   NEGATIVE.",
  "underflow_value": "Set errno and return an underflowing value with sign specified by\n   NEGATIVE.",
  "round_and_return": "Return a floating point number of the needed type according to the given\n   multi-precision number after possible rounding.",
  "str_to_mpn": "Read a multi-precision integer starting at STR with exactly DIGCNT digits\n   into N.  Return the size of the number limbs in NSIZE at the first\n   character od the string that is not part of the integer as the function\n   value.  If the EXPONENT is small enough to be taken as an additional\n   factor for the resulting number (see code) multiply by it.",
  "STRTOD_NAN": "If STR starts with an optional n-char-sequence as defined by ISO C\n   (a sequence of ASCII letters, digits and underscores), followed by\n   ENDC, return a NaN whose payload is set based on STR.  Otherwise,\n   return a default NAN.  If ENDPTR is not NULL, set *ENDPTR to point\n   to the character after the initial n-char-sequence.",
  "index_compare": "Used to sort an array of struct index values.",
  "generate_arc4random_uniform_257": "Test adapter for arc4random_uniform with argument 257.  This means\n   that byte 0 happens more often, but we do not perform such a\n   statistical check, so the test will still pass",
  "compare_blob": "Sort blob elements by length first, then by comparing the data\n   member.",
  "copy_result_to_global": "Copy data to the global result, with locking.",
  "get_one_blob_thread": "Call arc4random_buf to fill one blob with 16 bytes.",
  "fork_thread_subprocess": "Invoked from fork_thread to actually obtain randomness data.",
  "fork_thread": "Continuously fork subprocesses to obtain a little bit of\n   randomness.",
  "run_outer_threads": "Launch the outer threads and wait for their termination.",
  "_exit_with_flush": "Helper: flush stdout and _exit.",
  "test_length": "Test getrandom with a single buffer length.  NB: The passed-in\n   buffer must have room for four extra bytes after the specified\n   length, which are used to test that getrandom leaves those bytes\n   unchanged.",
  "getrandom_full": "Call getrandom repeatedly to fill the buffer.",
  "check_align": "Check that ADDRESS is aligned to ALIGNMENT bytes, behind a compiler\n   barrier.",
  "check_align_int": "Various alignment checking functions.",
  "check_alignments": "Call all the alignment checking functions.",
  "cf": "It is intended that this function does nothing.",
  "arr": "Return the index of BASE as interpreted as an array of elements\n   of size SIZE.",
  "uint8_t_cmp": "Functions used to check qsort.",
  "qsort_r_ref": "Simple insertion sort to use as reference sort.",
  "check_array": "Check if ARRAY of total NMEMB element of size SIZE is sorted\n   based on CMPFUNC.",
  "heapsort_wrapper": "Wrapper around heapsort_r that set ups the required variables.",
  "check_combinations": "Enumerate all possible combinations of LENGTH elements.",
  "create_permutation": "Return a pointer to the adversarial permutation of length N.",
  "compare_counter": "Callback function for qsort which counts the number of invocations\n   in *CLOSURE.",
  "count_comparisons": "Count the comparisons required for an adversarial permutation of\n   length N.",
  "check_one_n": "Check the scaling factor for one adversarial permutation of length\n   N, and report some statistics.",
  "invalid_compare_1": "Invalid comparison function that always returns -1.",
  "invalid_compare_2": "Invalid comparison function that always returns 1.",
  "init_loc": "Set the global locale to GLOBAL_NAME, and the locale referenced by\n   the loc variable above to LOCAL_NAME.",
  "expect_underflow": "Return whether to expect underflow from a particular testcase, in a\n   given rounding mode.",
  "A_dtor": "We only care about the destructor.",
  "is_loaded": "Walk through the map in the _r_debug structure to see if our lib is still\n   loaded.",
  "reg_dtor_and_close": "Accept a valid handle returned by DLOPEN, load the reg_dtor symbol to\n   register a destructor and then call dlclose on the handle.  The dlclose\n   should not unload the DSO since the destructor has not been called yet.",
  "wcstombs": "Convert the `wchar_t' string in PWCS to a multibyte character string\n   in S, writing no more than N characters.  Return the number of bytes\n   written, or (size_t) -1 if an invalid `wchar_t' was found.",
  "wctomb": "Convert WCHAR into its multibyte character representation,\n   putting this in S and returning its length.\n\n   Attention: this function should NEVER be intentionally used.\n   The interface is completely stupid.  The state is shared between\n   all conversion functions.  You should use instead the restartable\n   version `wcrtomb'.",
  "__argz_append": "Add BUF, of length BUF_LEN to the argz vector in ARGZ & ARGZ_LEN.",
  "__argz_add": "Add STR to the argz vector in ARGZ & ARGZ_LEN.  This should be moved into\n   argz.c in libshouldbelibc.",
  "__argz_count": "Returns the number of strings in ARGZ.",
  "__argz_create": "Make a '\\0' separated arg vector from a unix argv vector, returning it in\n   ARGZ, and the total length in LEN.  If a memory allocation error occurs,\n   ENOMEM is returned, otherwise 0.",
  "argz_delete": "Delete ENTRY from ARGZ & ARGZ_LEN, if any.",
  "__argz_extract": "Puts pointers to each string in ARGZ, plus a terminating 0 element, into\n   ARGV, which must be large enough to hold them all.",
  "__argz_insert": "Insert ENTRY into ARGZ & ARGZ_LEN before BEFORE, which should be an\n   existing entry in ARGZ; if BEFORE is NULL, ENTRY is appended to the end.\n   Since ARGZ's first entry is the same as ARGZ, argz_insert (ARGZ, ARGZ_LEN,\n   ARGZ, ENTRY) will insert ENTRY at the beginning of ARGZ.  If BEFORE is not\n   in ARGZ, EINVAL is returned, else if memory can't be allocated for the new\n   ARGZ, ENOMEM is returned, else 0.",
  "str_append": "Append BUF, of length BUF_LEN to *TO, of length *TO_LEN, reallocating and\n   updating *TO & *TO_LEN appropriately.  If an allocation error occurs,\n   *TO's old value is freed, and *TO is set to 0.",
  "__argz_replace": "Replace any occurrences of the string STR in ARGZ with WITH, reallocating\n   ARGZ as necessary.  If REPLACE_COUNT is non-zero, *REPLACE_COUNT will be\n   incremented by number of replacements performed.",
  "__argz_stringify": "Make '\\0' separated arg vector ARGZ printable by converting all the '\\0's\n   except the last into the character SEP.",
  "test_cs_CZ": "An incorrect strcoll optimization resulted in incorrect\n   results from strcoll for cs_CZ and da_DK.",
  "__bzero": "Set N bytes of S to 0.",
  "envz_entry": "Returns a pointer to the entry in ENVZ for NAME, or 0 if there is none.\n   If NAME contains the separator character, only the portion before it is\n   used in the comparison.",
  "envz_remove": "Remove the entry for NAME from ENVZ & ENVZ_LEN, if any.",
  "envz_merge": "Adds each entry in ENVZ2 to ENVZ & ENVZ_LEN, as if with envz_add().  If\n   OVERRIDE is true, then values in ENVZ2 will supersede those with the same\n   name in ENV, otherwise not.",
  "envz_strip": "Remove null entries.",
  "explicit_bzero": "Set LEN bytes of S to 0.  The compiler will not delete a call to\n   this function, even if S is dead after the call.",
  "__memccpy": "Copy no more than N bytes of SRC to DEST, stopping when C is found.\n   Return the position in DEST one byte past where C was copied, or\n   NULL if C was not found in the first N bytes of SRC.",
  "__memchr": "Search no more than N bytes of S for C.",
  "memcmp_bytes": "memcmp_bytes -- Compare A and B bytewise in the byte order of the machine.\n   A and B are known to be different.\n   This is needed only on little-endian machines.",
  "memcmp_common_alignment": "memcmp_common_alignment -- Compare blocks at SRCP1 and SRCP2 with LEN `op_t'\n   objects (not LEN bytes!).  Both SRCP1 and SRCP2 should be aligned for\n   memory operations on `op_t's.",
  "memcmp_not_common_alignment": "memcmp_not_common_alignment -- Compare blocks at SRCP1 and SRCP2 with LEN\n   `op_t' objects (not LEN bytes!).  SRCP2 should be aligned for memory\n   operations on `op_t', but SRCP1 *should be unaligned*.",
  "__memmem": "Fast memmem algorithm with guaranteed linear-time performance.\n   Small needles up to size 2 use a dedicated linear search.  Longer needles\n   up to size 256 use a novel modified Horspool algorithm.  It hashes pairs\n   of characters to quickly skip past mismatches.  The main search loop only\n   exits if the last 2 characters match, avoiding unnecessary calls to memcmp\n   and allowing for a larger skip if there is no match.  A self-adapting\n   filtering check is used to quickly detect mismatches in long needles.\n   By limiting the needle length to 256, the shift table can be reduced to 8\n   bits per entry, lowering preprocessing overhead and minimizing cache effects.\n   The limit also implies worst-case performance is linear.\n   Needles larger than 256 characters use the linear-time Two-Way algorithm.",
  "RAWMEMCHR": "Find the first occurrence of C in S.",
  "STPCPY": "Copy SRC to DEST, returning the address of the terminating '\\0' in DEST.",
  "STPNCPY": "Copy no more than N characters of SRC to DEST, returning the address of\n   the terminating '\\0' in DEST, if any, or else DEST + N.",
  "__strcasecmp": "Compare S1 and S2, ignoring case, returning less than, equal to or\n   greater than zero if S1 is lexicographically less than,\n   equal to or greater than S2.",
  "STRCASESTR": "Find the first occurrence of NEEDLE in HAYSTACK, using\n   case-insensitive comparison.  This function gives unspecified\n   results in multibyte locales.",
  "STRCAT": "Append SRC on the end of DEST.",
  "strchr": "Find the first occurrence of C in S.",
  "__strchrnul": "Find the first occurrence of C in S or the final NUL byte.",
  "strcmp_aligned_loop": "Aligned loop: if a difference is found, exit to compare the bytes.  Else\n   if a zero is found we have equal strings.",
  "strcmp_unaligned_loop": "Unaligned loop: align the first partial of P2, with 0xff for the rest of\n   the bytes so that we can also apply the has_zero test to see if we have\n   already reached EOS.  If we have, then we can simply fall through to the\n   final comparison.",
  "strcmp": "Compare S1 and S2, returning less than, equal to or\n   greater than zero if S1 is lexicographically less than,\n   equal to or greater than S2.",
  "get_next_seq": "Get next sequence.  Traverse the string as required.",
  "do_compare": "Compare two sequences.",
  "STRCPY": "Copy SRC to DEST.",
  "__strdup": "Duplicate S, returning an identical malloc'd string.",
  "__strerror_l": "Return a string describing the errno code in ERRNUM.",
  "__old_strtok_r_1c": "These functions were removed from string.h in glibc 2.25.",
  "__old_strcspn_c1": "These functions were removed from string.h in glibc 2.24.",
  "__strlen": "Return the length of the null-terminated string STR.  Scan for\n   the null terminator quickly by testing four bytes at a time.",
  "__strncasecmp": "Compare no more than N characters of S1 and S2,\n   ignoring case, returning less than, equal to or\n   greater than zero if S1 is lexicographically less\n   than, equal to or greater than S2.",
  "strncmp_aligned_loop": "Aligned loop: if a difference is found, exit to compare the bytes.  Else\n   if a zero is found we have equal strings.",
  "strncmp_unaligned_loop": "Unaligned loop: align the first partial of P2, with 0xff for the rest of\n   the bytes so that we can also apply the has_zero test to see if we have\n   already reached EOS.  If we have, then we can simply fall through to the\n   final comparison.",
  "STRNCMP": "Compare no more than N characters of S1 and S2,\n   returning less than, equal to or greater than zero\n   if S1 is lexicographically less than, equal to or\n   greater than S2.",
  "STRPBRK": "Find the first occurrence in S of any character in ACCEPT.",
  "STRRCHR": "Find the last occurrence of C in S.",
  "strsignal": "Return a string describing the meaning of the signal number SIGNUM.",
  "STRSTR": "Fast strstr algorithm with guaranteed linear-time performance.\n   Small needles up to size 3 use a dedicated linear search.  Longer needles\n   up to size 256 use a novel modified Horspool algorithm.  It hashes pairs\n   of characters to quickly skip past mismatches.  The main search loop only\n   exits if the last 2 characters match, avoiding unnecessary calls to memcmp\n   and allowing for a larger skip if there is no match.  A self-adapting\n   filtering check is used to quickly detect mismatches in long needles.\n   By limiting the needle length to 256, the shift table can be reduced to 8\n   bits per entry, lowering preprocessing overhead and minimizing cache effects.\n   The limit also implies worst-case performance is linear.\n   Needles larger than 256 characters use the linear-time Two-Way algorithm.",
  "strtok": "Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the last string strtok() was called with is\n   used.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tx = strtok(s, \"-\");\t\t// x = \"abc\"\n\tx = strtok(NULL, \"-=\");\t\t// x = \"def\"\n\tx = strtok(NULL, \"=\");\t\t// x = NULL\n\t\t// s = \"abc\\0=-def\\0\"",
  "__strtok_r": "Parse S into tokens separated by characters in DELIM.\n   If S is NULL, the saved pointer in SAVE_PTR is used as\n   the next starting point.  For example:\n\tchar s[] = \"-abc-=-def\";\n\tchar *sp;\n\tx = strtok_r(s, \"-\", &sp);\t// x = \"abc\", sp = \"=-def\"\n\tx = strtok_r(NULL, \"-=\", &sp);\t// x = \"def\", sp = NULL\n\tx = strtok_r(NULL, \"=\", &sp);\t// x = NULL\n\t\t// s = \"abc\\0-def\\0\"",
  "__strverscmp": "Compare S1 and S2 as strings holding indices/version numbers,\n   returning less than, equal to or greater than zero if S1 is less than,\n   equal to or greater than S2 (for more info, see the texinfo doc).",
  "utf8_encode": "We need UTF-8 encoding of numbers.",
  "do_xfrm": "Do the transformation.",
  "do_xfrm_cached": "Do the transformation using weight-index and rule cache.",
  "simple_memccpy": "Naive implementation to verify results.",
  "simple_memmem": "Naive implementation to verify results.",
  "simple_bcopy": "Naive implementation to verify results.",
  "simple_memmove": "Naive implementation to verify results.",
  "simple_mempcpy": "Naive implementation to verify results.",
  "simple_memrchr": "Naive implementation to verify results.",
  "simple_strcasecmp": "Naive implementation to verify results.",
  "simple_strcasestr": "Naive implementation to verify results.",
  "SIMPLE_STRCAT": "Naive implementation to verify results.",
  "simple_wcscmp": "Avoid using subtraction since possible overflow",
  "simple_strcmp": "Strcmp uses unsigned semantics for comparison.",
  "*malloc": "malloc is allowed to change errno to a value different than 0, even when\n   there is no actual error.  This happens for example when the memory\n   allocation through sbrk fails.  Simulate this by interposing our own\n   malloc implementation which sets errno to ENOMEM and calls the original\n   malloc.",
  "simple_strncasecmp": "Naive implementation to verify results.",
  "bz12205": "Regression test for BZ #12205",
  "bz14195": "Regression test for BZ #14195",
  "SIMPLE_STRNCAT": "Naive implementation to verify results.",
  "simple_wcsncmp": "Wcsncmp uses signed semantics for comparison, not unsigned.\n   Avoid using subtraction since possible overflow",
  "simple_strncmp": "Strncmp uses unsigned semantics for comparison.",
  "SIMPLE_STRNCPY": "Naive implementation to verify results.",
  "do_page_2_tests": "Tests meant to unveil fail on implementations that access bytes\n   beyond the maximum length.",
  "SIMPLE_STRPBRK": "Naive implementation to verify results.",
  "SIMPLE_STRSPN": "Naive implementation to verify results.",
  "simple_strstr": "Naive implementation to verify results.",
  "test_strerror": "Callbacks for the actual tests.  Use fork to run both tests with a\n   clean state.",
  "strncmp_no_terminator": "Wrappers for strncmp and strncasecmp which determine the maximum\n   string length in some, either based on the input string length, or\n   using fixed constants.",
  "expected_value": "Compute the expected byte at the given index.  This is used to\n   produce a non-repeating pattern.",
  "check_one_index": "Check ACTUAL == EXPECTED.  Use INDEX for error reporting.  Exit the\n   process after too many errors.",
  "SIMPLE_STRLCAT": "Naive implementation to verify results.",
  "SIMPLE_STRLCPY": "Naive implementation to verify results.",
  "__xpg_strerror_r": "Fill buf with a string describing the errno code in ERRNUM.",
  "/* ckey       - optional conversation key to use */": "* Create the client des authentication object",
  "authdes_nextverf": "ARGSUSED",
  "authdes_marshal": "* 2. Marshal",
  "authdes_validate": "* 3. Validate",
  "authdes_refresh": "* 4. Refresh",
  "authdes_destroy": "* 5. Destroy",
  "synchronize": "* Synchronize with the server at the given address, that is,\n * adjust timep to reflect the delta between our clocks",
  "authunix_create": "* Create a unix style authenticator.\n * Returns an auth handle with the given stuff in it.",
  "authunix_create_default": "* Returns an auth handle with parameters determined by doing lots of\n * syscalls.",
  "marshal_new_auth": "* Marshals (pre-serializes) an auth struct.\n * sets private data, au_marshed and au_mpos",
  "xdr_authunix_parms": "* XDR for unix authentication parameters.\n * Unfortunately, none of these can be declared const.",
  "clnt_create": "* Generic client creation: takes (hostname, program-number, protocol) and\n * returns client handle. Default options are set, which the user can\n * change using the rpc equivalent of ioctl()'s.",
  "clnt_sperror": "* Print reply error info",
  "clntraw_create": "* Create a client handle for memory based rpc.",
  "clnttcp_create": "* Create a client handle for a tcp/ip connection.\n * If *sockp<0, *sockp is set to a newly created TCP socket and it is\n * connected to raddr.  If *sockp non-negative then\n * raddr is ignored.  The rpc/tcp package does buffering\n * similar to stdio, so the client must pick send and receive buffer sizes,];\n * 0 => use the default.\n * If raddr->sin_port is 0, then a binder on the remote machine is\n * consulted for the right port number.\n * NB: *sockp is copied into a private area.\n * NB: It is the clients responsibility to close *sockp.\n * NB: The rpch->cl_auth is set null authentication.  Caller may wish to set this\n * something more useful.",
  "readtcp": "* reads data from the tcp connection.\n * any error is fatal and the connection is closed.\n * (And a read of zero bytes is a half closed stream => error.)",
  "writetcp": "* writes data to the tcp connection.\n * Any error is fatal and the connection is closed.",
  "__libc_clntudp_bufcreate": "* Create a UDP based client handle.\n * If *sockp<0, *sockp is set to a newly created UPD socket.\n * If raddr->sin_port is 0 a binder on the remote machine\n * is consulted for the correct port number.\n * NB: It is the clients responsibility to close *sockp.\n * NB: The rpch->cl_auth is initialized to null authentication.\n *     Caller may wish to set this something more useful.\n *\n * wait is the amount of time used between retransmitting a call if\n * no response has been heard; retransmission occurs until the actual\n * rpc call times out.\n *\n * sendsz and recvsz are the maximum allowable packet sizes that can be\n * sent and received.",
  "clntunix_create": "* Create a client handle for a tcp/ip connection.\n * If *sockp<0, *sockp is set to a newly created TCP socket and it is\n * connected to raddr.  If *sockp non-negative then\n * raddr is ignored.  The rpc/tcp package does buffering\n * similar to stdio, so the client must pick send and receive buffer sizes,];\n * 0 => use the default.\n * If raddr->sin_port is 0, then a binder on the remote machine is\n * consulted for the right port number.\n * NB: *sockp is copied into a private area.\n * NB: It is the clients responsibility to close *sockp.\n * NB: The rpch->cl_auth is set null authentication.  Caller may wish to set this\n * something more useful.",
  "readunix": "* reads data from the unix connection.\n * any error is fatal and the connection is closed.\n * (And a read of zero bytes is a half closed stream => error.)",
  "writeunix": "* writes data to the unix connection.\n * Any error is fatal and the connection is closed.",
  "common_crypt": "* Common code to cbc_crypt() & ecb_crypt()",
  "cbc_crypt": "* CBC mode encryption",
  "ecb_crypt": "* ECB mode encryption",
  "des_setparity": "* Add odd parity to low bit of 8 byte key",
  "get_myaddress": "* don't use gethostbyname, which would invoke yellow pages\n *\n * Avoid loopback interfaces.  We return information from a loopback\n * interface only if there are no other possible interfaces.",
  "key_secretkey_is_set": "key_secretkey_is_set() returns 1 if the keyserver has a secret key\n * stored for the caller's effective uid; it returns 0 otherwise\n *\n * N.B.:  The KEY_NET_GET key call is undocumented.  Applications shouldn't\n * be using it, because it allows them to get the user's secret key.",
  "getkeyserv_handle": "* Keep the handle cached.  This call may be made quite often.",
  "key_call_socket": "returns  0 on failure, 1 on success",
  "key_call": "returns 0 on failure, 1 on success",
  "_openchild": "* returns pid, or -1 for failure",
  "pmap_getmaps": "* Get a copy of the current port maps.\n * Calls the pmap service remotely to do get the maps.",
  "__get_socket": "* Create a socket that is locally bound to a non-reserve port. For\n * any failures, -1 is returned which will cause the RPC code to\n * create the socket.",
  "__libc_rpc_getport": "* Find the mapped port for program,version.\n * Internal version with additional parameters.\n * Calls the pmap service remotely to do the lookup.\n * Returns 0 if no map exists.",
  "__get_myaddress": "* Same as get_myaddress, but we try to use the loopback\n * interface. portmap caches interfaces, and on DHCP clients,\n * it could be that only loopback is started at this time.",
  "pmap_set": "* Set a mapping between program,version and port.\n * Calls the pmap service remotely to do the mapping.",
  "pmap_unset": "* Remove the mapping between program,version and port.\n * Calls the pmap service remotely to do the un-mapping.",
  "xdr_pmaplist": "* What is going on with linked lists? (!)\n * First recall the link list declaration from pmap_prot.h:\n *\n * struct pmaplist {\n *      struct pmap pml_map;\n *      struct pmaplist *pml_map;\n * };\n *\n * Compare that declaration with a corresponding xdr declaration that\n * is (a) pointer-less, and (b) recursive:\n *\n * typedef union switch (bool_t) {\n *\n *      case TRUE: struct {\n *              struct pmap;\n *              pmaplist_t foo;\n *      };\n *\n *      case FALSE: struct {};\n * } pmaplist_t;\n *\n * Notice that the xdr declaration has no nxt pointer while\n * the C declaration has no bool_t variable.  The bool_t can be\n * interpreted as ``more data follows me''; if FALSE then nothing\n * follows this bool_t; if TRUE then the bool_t is followed by\n * an actual struct pmap, and then (recursively) by the\n * xdr union, pamplist_t.\n *\n * This could be implemented via the xdr_union primitive, though this\n * would cause a one recursive call per element in the list.  Rather than do\n * that we can ``unwind'' the recursion\n * into a while loop and do the union arms in-place.\n *\n * The head of the list is what the C programmer wishes to past around\n * the net, yet is the data that the pointer points to which is interesting;\n * this sounds like a job for xdr_reference!",
  "pmap_rmtcall": "* pmapper remote-call-service interface.\n * This routine is used to call the pmapper remote call service\n * which will look up a service program in the port maps, and then\n * remotely call that routine with the given parameters.  This allows\n * programs to do a lookup and call in one step.",
  "xdr_rmtcall_args": "* XDR remote call arguments\n * written for XDR_ENCODE direction only",
  "xdr_rmtcallres": "* XDR remote call results\n * written for XDR_DECODE direction only",
  "getbroadcastnets": "* The following is kludged-up support for simple rpc broadcasts.\n * Someday a large, complicated system will replace these trivial\n * routines which only support udp/ip .",
  "xdr_callmsg": "* XDR a call message",
  "_rpc_dtablesize": "* Cache the result of getdtablesize(), so we don't have to do an\n * expensive system call every time.",
  "xdr_opaque_auth": "* XDR an opaque authentication struct\n * (see auth.h)",
  "xdr_des_block": "* XDR a DES block",
  "xdr_accepted_reply": "* * * * * * * * * * * * * XDR RPC MESSAGE * * * * * * * * * * * * * * *",
  "xdr_rejected_reply": "* XDR the MSG_DENIED part of a reply message union",
  "xdr_replymsg": "* XDR a reply message",
  "xdr_callhdr": "* Serializes the \"static part\" of a call message header.\n * The fields include: rm_xid, rm_direction, rpcvers, prog, and vers.\n * The rm_xid is not really static, but the user can easily munge on the fly.",
  "accepted": "************************** Client utility routine *************",
  "_seterr_reply": "* given a reply message, fills in the error",
  "__rpc_thread_destroy": "* Task-variable destructor",
  "rpc_thread_multi": "* Initialize RPC multi-threaded operation",
  "do_close": "Close a file descriptor in the child.",
  "xprt_register": "Activate a transport handle.",
  "xprt_unregister": "De-activate a transport handle.",
  "svc_register": "Add a service program to the callout list.\n   The dispatch routine will be called when a rpc request for this\n   program number comes in.",
  "svc_sendreply": "******************* REPLY GENERATION ROUTINES  ************",
  "svcerr_weakauth": "Auth too weak error reply",
  "svcerr_noprog": "Program unavailable error reply",
  "svcerr_progvers": "Program version mismatch error reply",
  "svc_getreq": "******************* SERVER INPUT STUFF *******************",
  "__svc_accept_failed": "If there are no file descriptors available, then accept will fail.\n   We want to delay here so the connection request can be dequeued;\n   otherwise we can bounce between polling and accepting, never giving the\n   request a chance to dequeue and eating an enormous amount of cpu time\n   in svc_run if we're polling on many file descriptors.",
  "_authenticate": "* The call rpc message, msg has been obtained from the wire.  The msg contains\n * the raw form of credentials and verifiers.  authenticate returns AUTH_OK\n * if the msg is successfully authenticated.  If AUTH_OK then the routine also\n * does the following things:\n * set rqst->rq_xprt->verf to the appropriate response verifier;\n * sets rqst->rq_client_cred to the \"cooked\" form of the credentials.\n *\n * NB: rqst->rq_cxprt->verf must be pre-allocated;\n * its length is set appropriately.\n *\n * The caller still owns and is responsible for msg->u.cmb.cred and\n * msg->u.cmb.verf.  The authentication system retains ownership of\n * rqst->rq_client_cred, the cooked credentials.\n *\n * There is an assumption that any flavour less than AUTH_NULL is\n * invalid.",
  "_svcauth_unix": "* Unix longhand authenticator",
  "_svcauth_short": "ARGSUSED",
  "svc_exit": "This function can be used as a signal handler to terminate the\n   server loop.",
  "svctcp_rendezvous_abort": "This function makes sure abort() relocation goes through PLT\n   and thus can be lazy bound.",
  "svctcp_create": "* Usage:\n *      xprt = svctcp_create(sock, send_buf_size, recv_buf_size);\n *\n * Creates, registers, and returns a (rpc) tcp based transporter.\n * Once *xprt is initialized, it is registered as a transporter\n * see (svc.h, xprt_register).  This routine returns\n * a NULL if a problem occurred.\n *\n * If sock<0 then a socket is created, else sock is used.\n * If the socket, sock is not bound to a port then svctcp_create\n * binds it to an arbitrary port.  The routine then starts a tcp\n * listener on the socket's associated port.  In any (successful) case,\n * xprt->xp_sock is the registered socket number and xprt->xp_port is the\n * associated port number.\n *\n * Since tcp streams do buffered io similar to stdio, the caller can specify\n * how big the send and receive buffers are via the second and third parms;\n * 0 => use the system default.",
  "svcudp_bufcreate": "* Usage:\n *      xprt = svcudp_create(sock);\n *\n * If sock<0 then a socket is created, else sock is used.\n * If the socket, sock is not bound to a port then svcudp_create\n * binds it to an arbitrary port.  In any (successful) case,\n * xprt->xp_sock is the registered socket number and xprt->xp_port is the\n * associated port number.\n * Once *xprt is initialized, it is registered as a transporter;\n * see (svc.h, xprt_register).\n * The routines returns NULL if a problem occurred.",
  "svcudp_enablecache": "* Enable use of the cache.\n * Note: there is no disable.",
  "cache_set": "* Set an entry in the cache",
  "cache_get": "* Try to get an entry from the cache\n * return 1 if found, 0 if not found",
  "svcunix_rendezvous_abort": "This function makes sure abort() relocation goes through PLT\n   and thus can be lazy bound.",
  "svcunix_create": "* Usage:\n *      xprt = svcunix_create(sock, send_buf_size, recv_buf_size);\n *\n * Creates, registers, and returns a (rpc) unix based transporter.\n * Once *xprt is initialized, it is registered as a transporter\n * see (svc.h, xprt_register).  This routine returns\n * a NULL if a problem occurred.\n *\n * If sock<0 then a socket is created, else sock is used.\n * If the socket, sock is not bound to a port then svcunix_create\n * binds it to an arbitrary port.  The routine then starts a unix\n * listener on the socket's associated port.  In any (successful) case,\n * xprt->xp_sock is the registered socket number and xprt->xp_port is the\n * associated port number.\n *\n * Since unix streams do buffered io similar to stdio, the caller can specify\n * how big the send and receive buffers are via the second and third parms;\n * 0 => use the system default.",
  "svcunixfd_create": "* Like svunix_create(), except the routine takes any *open* UNIX file\n * descriptor as its first input.",
  "_svcauth_des": "* Service side authenticator for AUTH_DES",
  "cache_init": "* Initialize the cache",
  "cache_victim": "* Find the lru victim",
  "cache_ref": "* Note that sid was referenced",
  "cache_spot": "* Find a spot in the cache for a credential containing\n * the items given.  Return -1 if a replay is detected, otherwise\n * return the spot in the cache.",
  "authdes_getucred": "* Map a des credential into a unix cred.\n * We cache the credential here so the application does\n * not have to make an rpc call every time to interpret\n * the credential.",
  "rpcbind_address": "The port on which rpcbind listens for incoming requests.",
  "rpcbind_dispatch": "Dummy implementation of the rpcbind service, with the\n   PROC_GET_STATE_AND_EXIT extension.",
  "run_rpcbind": "Run the rpcbind test server.",
  "get_test_state": "Call out to the rpcbind test server to retrieve the test status\n   information.",
  "test_server_thread": "RPC test server.  Used to verify the svc_unregister behavior during\n   thread cleanup.",
  "get_ticks": "Return the number seconds since an arbitrary point in time.",
  "kill_server": "Function to be called before exit to make sure the\n   server process is properly killed.",
  "test_call": "Implementation of the test client.",
  "test_call_flush": "Complete one regular RPC call to drain the server socket\n   buffer.  Resets the sequence number.",
  "passwd2des_internal": "* Turn password into DES key",
  "xencrypt": "* Encrypt a secret key given passwd\n * The secret key is passed and returned in hex notation.\n * Its length must be a multiple of 16 hex digits (64 bits).",
  "xdecrypt": "* Decrypt secret key using passwd\n * The secret key is passed and returned in hex notation.\n * Once again, the length is a multiple of 16 hex digits",
  "bin2hex": "* Binary to hex conversion",
  "xdr_free": "* Free a data structure using XDR\n * Not a filter, but a convenient utility nonetheless",
  "xdr_union": "* XDR a discriminated union\n * Support routine for discriminated unions.\n * You create an array of xdrdiscrim structures, terminated with\n * an entry with a null procedure pointer.  The routine gets\n * the discriminant value and then searches the array of xdrdiscrims\n * looking for that value.  It calls the procedure given in the xdrdiscrim\n * to handle the discriminant.  If there is no specific routine a default\n * routine may be called.\n * If there is no specific or default routine an error is returned.",
  "xdr_string": "* Non-portable xdr primitives.\n * Care should be taken when moving these routines to new architectures.",
  "xdr_array": "* XDR an array of arbitrary elements\n * *addrp is a pointer to the array, *sizep is the number of elements.\n * If addrp is NULL (*sizep * elsize) bytes are allocated.\n * elsize is the size (in bytes) of each element, and elproc is the\n * xdr procedure to call to handle each element of the array.",
  "xdr_vector": "* xdr_vector():\n *\n * XDR a fixed length array. Unlike variable-length arrays,\n * the storage of fixed length arrays is static and unfreeable.\n * > basep: base of the array\n * > size: size of the array\n * > elemsize: size of each element\n * > xdr_elem: routine to XDR each element",
  "xdr_float": "vax",
  "xdr_double": "vax",
  "xdr_int64_t": "XDR 64bit integers",
  "xdr_uint64_t": "XDR 64bit unsigned integers",
  "xdr_int32_t": "XDR 32bit integers",
  "xdr_uint32_t": "XDR 32bit unsigned integers",
  "xdr_uint16_t": "XDR 16bit unsigned integers",
  "xdr_int8_t": "XDR 8bit integers",
  "xdr_uint8_t": "XDR 8bit unsigned integers",
  "xdrmem_create": "* The procedure xdrmem_create initializes a stream descriptor for a\n * memory buffer.",
  "xdrmem_getlong": "* Gets the next word from the memory referenced by xdrs and places it\n * in the long pointed to by lp.  It then increments the private word to\n * point at the next element.  Neither object pointed to is const",
  "xdrmem_putlong": "* Puts the long pointed to by lp in the memory referenced by xdrs.  It\n * then increments the private word to point at the next element.  The\n * long pointed at is const",
  "xdrmem_getbytes": "* Gets an unaligned number of bytes from the xdrs structure and writes them\n * to the address passed in addr.  Be very careful when calling this routine\n * as it could leave the xdrs pointing to an unaligned structure which is not\n * a good idea.  None of the things pointed to are const.",
  "xdrmem_putbytes": "* The complementary function to the above.  The same warnings apply about\n * unaligned data.  The source address is const.",
  "xdrmem_getpos": "* Not sure what this one does.  But it clearly doesn't modify the contents\n * of xdrs.  **FIXME** does this not assume u_int == u_long?",
  "xdrmem_setpos": "* xdrs modified",
  "xdrmem_inline": "* xdrs modified",
  "xdrmem_getint32": "* Gets the next word from the memory referenced by xdrs and places it\n * in the int pointed to by ip.  It then increments the private word to\n * point at the next element.  Neither object pointed to is const",
  "xdrmem_putint32": "* Puts the long pointed to by lp in the memory referenced by xdrs.  It\n * then increments the private word to point at the next element.  The\n * long pointed at is const",
  "xdrrec_create": "* Create an xdr handle for xdrrec\n * xdrrec_create fills in xdrs.  Sendsize and recvsize are\n * send and recv buffer sizes (0 => use default).\n * tcp_handle is an opaque handle that is passed as the first parameter to\n * the procedures readit and writeit.  Readit and writeit are read and\n * write respectively.   They are like the system\n * calls expect that they take an opaque handle rather than an fd.",
  "xdrrec_getlong": "* The routines defined below are the xdr ops which will go into the\n * xdr handle filled in by xdrrec_create.",
  "xdrrec_skiprecord": "* Before reading (deserializing from the stream, one should always call\n * this procedure to guarantee proper record alignment.",
  "xdrrec_eof": "* Lookahead function.\n * Returns TRUE iff there is no more input in the buffer\n * after consuming the rest of the current record.",
  "xdrrec_endofrecord": "* The client must tell the package when an end-of-record has occurred.\n * The second parameter tells whether the record should be flushed to the\n * (output) tcp stream.  (This lets the package support batched or\n * pipelined procedure calls.)  TRUE => immediate flush to tcp connection.",
  "flush_out": "* Internal useful routines",
  "xdr_reference": "* XDR an indirect pointer\n * xdr_reference is for recursively translating a structure that is\n * referenced by a pointer inside the structure that is currently being\n * translated.  pp references a pointer to storage. If *pp is null\n * the  necessary storage is allocated.\n * size is the size of the referenced structure.\n * proc is the routine to handle the referenced structure.",
  "xdr_pointer": "* xdr_pointer():\n *\n * XDR a pointer to a possibly recursive data structure. This\n * differs with xdr_reference in that it can serialize/deserialize\n * trees correctly.\n *\n *  What's sent is actually a union:\n *\n *  union object_pointer switch (boolean b) {\n *  case TRUE: object_data data;\n *  case FALSE: void nothing;\n *  }\n *\n * > objpp: Pointer to the pointer to the object.\n * > obj_size: size of the object.\n * > xdr_obj: routine to XDR an object.\n *",
  "x_putlong": "ARGSUSED",
  "x_putbytes": "ARGSUSED",
  "x_setpostn": "ARGSUSED",
  "xdrstdio_create": "* Initialize a stdio xdr stream.\n * Sets the xdr stream handle xdrs for use on the stream file.\n * Operation flag is set to op.",
  "xdrstdio_destroy": "* Destroy a stdio xdr stream.\n * Cleans up the xdr stream handle xdrs previously set up by xdrstdio_create.",
  "fill0": "Internal helper for fill.",
  "fill": "Fill the buffer at TARGET with COUNT copies of the ELEMENT_SIZE\n   bytes starting at ELEMENT.",
  "allocate_malloc": "Use malloc instead of mmap for small allocations and unusual size\n   combinations.",
  "minimum_stride_size": "Return the least common multiple of PAGE_SIZE and ELEMENT_SIZE,\n   avoiding overflow.  This assumes that PAGE_SIZE is a power of\n   two.",
  "allocate_big": "Allocations larger than maximum_small_size potentially use mmap\n   with alias mappings.  If SHARED, the alias mappings are created\n   using MAP_SHARED instead of MAP_PRIVATE.",
  "ascii_tolower": "Convert CH to lower case.  Only change letters in the ASCII\n   range.",
  "compare_compressed_name": "Compare both names, for use with tsearch.  The order is arbitrary,\n   but the comparison is case-insensitive.",
  "resolv_response_init": "Response builder.",
  "response_add_byte": "Add a single byte to B.",
  "response_add_16": "Add a 16-bit word VAL to B, in big-endian format.",
  "response_count_increment": "Increment the pers-section record counter in the packet header.",
  "parse_query": "Update *INFO from the specified DNS packet.",
  "thread_callback_wrapper": "Wrap response_callback as a function which can be passed to\n   pthread_create.",
  "start_server_thread": "Start a server thread for the specified SERVER_INDEX, implemented\n   by CALLBACK.",
  "server_thread_udp_process_one": "Process one UDP query.  Return false if a termination requested has\n   been detected.",
  "server_thread_udp": "UDP thread_callback function.  Variant for one thread per\n   server.",
  "server_thread_udp_single": "Single-threaded UDP processing function, for the single_thread_udp\n   case.",
  "start_server_thread_udp_single": "Start the single UDP handler thread (for the single_thread_udp\n   case).",
  "writev_fully": "Write an array of iovecs.  Terminate the process on failure.",
  "server_thread_tcp_client": "Thread callback for handling a single established TCP connection to\n   a client.",
  "server_thread_tcp": "thread_callback for the TCP case.  Accept connections and create a\n   new thread for each client.",
  "make_server_sockets": "Create UDP and TCP server sockets.",
  "make_server_sockets_for_address": "Like make_server_sockets, but the caller supplies the address to\n   use.",
  "resolv_redirect_once": "One-time initialization of NSS.",
  "set_search_path": "Copy the search path from CONFIG.search to the _res object.",
  "true_func": "Emulate the \"/bin/true\" command.  Arguments are ignored.",
  "echo_func": "Emulate the \"/bin/echo\" command.  Options are ignored, arguments\n   are printed to stdout.",
  "copy_func": "Emulate the \"/bin/cp\" command.  Options are ignored.  Only copies\n   one source file to one destination file.  Directory destinations\n   are not supported.",
  "exit_func": "Emulate the 'exit' builtin.  The exit value is optional.",
  "kill_func": "Emulate the \"/bin/kill\" command.  Options are ignored.",
  "sleep_func": "Emulate the \"/bin/sleep\" command.  No suffix support.  Options are\n   ignored.",
  "run_command_array": "Run one tokenized command.  argv[0] is the command.  argv is\n   NULL-terminated.",
  "run_command_string": "Run one command-as-a-string, by tokenizing it.  Limited to\n   MAX_ARG_COUNT arguments.  Simple substitution is done of $1 to $9\n   (as whole separate tokens) from iargs[].  Quoted strings work if\n   the quotes wrap whole tokens; i.e. \"foo bar\" but not foo\" bar\".",
  "setup_uid_gid_mapping": "The necessary steps to allow file creation in user namespaces.",
  "support_become_root": "CLONE_NEWUSER",
  "transfer": "Write one byte at *P to FD and advance *P.  Do nothing if *P is\n   '\\0'.",
  "copy_and_spawn_sgid": "Copies the executable into a restricted directory, so that we can\n   safely make it SGID with the TARGET group ID.  Then runs the\n   executable.",
  "write_file": "If CONTENTS is not NULL, write it to the file at DIRECTORY/RELPATH,\n   and store the name in *ABSPATH.  If CONTENTS is NULL, store NULL in\n   *ABSPATH.",
  "support_delete_timer": "Disable the timer TIMER.",
  "descriptor_compare": "Used with qsort.",
  "support_enter_mount_namespace": "CLONE_NEWNS",
  "format_ai_family": "Format all the addresses in one address family.",
  "support_need_proc": "We test for /proc/self/maps since that's one of the files that one\n   of our tests actually uses, but the general idea is if Linux's\n   /proc/ (procfs) filesystem is mounted.  If not, the process exits\n   with an UNSUPPORTED result code.",
  "xptsname": "As ptsname, but allocates space for an appropriately-sized string\n   using malloc.",
  "run_test_function": "Run test_function or test_function_argv.",
  "adjust_exit_status": "If test failure reporting has been linked in, it may contribute\n   additional test failures.",
  "remove_toolong_subdirs": "Helper functions called by the test skeleton follow.",
  "maybe_xunlink": "Like xunlink, but it's OK if the file already doesn't exist.",
  "maybe_xmkdir": "Like xmkdir, but it's OK if the directory already exists.",
  "concat": "Temporarily concatenate multiple strings into one.  Allows up to 10\n   temporary results; use xstrdup () if you need them to be\n   permanent.",
  "concat_words": "Like the above, but put spaces between words.  Caller frees.",
  "trymount": "Try to mount SRC onto DEST.",
  "devmount": "Special case of above for devices like /dev/zero where we have to\n   mount a device over a device, not a directory over a directory.",
  "is_env_setting": "Returns true if the string \"looks like\" an environment variable\n   being set.",
  "tokenize": "Break the_line into words and store in the_words.  Max nwords,\n   returns actual count.",
  "copy_one_file": "Used for both rsync and the mytest.script \"cp\" command.",
  "need_sync": "We don't check *everything* about the two files to see if a copy is\n   needed, just the minimum to make sure we get the latest copy.",
  "check_for_unshare_hints": "See if we can detect what the user needs to do to get unshare\n   support working for us.",
  "support_timespec_ns": "Convert TIME to nanoseconds stored in a time_t.\n   Returns time_t maximum or minimum if the conversion overflows\n   or underflows, respectively.",
  "support_timespec_normalize": "Returns time normalized timespec with .tv_nsec < TIMESPEC_HZ\n   and the whole seconds  added to .tv_sec. If an overflow or\n   underflow occurs the values are clamped to its maximum or\n   minimum respectively.",
  "support_timespec_check_in_range": "Returns TRUE if the observed time is within the given percentage\n   bounds of the expected time, and FALSE otherwise.\n   For example the call\n\n   support_timespec_check_in_range(expected, observed, 0.5, 1.2);\n\n   will check if\n\n   0.5 of expected <= observed <= 1.2 of expected\n\n   In other words it will check if observed time is within 50% to\n   120% of the expected time.",
  "test_localhost_bind": "Check that the loopback interface provides multiple addresses which\n   can be used to run independent servers.",
  "random_string": "Create a heap-allocated random string of letters.",
  "check_stream": "Check that the specific stream from the captured subprocess matches\n   expectations.",
  "return_ssize_t": "Functions which return signed sizes are common, so test that these\n   results can readily checked using TEST_COMPARE.",
  "xmkdirp": "Equivalent of \"mkdir -p\".  Any failures cause FAIL_EXIT1 so no\n   return code is needed.",
  "_dl_bti_protect": "Enable BTI protection for MAP.",
  "_dl_bti_check": "Enable BTI for L and its dependencies.",
  "start_za": "PSTATE.ZA = 1, set ZA state to active.",
  "get_svcr": "Read SVCR to get SM (bit0) and ZA (bit1) state.",
  "load_za": "Load data into ZA byte by byte from p.",
  "get_tpidr2": "Returns tpidr2.",
  "V_NAME_D1": "Vector approximation for double-precision tan.\n   Maximum measured error is 3.48 ULP:\n   __v_tan(0x1.4457047ef78d8p+20) got -0x1.f6ccd8ecf7dedp+37\n\t\t\t\t want -0x1.f6ccd8ecf7deap+37.",
  "SV_NAME_D1": "Vector approximation for double-precision tan.\n   Maximum measured error is 3.48 ULP:\n   _ZGVsMxv_tan(0x1.4457047ef78d8p+20) got -0x1.f6ccd8ecf7dedp+37\n\t\t\t\t      want -0x1.f6ccd8ecf7deap+37.",
  "SV_NAME_F1": "Fast implementation of SVE tanf.\n   Maximum error is 3.45 ULP:\n   SV_NAME_F1 (tan)(-0x1.e5f0cap+13) got 0x1.ff9856p-1\n\t\t\t\t    want 0x1.ff9850p-1.",
  "V_NAME_D2": "Fast implementation of vector atan2.\n   Maximum observed error is 2.8 ulps:\n   _ZGVnN2vv_atan2 (0x1.9651a429a859ap+5, 0x1.953075f4ee26p+5)\n\tgot 0x1.92d628ab678ccp-1\n       want 0x1.92d628ab678cfp-1.",
  "SV_NAME_D2": "Fast implementation of SVE atan2. Errors are greatest when y and\n   x are reasonably close together. The greatest observed error is 2.28 ULP:\n   _ZGVsMxvv_atan2 (-0x1.5915b1498e82fp+732, 0x1.54d11ef838826p+732)\n   got -0x1.954f42f1fa841p-1 want -0x1.954f42f1fa843p-1.",
  "SV_NAME_F2": "Fast implementation of SVE atan2f based on atan(x) ~ shift + z + z^3 *\n   P(z^2) with reduction to [0,1] using z=1/x and shift = pi/2. Maximum\n   observed error is 2.95 ULP:\n   _ZGVsMxvv_atan2f (0x1.93836cp+6, 0x1.8cae1p+6) got 0x1.967f06p-1\n\t\t\t\t\t\t want 0x1.967f00p-1.",
  "float64x2_t V_NAME_D1": "Vector log1p approximation using polynomial on reduced interval. Routine is\n   a modification of the algorithm used in scalar log1p, with no shortcut for\n   k=0 and no narrowing for f and k. Maximum observed error is 2.45 ULP:\n   _ZGVnN2v_log1p(0x1.658f7035c4014p+11) got 0x1.fd61d0727429dp+2\n\t\t\t\t\twant 0x1.fd61d0727429fp+2 .",
  "eval_poly": "Use a full Estrin scheme to evaluate polynomial.",
  "float32x4_t V_NAME_F1": "Vector log1pf approximation using polynomial on reduced interval. Accuracy\n   is roughly 2.02 ULP:\n   log1pf(0x1.21e13ap-2) got 0x1.fe8028p-3 want 0x1.fe802cp-3.",
  "__libc_ifunc_impl_list": "Fill ARRAY of MAX elements with IFUNC implementations for function\n   NAME supported on target machine and return the number of valid\n   entries.  Each set of implementations for a given function is sorted in\n   descending order by ISA level.",
  "__aeabi_atexit": "Register a function to be called by exit or when a shared library\n   is unloaded.  This routine is like __cxa_atexit, but uses the\n   calling sequence required by the ARM EABI.",
  "__aeabi_memclr": "Set memory like memset, but different argument order and no return\n   value required.  Also only integer caller-saves may be used.",
  "__aeabi_memcpy": "Copy memory like memcpy, but no return value required.  Can't alias\n   to memcpy because it's not defined in the same translation\n   unit.",
  "__aeabi_memmove": "Copy memory like memmove, but no return value required.  Can't\n   alias to memmove because it's not defined in the same translation\n   unit.",
  "__aeabi_memset": "Set memory like memset, but different argument order and no return\n   value required.",
  "unwind_getgr": "This function is identical to \"_Unwind_GetGR\", except that it uses\n   \"unwind_vrs_get\" instead of \"_Unwind_VRS_Get\".",
  "find_exidx_callback": "Callback to determines if the PC lies within an object, and remember the\n   location of the exception index table if it does.",
  "__gnu_Unwind_Find_exidx": "Find the exception index table containing PC.",
  "__register_frame_info_bases": "Called from crtbegin.o to register the unwind info for an object.",
  "__register_frame_info_table_bases": "Similar, but BEGIN is actually a pointer to a table of unwind entries\n   for different translation units.  Called from the file generated by\n   collect2.",
  "base_from_cb_data": "Like base_of_encoded_value, but take the base from a struct object\n   instead of an _Unwind_Context.",
  "__deregister_frame_info_bases": "??? Glibc has for a while now exported __register_frame_info and\n   __deregister_frame_info.  If we call __register_frame_info_bases\n   from crtbegin (wherein it is declared weak), and this object does\n   not get pulled from libgcc.a for other reasons, then the\n   invocation of __deregister_frame_info will be resolved from glibc.\n   Since the registration did not happen there, we'll abort.\n\n   Therefore, declare a new deregistration entry point that does the\n   exact same thing, but will resolve to the same library as\n   implements __register_frame_info_bases.",
  "base_from_object": "Like base_of_encoded_value, but take the base from a struct object\n   instead of an _Unwind_Context.",
  "get_cie_encoding": "??? This is a subset of extract_cie_info from unwind-dw2.c.",
  "get_pc_begin": "Return the Nth pc_begin value from FDE x.",
  "fde_split": "Split LINEAR into a linear sequence with low values and an erratic\n   sequence with high values, put the linear one (of longest possible\n   length) into LINEAR and the erratic one into ERRATIC. This is O(N).\n\n   Because the longest linear sequence we are trying to locate within the\n   incoming LINEAR array can be interspersed with (high valued) erratic\n   entries.  We construct a chain indicating the sequenced entries.\n   To avoid having to allocate this chain, we overlay it onto the space of\n   the ERRATIC array during construction.  A final pass iterates over the\n   chain to determine what should be placed in the ERRATIC array, and\n   what is the linear sequence.  This overlay is safe from aliasing.",
  "frame_heapsort": "This is O(n log(n)).  BSD/OS defines heapsort in stdlib.h, so we must\n   use a name that does not conflict.",
  "fde_merge": "Merge V1 and V2, both sorted, and put the result into V1.",
  "classify_object_over_fdes": "Update encoding, mixed_encoding, and pc_begin for OB for the\n   fde array beginning at THIS_FDE.  Return the number of fdes\n   encountered along the way.",
  "init_object": "Set up a sorted array of pointers to FDEs for a loaded object.  We\n   count up the entries before allocating the array because it's likely to\n   be faster.  We can be called multiple times, should we have failed to\n   allocate a sorted fde array on a previous occasion.",
  "linear_search_fdes": "A linear search through a set of FDEs for the given PC.  This is\n   used when there was insufficient memory to allocate and sort an\n   array.",
  "binary_search_unencoded_fdes": "Binary search for an FDE containing the given PC.  Here are three\n   implementations of increasing complexity.",
  "_Unwind_GetGR": "Get the value of register REG as saved in CONTEXT.",
  "_Unwind_SetGR": "Overwrite the saved value for register REG in CONTEXT with VAL.",
  "_Unwind_GetIP": "Retrieve the return address for CONTEXT.",
  "_Unwind_SetIP": "Overwrite the return address for CONTEXT with VAL.",
  "extract_cie_info": "Extract any interesting information from the CIE for the translation\n   unit F belongs to.  Return a pointer to the byte after the augmentation,\n   or NULL if we encountered an undecipherable augmentation.",
  "execute_stack_op": "Decode a DW_OP stack program.  Return the top of stack.  Push INITIAL\n   onto the stack to start.",
  "execute_cfa_program": "Decode DWARF 2 call frame information. Takes pointers the\n   instruction sequence to decode, current register information and\n   CIE info, and the PC range to evaluate.",
  "uw_frame_state_for": "Given the _Unwind_Context CONTEXT for a stack frame, look up the FDE for\n   its caller and decode it into FS.  This function also sets the\n   args_size and lsda members of CONTEXT, as they are really information\n   about the caller's frame.",
  "uw_update_context": "CONTEXT describes the unwind state for a frame, and FS describes the FDE\n   of its caller.  Update CONTEXT to refer to the caller as well.  Note\n   that the args_size and lsda members are not updated here, but later in\n   uw_frame_state_for.",
  "uw_init_context_1": "Do any necessary initialization to access arbitrary stack frames. \\\n\t On the SPARC, this means flushing the register windows.",
  "_dl_fptr_init": "Must call _dl_fptr_init before using any other function.",
  "__pthread_cond_broadcast": "Unblock all threads that are blocked on condition variable COND.",
  "__pthread_cond_signal": "Unblock at least one of the threads that are blocked on condition\n   variable COND.",
  "__pthread_cond_timedwait_internal": "Block on condition variable COND until ABSTIME.  As a GNU\n   extension, if ABSTIME is NULL, then wait forever.  MUTEX should be\n   held by the calling thread.  On return, MUTEX will be held by the\n   calling thread.",
  "__pthread_cond_wait": "Block on condition variable COND.  MUTEX should be held by the\n   calling thread.  On return, MUTEX will be held by the calling\n   thread.",
  "__pthread_rwlock_rdlock": "Acquire RWLOCK for reading, block if we can't get it.",
  "__pthread_rwlock_timedrdlock_internal": "Acquire the rwlock *RWLOCK for reading blocking until *ABSTIME if\n   it is already held.  As a GNU extension, if TIMESPEC is NULL then\n   wait forever.",
  "__pthread_rwlock_timedwrlock_internal": "Acquire RWLOCK for writing blocking until *ABSTIME if we cannot get\n   it.  As a special GNU extension, if ABSTIME is NULL then the wait\n   shall not time out.",
  "pthread_rwlock_tryrdlock": "Try to acquire RWLOCK.",
  "pthread_rwlock_trywrlock": "Try to acquire RWLOCK for writing.",
  "__pthread_rwlock_unlock": "Unlock *RWLOCK, rescheduling a waiting writer thread or, if there\n   are no threads waiting for a write lock, rescheduling the reader\n   threads.",
  "__pthread_rwlock_wrlock": "Acquire RWLOCK for writing.",
  "list_append": "List handling functions.",
  "list_unlink": "* Like list_unlink_ip, except that calling it on a node that\n * is already unlinked is disastrous rather than a noop.",
  "thread_links2ptr": "Functions build on top of the list functions.",
  "thread_init": "Initialize a newly allocated thread structure.",
  "init_module": "Initialize the global lists, and acquire global resources.  Error\n   reporting is done by storing a non-zero value to the global variable\n   timer_init_failed.",
  "reinit_after_fork": "This is a handler executed in a child process after a fork()\n   occurs.  It reinitializes the module, resetting all of the data\n   structures to their initial state.  The mutex is initialized in\n   case it was locked in the parent process.",
  "__timer_init_once": "Called once form pthread_once in timer_init. This initializes the\n   module and ensures that reinit_after_fork will be executed in any\n   child process.",
  "thread_deinit": "Deinitialize a thread that is about to be deallocated.",
  "__timer_thread_alloc": "Allocate a thread structure from the global free list.  Global\n   mutex lock must be held by caller.  The thread is moved to\n   the active list.",
  "__timer_thread_dealloc": "Return a thread structure to the global free list.  Global lock\n   must be held by caller.",
  "thread_cleanup": "Each of our threads which terminates executes this cleanup\n   handler. We never terminate threads ourselves; if a thread gets here\n   it means that the evil application has killed it.  If the thread has\n   timers, these require servicing and so we must hire a replacement\n   thread right away.  We must also unblock another thread that may\n   have been waiting for this thread to finish servicing a timer (see\n   timer_delete()).",
  "thread_expire_timer": "Handle a timer which is supposed to go off now.",
  "__timer_thread_queue_timer": "Enqueue a timer in wakeup order in the thread's timer queue.\n   Returns 1 if the timer was inserted at the head of the queue,\n   causing the queue's next wakeup time to change.",
  "__timer_thread_start": "Start a thread and associate it with the given thread node.  Global\n   lock must be held by caller.",
  "__timer_thread_find_matching": "Search the list of active threads and find one which has matching\n   attributes.  Global mutex lock must be held by caller.",
  "__timer_alloc": "Grab a free timer structure from the global free list.  The global\n   lock must be held by the caller.",
  "__timer_dealloc": "Return a timer structure to the global free list.  The global lock\n   must be held by the caller.",
  "__timer_mutex_cancel_handler": "Thread cancellation handler which unlocks a mutex.",
  "__old_memcpy_c": "Additional compatibility shims for the former\n   sysdeps/x86/bits/string.h.",
  "__old_strcat_g": "__strcat_c took a third argument, which we ignore.",
  "__old_strcspn_g": "__strcspn_cg took a third argument, which we ignore.",
  "__old_strspn_g": "__strspn_cg took a third argument, which we ignore.",
  "__old_strpbrk_g": "__strpbrk_cg took a third argument, which we ignore.",
  "__old_strstr_g": "__strstr_cg took a third argument, which we ignore.",
  "__ieee754_acosl": "1.000000000000000000000000000000000000000E0",
  "__ieee754_atan2l": "3f8dcd129024e088a67cc74020bbea64",
  "__atanl": "q5 = 1.000000000000000000000000000000000000000E0",
  "__logbl": "This implementation avoids FP to INT conversions by using VSX\n   bitwise instructions over FP values.",
  "__significandl": "* Public domain.",
  "__kernel_standard": "* Standard conformance (non-IEEE) on exception cases.\n * Mapping:\n *\t1 -- acos(|x|>1)\n *\t2 -- asin(|x|>1)\n *\t3 -- atan2(+-0,+-0)\n *\t4 -- hypot overflow\n *\t5 -- cosh overflow\n *\t6 -- exp overflow\n *\t7 -- exp underflow\n *\t8 -- y0(0)\n *\t9 -- y0(-ve)\n *\t10-- y1(0)\n *\t11-- y1(-ve)\n *\t12-- yn(0)\n *\t13-- yn(-ve)\n *\t14-- lgamma(finite) overflow\n *\t15-- lgamma(-integer)\n *\t16-- log(0)\n *\t17-- log(x<0)\n *\t18-- log10(0)\n *\t19-- log10(x<0)\n *\t21-- pow(x,y) overflow\n *\t22-- pow(x,y) underflow\n *\t23-- pow(0,negative)\n *\t24-- pow(neg,non-integral)\n *\t25-- sinh(finite) overflow\n *\t26-- sqrt(negative)\n *      27-- fmod(x,0)\n *      28-- remainder(x,0)\n *\t29-- acosh(x<1)\n *\t30-- atanh(|x|>1)\n *\t31-- atanh(|x|=1)\n *\t32-- scalb overflow\n *\t33-- scalb underflow\n *\t34-- j0(|x|>X_TLOSS)\n *\t35-- y0(x>X_TLOSS)\n *\t36-- j1(|x|>X_TLOSS)\n *\t37-- y1(x>X_TLOSS)\n *\t38-- jn(|x|>X_TLOSS, n)\n *\t39-- yn(x>X_TLOSS, n)\n *\t40-- tgamma(finite) overflow\n *\t41-- tgamma(-integer)\n *\t43-- +0**neg\n *\t44-- exp2 overflow\n *\t45-- exp2 underflow\n *\t46-- exp10 overflow\n *\t47-- exp10 underflow\n *\t48-- log2(0)\n *\t49-- log2(x<0)\n *\t50-- tgamma(+-0)",
  "__kernel_standard_f": "Handle errors for a libm function as specified by TYPE (see\n   comments in k_standard.c for details), with arguments X and Y,\n   returning the appropriate return value for that function.",
  "__kernel_standard_l": "Handle errors for a libm function as specified by TYPE (see\n   comments in k_standard.c for details), with arguments X and Y,\n   returning the appropriate return value for that function.",
  "__ieee754_acosh": "0x3FE62E42, 0xFEFA39EF",
  "__ieee754_asin": "asin with max ULP of ~0.516 based on random sampling.",
  "__ieee754_acos": "acos with max ULP of ~0.523 based on random sampling.",
  "signArctan2": "Fix the sign and return after stage 1 or stage 2",
  "__ieee754_atan2": "atan2 with max ULP of ~0.524 based on random sampling.",
  "specialcase": "Handle cases that may overflow or underflow when computing the result that\n   is scale*(1+TMP) without intermediate rounding.  The bit representation of\n   scale is in SBITS, however it has a computed exponent that may have\n   overflown into the sign bit so that needs to be adjusted before using it as\n   a double.  (int32_t)KI is the k used in the argument reduction and exponent\n   adjustment of scale, positive k here means the result may overflow and\n   negative k means the result may underflow.",
  "__fmod": "With x = mx * 2^ex and y = my * 2^ey (mx, my, ex, ey being integers), the\n   simplest implementation is:\n\n   mx * 2^ex == 2 * mx * 2^(ex - 1)\n\n   or\n\n   while (ex > ey)\n     {\n       mx *= 2;\n       --ex;\n       mx %= my;\n     }\n\n   With the mathematical equivalence of:\n\n   r == x % y == (x % (N * y)) % y\n\n   And with mx/my being mantissa of a double floating point number (which uses\n   less bits than the storage type), on each step the argument reduction can\n   be improved by 11 (which is the size of uint64_t minus MANTISSA_WIDTH plus\n   the implicit one bit):\n\n   mx * 2^ex == 2^11 * mx * 2^(ex - 11)\n\n   or\n\n   while (ex > ey)\n     {\n       mx << 11;\n       ex -= 11;\n       mx %= my;\n     }\n\n   Special cases:\n     - If x or y is a NaN, a NaN is returned.\n     - If x is an infinity, or y is zero, a NaN is returned and EDOM is set.\n     - If x is +0/-0, and y is not zero, +0/-0 is returned.",
  "gamma_positive": "Return gamma (X), for positive X less than 184, in the form R *\n   2^(*EXP2_ADJ), where R is the return value and *EXP2_ADJ is set to\n   avoid overflow or underflow in intermediate calculations.",
  "kernel": "Hypot kernel. The inputs must be adjusted so that ax >= ay >= 0\n   and squaring ax, ay and (ax - ay) does not overflow or underflow.",
  "__ieee754_y0": "0x3DFE5018, 0x3BD6D9EF",
  "top16": "Top 16 bits of a double.",
  "__ieee754_log10": "0x3D59FEF311F12B36",
  "log_inline": "Compute y+TAIL = log(x) where the rounded result is y and TAIL has about\n   additional 15 bits precision.  IX is the bit representation of x, but\n   normalized in the subnormal range using the sign bit for the exponent.",
  "exp_inline": "Computes sign*exp(x+xtail) where |xtail| < 2^-8/N and |xtail| <= |x|.\n   The sign_bias argument is SIGN_BIAS or 0 and sets the sign to -1 or 1.",
  "checkint": "Returns 0 if not int, 1 if odd int, 2 if even int.  The argument is\n   the bit representation of a non-zero finite floating-point value.",
  "__gamma_product": "Compute the product of X + X_EPS, X + X_EPS + 1, ..., X + X_EPS + N\n   - 1, in the form R * (1 + *EPS) where the return value R is an\n   approximation to the product and *EPS is set to indicate the\n   approximate error in the return value.  X is such that all the\n   values X + 1, ..., X + N - 1 are exactly representable, and X_EPS /\n   X is small enough that factors quadratic in it can be\n   neglected.",
  "__gamma_productf": "Compute the product of X + X_EPS, X + X_EPS + 1, ..., X + X_EPS + N\n   - 1, in the form R * (1 + *EPS) where the return value R is an\n   approximation to the product and *EPS is set to indicate the\n   approximate error in the return value.  X is such that all the\n   values X + 1, ..., X + N - 1 are exactly representable, and X_EPS /\n   X is small enough that factors quadratic in it can be\n   neglected.",
  "__kernel_rem_pio2": "0x3E700000, 0x00000000",
  "lg_sinpi": "Compute sin (pi * X) for -0.25 <= X <= 0.5.",
  "lg_cospi": "Compute cos (pi * X) for -0.25 <= X <= 0.5.",
  "lg_cotpi": "Compute cot (pi * X) for -0.25 <= X <= 0.5.",
  "__lgamma_neg": "Compute lgamma of a negative argument -28 < X < -2, setting\n   *SIGNGAMP accordingly.",
  "__lgamma_product": "Compute the product of 1 + (T / (X + X_EPS)), 1 + (T / (X + X_EPS +\n   1)), ..., 1 + (T / (X + X_EPS + N - 1)), minus 1.  X is such that\n   all the values X + 1, ..., X + N - 1 are exactly representable, and\n   X_EPS / X is small enough that factors quadratic in it can be\n   neglected.",
  "with_errno": "NOINLINE reduces code size and avoids making math functions non-leaf\n   when the error handling is inlined.",
  "__math_edom": "NOINLINE reduces code size and avoids making math functions non-leaf\n   when the error handling is inlined.",
  "xflow": "NOINLINE reduces code size.",
  "__math_may_uflow": "Underflows to zero in some non-nearest rounding mode, setting errno\n   is valid even if the result is non-zero, but in the subnormal range.",
  "__math_oflow": "Underflows to zero in some non-nearest rounding mode, setting errno\n   is valid even if the result is non-zero, but in the subnormal range.",
  "__math_check_uflow": "Check result and set errno if necessary.",
  "__signArctan": "Fix the sign of y and return",
  "__atan": "atan with max ULP of ~0.523 based on random sampling.",
  "__erf": "0xC03670E2, 0x42712D62",
  "__frexp": "* for non-zero, finite x\n *\tx = frexp(arg,&exp);\n * return a double fp quantity x such that 0.5 <= |x| <1.0\n * and the corresponding binary exponent \"exp\". That is\n *\targ = x*2^exp.\n * If arg is inf, 0.0, or NaN, then frexp(arg,&exp) returns arg\n * with *exp=0.",
  "__logb": "This implementation avoids FP to INT conversions by using VSX\n   bitwise instructions over FP values.",
  "__nextup": "Return the least floating-point number greater than X.",
  "do_cos": "Given a number partitioned into X and DX, this function computes the cosine\n   of the number by combining the sin and cos of X (as computed by a variation\n   of the Taylor series) with the values looked up from the sin/cos table to\n   get the result.",
  "do_sin": "Given a number partitioned into X and DX, this function computes the sine of\n   the number by combining the sin and cos of X (as computed by a variation of\n   the Taylor series) with the values looked up from the sin/cos table to get\n   the result.",
  "reduce_sincos": "Reduce range of x to within PI/2 with abs (x) < 105414350.  The high part\n   is written to *a, the low part to *da.  Range reduction is accurate to 136\n   bits so that when x is large and *a very close to zero, all 53 bits of *a\n   are correct.",
  "do_sincos": "Compute sin or cos (A + DA) for the given quadrant N.",
  "__tan": "tan with max ULP of ~0.619 based on random sampling.",
  "add_split": "Calculate X + Y exactly and store the result in *HI + *LO.  It is\n   given that |X| >= |Y| and the values are small enough that no\n   overflow occurs.",
  "__x2y2m1": "Return X^2 + Y^2 - 1, computed without large cancellation error.\n   It is given that 1 > X >= Y >= epsilon / 2, and that X^2 + Y^2 >=\n   0.5.",
  "__x2y2m1f": "Return X^2 + Y^2 - 1, computed without large cancellation error.\n   It is given that 1 > X >= Y >= epsilon / 2, and that X^2 + Y^2 >=\n   0.5.",
  "__mpn_construct_float128": "Convert a multi-precision integer of the needed number of bits (113 for\n   binary128) and an integral power of two to a `_Float128' in IEEE854\n   quad-precision format.",
  "__ieee754_acosf": "0x3d9dc62e",
  "__ieee754_acoshf": "0x3f317218",
  "__ieee754_atan2f": "0xb3bbbd2e",
  "__fmodf": "With x = mx * 2^ex and y = my * 2^ey (mx, my, ex, ey being integers), the\n   simplest implementation is:\n\n   mx * 2^ex == 2 * mx * 2^(ex - 1)\n\n   or\n\n   while (ex > ey)\n     {\n       mx *= 2;\n       --ex;\n       mx %= my;\n     }\n\n   With the mathematical equivalence of:\n\n   r == x % y == (x % (N * y)) % y\n\n   And with mx/my being mantissa of a single floating point number (which uses\n   less bits than the storage type), on each step the argument reduction can\n   be improved by 8 (which is the size of uint32_t minus MANTISSA_WIDTH plus\n   the implicit one bit):\n\n   mx * 2^ex == 2^8 * mx * 2^(ex - 8)\n\n   or\n\n   while (ex > ey)\n     {\n       mx << 8;\n       ex -= 8;\n       mx %= my;\n     }\n\n   Special cases:\n     - If x or y is a NaN, a NaN is returned.\n     - If x is an infinity, or y is zero, a NaN is returned and EDOM is set.\n     - If x is +0/-0, and y is not zero, +0/-0 is returned.",
  "gammaf_positive": "Return gamma (X), for positive X less than 42, in the form R *\n   2^(*EXP2_ADJ), where R is the return value and *EXP2_ADJ is set to\n   avoid overflow or underflow in intermediate calculations.",
  "j0f_asympt": "Formula page 5 of https://www.cl.cam.ac.uk/~jrh13/papers/bessel.pdf:\n   j0f(x) ~ sqrt(2/(pi*x))*beta0(x)*cos(x-pi/4-alpha0(x))\n   where beta0(x) = 1 - 1/(16*x^2) + 53/(512*x^4)\n   and alpha0(x) = 1/(8*x) - 25/(384*x^3).",
  "j0f_near_root": "Special code for x near a root of j0.\n   z is the value computed by the generic code.\n   For small x, we use a polynomial approximating j0 around its root.\n   For large x, we use an asymptotic formula (j0f_asympt).",
  "y0f_asympt": "Formula page 5 of https://www.cl.cam.ac.uk/~jrh13/papers/bessel.pdf:\n   y0(x) ~ sqrt(2/(pi*x))*beta0(x)*sin(x-pi/4-alpha0(x))\n   where beta0(x) = 1 - 1/(16*x^2) + 53/(512*x^4)\n   and alpha0(x) = 1/(8*x) - 25/(384*x^3).",
  "y0f_near_root": "Special code for x near a root of y0.\n   z is the value computed by the generic code.\n   For small x, use a polynomial approximating y0 around its root.\n   For large x, use an asymptotic formula (y0f_asympt).",
  "j1f_asympt": "Formula page 5 of https://www.cl.cam.ac.uk/~jrh13/papers/bessel.pdf:\n   j1f(x) ~ sqrt(2/(pi*x))*beta1(x)*cos(x-3pi/4-alpha1(x))\n   where beta1(x) = 1 + 3/(16*x^2) - 99/(512*x^4)\n   and alpha1(x) = -3/(8*x) + 21/(128*x^3) - 1899/(5120*x^5).",
  "j1f_near_root": "Special code for x near a root of j1.\n   z is the value computed by the generic code.\n   For small x, we use a polynomial approximating j1 around its root.\n   For large x, we use an asymptotic formula (j1f_asympt).",
  "y1f_asympt": "Formula page 5 of https://www.cl.cam.ac.uk/~jrh13/papers/bessel.pdf:\n   y1f(x) ~ sqrt(2/(pi*x))*beta1(x)*sin(x-3pi/4-alpha1(x))\n   where beta1(x) = 1 + 3/(16*x^2) - 99/(512*x^4)\n   and alpha1(x) = -3/(8*x) + 21/(128*x^3) - 1899/(5120*x^5).",
  "y1f_near_root": "Special code for x near a root of y1.\n   z is the value computed by the generic code.\n   For small x, we use a polynomial approximating y1 around its root.\n   For large x, we use an asymptotic formula (y1f_asympt).",
  "__ieee754_log10f": "0x355427db",
  "log2_inline": "Subnormal input is normalized so ix has negative biased exponent.\n   Output is multiplied by N (POWF_SCALE) if TOINT_INTRINICS is set.",
  "exp2_inline": "The output of log2 and thus the input of exp2 is either scaled by N\n   (in case of fast toint intrinsics) or not.  The unscaled xd must be\n   in [-1021,1023], sign_bias sets the sign of the result.",
  "__lgamma_negf": "Compute lgamma of a negative argument -15 < X < -2, setting\n   *SIGNGAMP accordingly.",
  "with_errnof": "NOINLINE reduces code size.",
  "__math_edomf": "NOINLINE reduces code size.",
  "xflowf": "NOINLINE prevents fenv semantics breaking optimizations.",
  "__math_may_uflowf": "Underflows to zero in some non-nearest rounding mode, setting errno\n   is valid even if the result is non-zero, but in the subnormal range.",
  "__math_oflowf": "Underflows to zero in some non-nearest rounding mode, setting errno\n   is valid even if the result is non-zero, but in the subnormal range.",
  "COSF_FUNC": "Fast cosf implementation.  Worst-case ULP is 0.5607, maximum relative\n   error is 0.5303 * 2^-23.  A single-step range reduction is used for\n   small values.  Large inputs have their range reduced using fast integer\n   arithmetic.",
  "__erff": "0xc1b38712",
  "__expm1f": "0xb457edbb",
  "__frexpf": "0x4c000000",
  "__logbf": "This implementation avoids FP to INT conversions by using VSX\n   bitwise instructions over FP values.",
  "__nextupf": "Return the least floating-point number greater than X.",
  "SINCOSF_FUNC": "Fast sincosf implementation.  Worst-case ULP is 0.5607, maximum relative\n   error is 0.5303 * 2^-23.  A single-step range reduction is used for\n   small values.  Large inputs have their range reduced using fast integer\n   arithmetic.",
  "SINF_FUNC": "Fast sinf implementation.  Worst-case ULP is 0.5607, maximum relative\n   error is 0.5303 * 2^-23.  A single-step range reduction is used for\n   small values.  Large inputs have their range reduced using fast integer\n   arithmetic.",
  "rem_pio2f": "Reduce range of X to a multiple of PI/2.  The modulo result is between\n   -PI/4 and PI/4 and returned as a high part y[0] and a low part y[1].\n   The low bit in the return value indicates the first or 2nd half of tanf.",
  "__ieee754_acoshl": "0x3FFE, 0xB17217F7, 0xD1CF79AC",
  "__ieee754_asinl": "1.000000000000000000000000000000000000000E0",
  "gammal_positive": "Return gamma (X), for positive X less than 1766, in the form R *\n   2^(*EXP2_ADJ), where R is the return value and *EXP2_ADJ is set to\n   avoid overflow or underflow in intermediate calculations.",
  "neval": "Evaluate P[n] x^n  +  P[n-1] x^(n-1)  +  ...  +  P[0]",
  "deval": "Evaluate x^n+1  +  P[n] x^(n)  +  P[n-1] x^(n-1)  +  ...  +  P[0]",
  "__gamma_productl": "Compute the product of X + X_EPS, X + X_EPS + 1, ..., X + X_EPS + N\n   - 1, in the form R * (1 + *EPS) where the return value R is an\n   approximation to the product and *EPS is set to indicate the\n   approximate error in the return value.  X is such that all the\n   values X + 1, ..., X + N - 1 are exactly representable, and X_EPS /\n   X is small enough that factors quadratic in it can be\n   neglected.",
  "__kernel_tanl": "1.000000000000000000000000000000000000000E0",
  "__mpn_extract_long_double": "Convert a `long double' in IEEE854 standard double-precision format to a\n   multi-precision integer representing the significand scaled up by its\n   number of bits (64 for long double) and an integral power of two\n   (MPN frexpl).",
  "__lgamma_negl": "Compute lgamma of a negative argument -33 < X < -2, setting\n   *SIGNGAMP accordingly.",
  "__lgamma_productl": "Compute the product of 1 + (T / (X + X_EPS)), 1 + (T / (X + X_EPS +\n   1)), ..., 1 + (T / (X + X_EPS + N - 1)), minus 1.  X is such that\n   all the values X + 1, ..., X + N - 1 are exactly representable, and\n   X_EPS / X is small enough that factors quadratic in it can be\n   neglected.",
  "__mpn_construct_long_double": "Convert a multi-precision integer of the needed number of bits (64 for\n   long double) and an integral power of two to a `long double' in IEEE854\n   extended-precision format.",
  "__nextupl": "Return the least floating-point number greater than X.",
  "__scalbnl": "0x3C90000000000000",
  "__x2y2m1l": "Return X^2 + Y^2 - 1, computed without large cancellation error.\n   It is given that 1 > X >= Y >= epsilon / 2, and that X^2 + Y^2 >=\n   0.5.",
  "store_ext_val": "Store D as an ext_val value.",
  "mul_ext_val": "Store X * Y as ext_val values *V0 and *V1.",
  "add_split_ext": "Calculate *X + *Y exactly, storing the high part in *X (rounded to\n   nearest) and the low part in *Y.  It is given that |X| >= |Y|.",
  "___fpclassifyl": "*\t\thx                  lx\n   * +NaN\t7ffn nnnn nnnn nnnn xxxx xxxx xxxx xxxx\n   * -NaN\tfffn nnnn nnnn nnnn xxxx xxxx xxxx xxxx\n   * +Inf\t7ff0 0000 0000 0000 xxxx xxxx xxxx xxxx\n   * -Inf\tfff0 0000 0000 0000 xxxx xxxx xxxx xxxx\n   * +0\t\t0000 0000 0000 0000 xxxx xxxx xxxx xxxx\n   * -0\t\t8000 0000 0000 0000 xxxx xxxx xxxx xxxx\n   * +normal\t0360 0000 0000 0000 0000 0000 0000 0000 (smallest)\n   * -normal\t8360 0000 0000 0000 0000 0000 0000 0000 (smallest)\n   * +normal\t7fef ffff ffff ffff 7c8f ffff ffff fffe (largest)\n   * +normal\tffef ffff ffff ffff fc8f ffff ffff fffe (largest)\n   * +denorm\t0360 0000 0000 0000 8000 0000 0000 0001 (largest)\n   * -denorm\t8360 0000 0000 0000 0000 0000 0000 0001 (largest)\n   * +denorm\t000n nnnn nnnn nnnn xxxx xxxx xxxx xxxx\n   * -denorm\t800n nnnn nnnn nnnn xxxx xxxx xxxx xxxx",
  "__isoc23_fwscanf": "Read formatted input from STREAM according to the format string FORMAT.",
  "__isoc23_swscanf": "Read formatted input from S, according to the format string FORMAT.",
  "__isoc23_vfwscanf": "Read formatted input from STREAM according to the format string FORMAT.",
  "__isoc23_vwscanf": "Read formatted input from STDIN according to the format string FORMAT.",
  "__isoc23_wscanf": "Read formatted input from stdin according to the format string FORMAT.",
  "__isoc99_fwscanf": "Read formatted input from STREAM according to the format string FORMAT.",
  "__isoc99_swscanf": "Read formatted input from S, according to the format string FORMAT.",
  "__isoc99_vfwscanf": "Read formatted input from STREAM according to the format string FORMAT.",
  "__isoc99_vwscanf": "Read formatted input from STDIN according to the format string FORMAT.",
  "__isoc99_wscanf": "Read formatted input from stdin according to the format string FORMAT.",
  "nextdownl": "Return the greatest floating-point number less than X.",
  "nextupl": "Return the least floating-point number greater than X.",
  "raise_one_exception": "Raise exceptions represented by EXCEPTS.  But we must raise only one\n     signal at a time.  It is important that if the overflow/underflow\n     exception and the divide by zero exception are given at the same\n     time, the overflow/underflow exception follows the divide by zero\n     exception.\n\n     The Coldfire FPU allows an exception to be raised by asserting\n     the associated EXC bit and then executing an arbitrary arithmetic\n     instruction.  fmove.l is classified as an arithmetic instruction\n     and suffices for this purpose.\n\n     We therefore raise an exception by setting both the EXC and AEXC\n     bit associated with the exception (the former being 6 bits to the\n     left of the latter) and then loading the longword at (%sp) into an\n     FP register.",
  "__adjtime": "Adjust the current time of day by the amount in DELTA.\n   If OLDDELTA is not NULL, it is filled in with the amount\n   of time adjustment remaining to be done from the last `__adjtime' call.\n   This call is restricted to the super-user.",
  "__clock_gettime": "Get current value of CLOCK and store it in TP.",
  "__clock_gettime64": "Get current value of CLOCK and store it in TP.",
  "__pthread_block": "Block THREAD.",
  "_pthread_spin_lock": "Lock the spin lock object LOCK.  If the lock is held by another\n   thread spin until it becomes available.",
  "__pthread_stack_alloc": "Allocate a new stack of size STACKSIZE.  If successful, store the\n   address of the newly allocated stack in *STACKADDR and return 0.\n   Otherwise return an error code (EINVAL for an invalid stack size,\n   EAGAIN if the system lacked the necessary resources to allocate a\n   new stack).",
  "create_wakeupmsg": "Prepare a wakeup message.",
  "__pthread_thread_alloc": "Allocate any resources for THREAD.  The new kernel thread should not\n   be eligible to be scheduled.",
  "__pthread_thread_start": "Start THREAD.  Get the kernel thread scheduled and running.",
  "__pthread_thread_terminate": "Terminate the kernel thread associated with THREAD, and deallocate its\n   right reference and its stack.  The function also drops a reference\n   on THREAD.",
  "__pthread_timedblock": "Block THREAD.",
  "__pthread_wakeup": "Wakeup THREAD.",
  "clock": "Return the time used by the program so far (user time + system time).",
  "__clock_settime": "Set CLOCK to value TP.",
  "__close_nocancel_nostatus": "Close the file descriptor FD.",
  "open_file": "Open FILE_NAME and return a Hurd I/O for it in *PORT, or return an\n   error.  If STAT is non-zero, stat the file into that stat buffer.",
  "__strtoul_internal": "This is only used by hurdlookup for the /dev/fd/nnn magic.\n * We avoid pulling the whole libc implementation, and we can keep this hidden.",
  "_dl_init_first": "This function is called specially by the dynamic linker to do early\n   initialization of the shared C library before normal initializers\n   expecting a Posixoid environment can run.",
  "__f_setlk": "XXX\n   We need new RPCs to support POSIX.1 fcntl file locking!!\n   For the time being we support the whole-file case only,\n   with all kinds of WRONG WRONG WRONG semantics,\n   by using flock.  This is definitely the Wrong Thing,\n   but it might be better than nothing (?).",
  "__fchownat": "Change the owner and group of FILE.",
  "__fstatat64_common": "Get information about the file descriptor FD in BUF.",
  "__fxstat": "Get information about the file NAME in BUF.",
  "__fxstat64": "Get information about the file FD in BUF.",
  "__fxstatat": "Get information about the file FD in BUF.",
  "__fxstatat64": "Get information about the file NAME in BUF.",
  "__hurd_canonicalize_directory_name_internal": "Get the canonical absolute name of the given directory port, and put it\n   in SIZE bytes of BUF.  Returns NULL if the directory couldn't be\n   determined or SIZE was too small.  If successful, returns BUF.  In GNU,\n   if BUF is NULL, an array is allocated with `malloc'; the array is SIZE\n   bytes long, unless SIZE <= 0, in which case it is as big as necessary.\n   If our root directory cannot be reached, the result will not begin with\n   a slash to indicate that it is relative to some unknown root directory.",
  "__getitimer": "Set *VALUE to the current setting of timer WHICH.\n   Return 0 on success, -1 on errors.",
  "posixland_init": "We call this once the Hurd magic is all set up and we are ready to be a\n   Posixoid program.  This does the same things the generic version does.",
  "first_init": "Do the first essential initializations that must precede all else.",
  "_hurd_stack_setup": "XXX This is all a crock and I am not happy with it.\n   This poorly-named function is called by static-start.S,\n   which should not exist at all.",
  "send_rpc": "Send the RPC already packed up in MSG to IOPORT\n     and decode the return value.",
  "in": "Pack an argument into the message buffer.",
  "out": "Unpack the message buffer into the argument location.",
  "__linkat_common": "Make a link to FROM relative to FROMFD called TO relative to TOFD.",
  "__lxstat": "Get information about the file NAME in BUF.",
  "__lxstat64": "Get information about the file NAME in BUF.",
  "_hurd_fd_opendir": "Open a directory stream on a file descriptor in Hurd internal form.\n   We do no checking here on the descriptor.",
  "update_waiter": "Enable statistical profiling, writing samples of the PC into at most\n   SIZE bytes of SAMPLE_BUFFER; every processor clock tick while profiling\n   is enabled, the system examines the user PC and increments\n   SAMPLE_BUFFER[((PC - OFFSET) / 2) * SCALE / 65536].  If SCALE is zero,\n   disable profiling.  Returns zero on success, -1 on error.",
  "fetch_samples": "Fetch PC samples.  This function must be very careful not to depend\n   on Hurd TLS variables.  We arrange that by using a special\n   stub arranged for at the end of this file.",
  "profile_waiter": "This function must be very careful not to depend on Hurd TLS\n   variables.  We arrange that by using special stubs arranged for at the\n   end of this file.",
  "fork_profil_prepare": "Before fork, lock the interlock so that we are in a clean state.",
  "fork_profil_parent": "In the parent, unlock the interlock once fork is complete.",
  "fork_profil_child": "In the child, unlock the interlock, and start a profiling thread up\n   if necessary.",
  "fetch_user_thread": "Fetch the thread port for PID's user thread.",
  "get_regs": "Fetch a thread state structure from PID and store it at ADDR.",
  "ptsname": "Return the pathname of the pseudo terminal slave associated with\n   the master FD is open on, or NULL on errors.\n   The returned storage is good until the next call to this function.",
  "__ptsname_internal": "We don't need STP, but fill it for conformity with the Linux version...",
  "__ptsname_r": "Store at most BUFLEN characters of the pathname of the slave pseudo\n   terminal associated with the master FD is open on in BUF.\n   Return 0 on success, otherwise an error number.",
  "__readdir64_r": "Read a directory entry from DIRP.",
  "__readlinkat": "Read the contents of the symbolic link FILE_NAME relative to FD into no more\n   than LEN bytes of BUF.  The contents are not null-terminated.\n   Returns the number of characters read, or -1 for errors.",
  "__seekdir": "Seek to position POS in DIRP.",
  "__sendfile64": "Send COUNT bytes from file associated with IN_FD starting at OFFSET to\n   descriptor OUT_FD.",
  "create_address_port": "Get an address port for the desired destination address.",
  "quantize_timeval": "Time the thread started waiting.",
  "timer_thread": "Function run by the itimer thread.\n   This code must be very careful not ever to require a MiG reply port.",
  "setitimer_locked": "Called before any normal SIGALRM signal is delivered.\n   Reload the itimer, or disable the itimer.",
  "__setitimer": "Set the timer WHICH to *NEW.  If OLD is not NULL,\n   set *OLD to the old value of timer WHICH.\n   Returns 0 on success, -1 on errors.",
  "__sigaltstack": "Run signals handlers on the stack specified by SS (if not NULL).\n   If OSS is not NULL, it is filled in with the old signal stack status.",
  "reauthenticate_fd": "Reauthenticate one of our file descriptors for the child.  A null\n     element of DTABLE_CELLS indicates a descriptor that was already\n     reauthenticated, or was newly opened on behalf of the child.",
  "child_init_port": "These callbacks are for looking up file names on behalf of the child.",
  "do_closefrom": "Close file descriptors in the child.",
  "__symlinkat": "Make a link to FROM called TO relative to FD.",
  "__tmpfile": "This returns a new stream opened on a temporary file (generated\n   by tmpnam).  The file is opened with mode \"w+b\" (binary read/write).\n   If we couldn't generate a unique filename or the file couldn't\n   be opened, NULL is returned.",
  "__truncate64": "Truncate PATH to LENGTH bytes.",
  "__unlinkat": "Remove the link named NAME.",
  "utime_ts_from_tval": "Initializes atime/mtime timespec structures from an array of timeval.",
  "utime_tvalue_from_tval": "Initializes atime/mtime time_value_t structures from an array of timeval.",
  "hurd_futimes": "Changes the access time of the file behind PORT using a timeval array.",
  "utime_ts_from_tspec": "Initializes atime/mtime timespec structures from an array of timespec.",
  "utime_tvalue_from_tspec": "Initializes atime/mtime time_value_t structures from an array of timespec.",
  "hurd_futimens": "Changes the access time of the file behind PORT using a timespec array.",
  "__xmknod": "Create a device file named PATH, with permission and special bits MODE\n   and device number DEV (which can be constructed from major and minor\n   device numbers with the `makedev' macro above).",
  "__xmknodat": "Create a device file named PATH relative to FD, with permission and\n   special bits MODE and device number DEV (which can be constructed\n   from major and minor device numbers with the `makedev' macro above).",
  "__xstat": "Get information about the file NAME in BUF.",
  "__xstat64": "Get information about the file NAME in BUF.",
  "cancel_me": "This function will be called by hurd_thread_cancel while we are blocked\n     We wake up our thread if it's still blocking or about to block, so it will\n     progress and notice the cancellation flag.",
  "_init_routine": "This function is called from the Hurd-specific startup code.  It\n   should return a new stack pointer for the main thread.  The caller\n   will switch to this new stack before doing anything serious.",
  "__sigreturn2": "This is run on the thread stack after restoring it, to be able to\n   unlock SS off sigstack.",
  "stack_setup": "Set up the stack for THREAD.  Return the stack pointer\n   for the new thread.",
  "exception2signal": "Translate the Mach exception codes, as received in an `exception_raise' RPC,\n   into a signal number and signal subcode.",
  "fill_siginfo": "Fill in a siginfo_t structure for SA_SIGINFO-enabled handlers.",
  "fill_ucontext": "Fill in a ucontext_t structure SA_SIGINFO-enabled handlers.",
  "elf_machine_runtime_link_map": "Get link map for callers object containing STUB_PC.",
  "__sigsetjmp_aux": "Stack protection is disabled to avoid changing s0 (or any other\n   caller-save register) before storing it to environment.\n   See BZ #22624.",
  "fp32": "Copyright (C) 2014-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "fp64a": "Copyright (C) 2014-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "fp64": "Copyright (C) 2014-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "fpxx": "Copyright (C) 2014-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "fpxxo": "Copyright (C) 2014-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "compute_fp_modes": "This function will return the valid FP modes for the specified state.",
  "current_mode_valid_p": "Check the current mode is suitable for the specified state.",
  "load_object": "Load OBJ and check that it was/was not loaded correctly.",
  "unload_object": "Remove an object and check the state remains valid.",
  "test_permutations": "Load every permutation of OBJECTS.",
  "rtld_mutex_dummy": "Dummy implementation.  See __rtld_mutex_init.",
  "__clock_getres": "Get resolution of clock.",
  "euidaccess": "Return 0 if the user has permission of type MODE on file PATH;\n   otherwise, return -1 and set `errno' to EACCESS.\n   Like access, except that it uses the effective user and group\n   id's instead of the real ones, and it does not check for read-only\n   filesystem, text busy, etc.",
  "__getcwd_generic": "Get the name of the current working directory, and put it in SIZE\n   bytes of BUF.  Returns NULL with errno set if the directory couldn't be\n   determined or SIZE was too small.  If successful, returns BUF.  In GNU,\n   if BUF is NULL, an array is allocated with 'malloc'; the array is SIZE\n   bytes long, unless SIZE == 0, in which case it is as big as necessary.",
  "__libc_message_impl": "Abort with an error message.",
  "__libc_pause": "Suspend the process until a signal arrives.\n   This always returns -1 and sets errno to EINTR.",
  "__posix_fallocate64_l64": "Reserve storage for the data of the file associated with FD.",
  "PREADV": "Read data from file descriptor FD at the given position OFFSET\n   without change the file pointer, and put the result in the buffers\n   described by VECTOR, which is a vector of COUNT 'struct iovec's.\n   The buffers are filled in the order specified.  Operates just like\n   'pread' (see <unistd.h>) except that data are put in VECTOR instead\n   of a contiguous buffer.",
  "PWRITEV": "Write data pointed by the buffers described by IOVEC, which is a\n   vector of COUNT 'struct iovec's, to file descriptor FD at the given\n   position OFFSET without change the file pointer.  The data is\n   written in the order specified.  Operates just like 'write' (see\n   <unistd.h>) except that the data are taken from IOVEC instead of a\n   contiguous buffer.",
  "__bsd_signal": "Set the handler for the signal SIG to HANDLER,\n   returning the old handler, or SIG_ERR on error.",
  "add_region": "Add a new profiling region.  If the new region overlaps with\n   existing ones, this may add multiple subregions so that the final\n   data structure is free of overlaps.  The absence of overlaps makes\n   it possible to use a binary search in profil_count().  Note that\n   this function depends on new regions being presented in DECREASING\n   ORDER of starting address.",
  "do_system": "Execute LINE as a shell command, returning its status.",
  "direxists": "Return nonzero if DIR is an existent directory.",
  "test_cache": "errnop is required in order to work around BZ #20802.",
  "__novmx__libc_siglongjmp": "Set the signal mask to the one specified in ENV, and jump\n   to the position specified in ENV, causing the setjmp\n   call there to return VAL, or 1 if VAL is 0.",
  "__novmx__sigjmp_save": "This function is called by the `sigsetjmp' macro\n   before doing a `__setjmp' on ENV[0].__jmpbuf.\n   Always return zero.",
  "__vmx__sigjmp_save": "This function is called by the `sigsetjmp' macro\n   before doing a `__setjmp' on ENV[0].__jmpbuf.\n   Always return zero.",
  "get_thread_priority": "Read the thread priority value set in the PPR.",
  "check_thread_priority": "Check the thread priority bits of PPR are set as expected.",
  "prime_special_regs": "More-or-less arbitrary; this is a QNaN.",
  "__elf_preferred_address": "The idea here is that to conform to the ABI, we are supposed to try\n   to load dynamic objects between 0x10000 (we actually use 0x40000 as\n   the lower bound, to increase the chance of a memory reference from\n   a null pointer giving a segfault) and the program's load address;\n   this may allow us to use a branch instruction in the PLT rather\n   than a computed jump.  The address is only used as a preference for\n   mmap, so if we get it wrong the worst that happens is that it gets\n   mapped somewhere else.",
  "__elf_machine_runtime_setup": "There are many kinds of PLT entries:\n\n   (1)\tA direct jump to the actual routine, either a relative or\n\tabsolute branch.  These are set up in __elf_machine_fixup_plt.\n\n   (2)\tShort lazy entries.  These cover the first 8192 slots in\n        the PLT, and look like (where 'index' goes from 0 to 8191):\n\n\tli %r11, index*4\n\tb  &plt[PLT_TRAMPOLINE_ENTRY_WORDS+1]\n\n   (3)\tShort indirect jumps.  These replace (2) when a direct jump\n\twouldn't reach.  They look the same except that the branch\n\tis 'b &plt[PLT_LONGBRANCH_ENTRY_WORDS]'.\n\n   (4)  Long lazy entries.  These cover the slots when a short entry\n\twon't fit ('index*4' overflows its field), and look like:\n\n\tlis %r11, %hi(index*4 + &plt[PLT_DATA_START_WORDS])\n\tlwzu %r12, %r11, %lo(index*4 + &plt[PLT_DATA_START_WORDS])\n\tb  &plt[PLT_TRAMPOLINE_ENTRY_WORDS]\n\tbctr\n\n   (5)\tLong indirect jumps.  These replace (4) when a direct jump\n\twouldn't reach.  They look like:\n\n\tlis %r11, %hi(index*4 + &plt[PLT_DATA_START_WORDS])\n\tlwz %r12, %r11, %lo(index*4 + &plt[PLT_DATA_START_WORDS])\n\tmtctr %r12\n\tbctr\n\n   (6) Long direct jumps.  These are used when thread-safety is not\n       required.  They look like:\n\n       lis %r12, %hi(finaladdr)\n       addi %r12, %r12, %lo(finaladdr)\n       mtctr %r12\n       bctr\n\n\n   The lazy entries, (2) and (4), are set up here in\n   __elf_machine_runtime_setup.  (1), (3), and (5) are set up in\n   __elf_machine_fixup_plt.  (1), (3), and (6) can also be constructed\n   in __process_machine_rela.\n\n   The reason for the somewhat strange construction of the long\n   entries, (4) and (5), is that we need to ensure thread-safety.  For\n   (1) and (3), this is obvious because only one instruction is\n   changed and the PPC architecture guarantees that aligned stores are\n   atomic.  For (5), this is more tricky.  When changing (4) to (5),\n   the `b' instruction is first changed to `mtctr'; this is safe\n   and is why the `lwzu' instruction is not just a simple `addi'.\n   Once this is done, and is visible to all processors, the `lwzu' can\n   safely be changed to a `lwz'.",
  "do_reloc16": "During relocation all TLS symbols are defined and used.\t      \\\n\t Therefore the offset is already correct.",
  "compute_level": "Return the x86-64-vN level, 1 for the baseline.",
  "__pthread_atfork": "Don't mark the compatibility function as hidden.",
  "sem_search": "Comparison function for search of existing mapping.",
  "__sem_check_add_mapping": "Search for existing mapping and if possible add the one provided.",
  "child_wait": "Code executed by each thread.",
  "do_nothing": "Thread callback which does nothing, so that the thread exits\n   immediatedly.",
  "useless": "This is never called, just here to get pthreads linked in.",
  "choose_action": "Function to choose an action to do, depending on mtx_trylock\n   return value.",
  "check_alignment": "Use noinline in combination with not static to ensure that the\n   alignment check is really done.  Otherwise it was optimized out!",
  "setuid_thread": "Start routine for the threads.",
  "is_invalid_barrier_ret": "True if x is not a successful return code from pthread_barrier_wait.",
  "__tls_get_offset": "On s390, the literal pool entry that refers to __tls_get_offset\n   is not removed, even if all branches that use the literal pool\n   entry gets removed by TLS optimizations.  To get binaries\n   statically linked __tls_get_offset is defined here but\n   aborts if it is used.",
  "__bsd_openpt": "Open a master pseudo terminal and return its file descriptor.",
  "__libc_tcdrain": "Wait for pending output to be written on FD.",
  "tcflow": "Suspend or restart transmission on FD.",
  "tcflush": "Flush pending data on FD.",
  "__tcgetattr": "Put the state of FD into *TERMIOS_P.",
  "tcgetpgrp": "Return the foreground process group ID of FD.",
  "tcsendbreak": "Send zero bits on FD.",
  "tcsetattr": "Set the state of FD to *TERMIOS_P.",
  "__tcsetpgrp": "Set the foreground process group ID of FD set PGRP_ID.",
  "unlockpt": "Unlock the slave pseudo terminal associated with the master pseudo\n   terminal specified by FD.",
  "__check_pf_freemem": "Free the cache if it has been allocated.",
  "__clock_getres64": "Get resolution of clock.",
  "__clock_nanosleep_time64": "We can simply use the syscall.  The CPU clocks are not supported\n   with this function.",
  "__clock_settime64": "Set CLOCK to value TP.",
  "__closefrom_fallback": "Fallback code: iterates over /proc/self/fd, closing each file descriptor\n   that fall on the criteria.  If DIRFD_FALLBACK is set, a failure on\n   /proc/self/fd open will trigger a fallback that tries to close a file\n   descriptor before proceed.",
  "__convert_scm_timestamps": "It converts the first SO_TIMESTAMP or SO_TIMESTAMPNS with 32-bit time and\n   appends it to the control buffer.  The 32-bit time field is kept as-is.\n\n   Calls with __TIMESIZE=32 will see the converted 64-bit time control\n   messages as spurious control message of unknown type.\n\n   Calls with __TIMESIZE=64 running on pre-time64 kernels will see the\n   original message as a spurious control ones of unknown typ while running\n   on kernel with native 64-bit time support will only see the time64 version\n   of the control message.",
  "__creat": "Create FILE with protections MODE.",
  "__creat64": "Create FILE with protections MODE.",
  "print_auxv": "Dump the auxiliary vector to standard output.",
  "print_utsname_entry": "Print one uname entry.",
  "print_uname": "Print information from uname, including the kernel version.",
  "_dl_sysdep_parse_arguments": "Separate function, so that dl_main can be called without the large\n   array on the stack.",
  "epoll_pwait": "Wait for events on an epoll instance \"epfd\". Returns the number of\n   triggered events returned in \"events\" buffer. Or -1 in case of\n   error with the \"errno\" variable set to the specific error code. The\n   \"events\" parameter is a buffer that will contain triggered\n   events. The \"maxevents\" is the maximum number of events to be\n   returned ( usually size of \"events\" ). The \"timeout\" parameter\n   specifies the maximum wait time in milliseconds (-1 == infinite).\n   The thread's signal mask is temporarily and atomically replaced with\n   the one provided as parameter.",
  "execveat": "Execute the file FD refers to, overlaying the running program image.\n   ARGV and ENVP are passed to the new program, as for 'execve'.",
  "fallocate": "Reserve storage for the data of the file associated with FD.",
  "fallocate64": "Reserve storage for the data of the file associated with FD.",
  "__futimens64": "Change the access time of the file associated with FD to TSP[0] and\n   the modification time of FILE to TSP[1].\n\n   Starting with 2.6.22 the Linux kernel has the utimensat syscall which\n   can be used to implement futimens.",
  "__futimes64": "Change the access time of the file associated with FD to TVP[0] and\n   the modification time of FILE to TVP[1].",
  "__futimesat64": "Change the access time of FILE relative to FD to TVP[0] and\n   the modification time of FILE to TVP[1].",
  "___fxstat64": "Get information about the file FD in BUF.",
  "__getdents": "Pack the dirent64 struct down into 32-bit offset/inode fields, and\n   ensure that no overflow occurs.",
  "__getlogin_r_loginuid": "Try to determine login name from /proc/self/loginuid and return 0\n   if successful.  If /proc/self/loginuid cannot be read return -1.\n   Otherwise return the error number.",
  "__old_getrlimit": "Back compatible 2Gig limited rlimit.",
  "__get_sol": "Try to determine the socket level value.  Ideally both side and\n   family are set.  But sometimes only the size is correct and the\n   family value might be bogus.  Loop over the array entries and look\n   for a perfect match or the first match based on size.",
  "__netlink_open": "Open a NETLINK socket.",
  "map_newlink": "We know the number of RTM_NEWLINK entries, so we reserve the first\n   # of entries for this type. All RTM_NEWADDR entries have an index\n   pointer to the RTM_NEWLINK entry.  To find the entry, create\n   a table to map kernel index entries to our index numbers.\n   Since we get at first all RTM_NEWLINK entries, it can never happen\n   that a RTM_NEWADDR index is not known to this map.",
  "getifaddrs_internal": "Create a linked list of `struct ifaddrs' structures, one for each\n   network interface on the host machine.  If successful, store the\n   list in *IFAP and return 0.  On errors, return -1 and set `errno'.",
  "lseek_overflow": "Test for overflows of structures where we ask the kernel to fill them\n   in with standard 64-bit syscalls but return them through APIs that\n   only expose the low 32 bits of some fields.",
  "___lxstat64": "Get information about the file NAME in BUF.",
  "__mq_close": "Removes the association between message queue descriptor MQDES and its\n   message queue.",
  "__mq_getattr": "Query status and attributes of message queue MQDES.",
  "change_sigmask": "Modify the signal mask.  We move this into a separate function so\n   that the stack space needed for sigset_t is not deducted from what\n   the thread can use.",
  "notification_function": "The function used for the notification.",
  "helper_thread": "Helper thread.",
  "__mq_notify": "Register notification upon message arrival to an empty message queue\n   MQDES.",
  "__mq_receive": "Receive the oldest from highest priority messages in message queue\n   MQDES.",
  "__mq_send": "Add message pointed by MSG_PTR to message queue MQDES.",
  "___mq_timedreceive_time64": "Receive the oldest from highest priority messages in message queue\n   MQDES, stop waiting if ABS_TIMEOUT expires.",
  "___mq_timedsend_time64": "Add message pointed by MSG_PTR to message queue MQDES, stop blocking\n   on full message queue if ABS_TIMEOUT expires.",
  "__mq_unlink": "Remove message queue named NAME.",
  "msgget": "Return descriptor for message queue associated with KEY.  The MSGFLG\n   parameter describes how to proceed with clashing of key values.",
  "__ntp_gettime64": "clock_adjtime64 with CLOCK_REALTIME does not trigger EINVAL,\n   ENODEV, or EOPNOTSUPP.  It might still trigger EPERM.",
  "__ntp_gettimex64": "clock_adjtime64 with CLOCK_REALTIME does not trigger EINVAL,\n   ENODEV, or EOPNOTSUPP.  It might still trigger EPERM.",
  "__libc_openat": "Open FILE with access OFLAG.  Interpret relative paths relative to\n   the directory associated with FD.  If OFLAG includes O_CREAT or\n   O_TMPFILE, a fourth argument is the file protection.",
  "__libc_openat64": "Open FILE with access OFLAG.  Interpret relative paths relative to\n   the directory associated with FD.  If OFLAG includes O_CREAT or\n   O_TMPFILE, a fourth argument is the file protection.",
  "__statfs_link_max": "Used like: return statfs_link_max (__statfs (name, &buf), &buf);",
  "__statfs_filesize_max": "Used like: return statfs_filesize_max (__statfs (name, &buf), &buf);",
  "__statfs_symlinks": "Used like: return statfs_link_max (__statfs (name, &buf), &buf);",
  "__statfs_chown_restricted": "Used like: return __statfs_chown_restricted (__statfs (name, &buf), &buf);",
  "parse_fdinfo": "Parse the PID field in the fdinfo entry, if existent.  Avoid strtol or\n   similar to not be locale dependent.",
  "__prctl": "Unconditionally read all potential arguments.  This may pass\n   garbage values to the kernel, but avoids the need for teaching\n   glibc the argument counts of individual options (including ones\n   that are added to the kernel in the future).",
  "__readdir_unlocked": "Read a directory entry from DIRP.",
  "sched_getcpu": "RSEQ_SIG",
  "__select64": "Check the first NFDS descriptors each in READFDS (if not NULL) for read\n   readiness, in WRITEFDS (if not NULL) for write readiness, and in EXCEPTFDS\n   (if not NULL) for exceptional conditions.  If TIMEOUT is not NULL, time out\n   after waiting the interval specified therein.  Returns the number of ready\n   descriptors, or -1 for errors.",
  "__old_semctl": "Since semctl use a variadic argument for semid_ds there is not need to\n   define and tie the compatibility symbol to the old 'union semun'\n   definition.",
  "semget": "Return identifier for array of NSEMS semaphores associated with\n   KEY.",
  "semop": "Perform user-defined atomic operation of array of semaphores.",
  "__semtimedop64": "Perform user-defined atomic operation of array of semaphores.",
  "__semtimedop": "Perform user-defined atomic operation of array of semaphores.",
  "__setrlimit64": "Set the soft and hard limits for RESOURCE to *RLIMITS.\n   Only the super-user can increase hard limits.\n   Return 0 if successful, -1 if not (and sets errno).",
  "__settimeofday64": "Set the current time of day and timezone information.\n   This call is restricted to the super-user.",
  "__settimeofday": "Set the current time of day and timezone information.\n   This call is restricted to the super-user.",
  "__settimezone": "Set the system-wide timezone.\n   This call is restricted to the super-user.",
  "__set_vma_name": "If PR_SET_VMA_ANON_NAME is not supported by the kernel, prctl returns\n   EINVAL.  However, it also returns the same error for invalid argument.\n   Since it is an internal-only API, it assumes well formatted input:\n   aligned START, with (START, START+LEN) being a valid memory range,\n   and NAME with a limit of 80 characters without invalid one (\"\\\\`$[]\").",
  "shmat": "Attach the shared memory segment associated with SHMID to the data\n   segment of the calling process.  SHMADDR and SHMFLG determine how\n   and where the segment is attached.",
  "__shmctl64": "Provide operations to control over shared memory segments.",
  "shmdt": "Detach shared memory segment starting at address specified by SHMADDR\n   from the caller's data segment.",
  "shmget": "Return an identifier for an shared memory segment of at least size SIZE\n   which is associated with KEY.",
  "posix_spawnattr_getcgroup_np": "Get scheduling policy from the attribute structure.",
  "posix_spawnattr_setcgroup_np": "Store scheduling policy in the attribute structure.",
  "__spawni_child": "Function used in the clone call to setup the signals mask, posix_spawn\n   attributes, and file actions.  It run on its own stack (provided by the\n   posix_spawn call).",
  "__spawnix": "Spawn a new process executing PATH with the attributes describes in *ATTRP.\n   Before running the process perform the actions described in FILE-ACTIONS.",
  "cfgetospeed": "Return the output baud rate stored in *TERMIOS_P.",
  "cfgetispeed": "Return the input baud rate stored in *TERMIOS_P.",
  "cfsetospeed": "Set the output baud rate stored in *TERMIOS_P to SPEED.",
  "__tcsetattr": "Set the state of FD to *TERMIOS_P.",
  "check_error_in_list": "Return true if CODE is contained in the array [CODES, CODES +\n   COUNT].",
  "time": "Return the time now, and store it in *TIMER if not NULL.",
  "__time64": "Return the time now, and store it in *TIMER if not NULL.",
  "timer_sigev_thread": "Helper thread to call the user-provided function.",
  "timer_helper_thread": "Helper function to support starting threads for SIGEV_THREAD.",
  "__timer_fork_subprocess": "Reset variables so that after a fork a new helper thread gets started.",
  "__timespec_get64": "Set TS to calendar time based in time base BASE.",
  "__timespec_getres64": "Set TS to resolution of time base BASE.",
  "early_test": "Tries to check that the initial set of CPUs is complete and that\n   the main thread will not run on any other threads.",
  "futex_wait": "We need acquire MO here so that we synchronize with the\t\t\\\n       kernel's store to 0 when the clone terminates.",
  "large_buffer_check": "Called by large_buffer_checks below.",
  "large_buffer_checks": "Bug 24740: Make sure that the system call argument is adjusted\n   properly for the int type.  A large value should stay a large\n   value, and not wrap around to something small, causing the system\n   call to fail with EINVAL.",
  "thread_pause_noreturn": "Thread which calls pause without expecting it to return.  The TID\n   of this thread is used as the target in the kill function call.",
  "thread_read_signal": "Thread which is expected to receive the signal.",
  "test_vfork": "Check for interactions with vfork.",
  "get_seals": "Return the seals set on FD.",
  "is_sealed": "Return true if the F_SEAL_SEAL flag is set on the descriptor.",
  "get_page": "Allocate a page using mmap.",
  "probe_lock": "Return true if the file at path is currently locked, false if\n   not.",
  "check_page_access": "Check if PAGE is readable (if !WRITE) or writable (if WRITE).",
  "get_thread_func": "Return the thread's access rights for the keys under test.",
  "delayed_thread_func": "Wait for initialization and then check that the current thread does\n   not have access through the keys under test.",
  "check_rseq_disabled": "Check that rseq can be registered and has not been taken by glibc.",
  "do_rseq_test": "RSEQ_SIG",
  "do_test_large_buffer": "Check if recvmsg create the additional 64 bit timestamp if only 32 bit\n   is enabled for 64 bit recvmsg symbol.",
  "do_test_small_buffer": "Check if recvmsg does not create the additional 64 bit timestamp if\n   only 32 bit timestamp is enabled if the ancillary buffer is not large\n   enough.  Also checks if MSG_CTRUNC is set iff for 64 bit recvmsg\n   symbol.",
  "do_test_slack_space": "Check if the extra ancillary space is correctly handled by recvmsg and\n   recvmmsg with different extra space for the ancillaty buffer.",
  "do_recvmsg_multiple_ancillary": "Check if the converted 64-bit timestamp is correctly appended when there\n   are multiple ancillary messages.",
  "read_proc_file": "It tries to obtain some system-wide SysV shared memory information from\n   /proc to check against IPC_INFO/SHM_INFO.  The /proc only returns the\n   tunables value of SHMALL, SHMMAX, and SHMMNI.",
  "check_msginfo": "Check if the message queue with IDX (index into the kernel's internal\n   array) matches the one with KEY.  The CMD is either MSG_STAT or\n   MSG_STAT_ANY.",
  "read_sem_stat": "It tries to obtain some system-wide SysV semaphore information from /proc\n   to check against IPC_INFO/SEM_INFO.  The /proc only returns the tunables\n   value of SEMMSL, SEMMNS, SEMOPM, and SEMMNI.\n\n   The kernel also returns constant value for SEMVMX, SEMMNU, SEMMAP, SEMUME,\n   and also SEMUSZ and SEMAEM (for IPC_INFO).  The issue to check them is they\n   might change over kernel releases.",
  "check_seminfo": "Check if the semaphore with IDX (index into the kernel's internal array)\n   matches the one with KEY.  The CMD is either SEM_STAT or SEM_STAT_ANY.",
  "check_shminfo": "Check if the message queue with IDX (index into the kernel's internal\n   array) matches the one with KEY.  The CMD is either SHM_STAT or\n   SHM_STAT_ANY.",
  "subprocess_no_tid_match": "Send signals from the subprocess which are not expected to be\n   delivered.  There is no handler for SIGUSR2, so delivery will\n   result in a test failure.  CLOSURE must point to a valid PID/TID\n   combination that is still running.",
  "proc_fd_readlink": "returns a pointer to static storage",
  "run_ttyname": "strings in result structure are in static storage",
  "run_ttyname_r": "strings in result structure are in static storage",
  "doit": "combined runner",
  "adjust_file_limit": "Adjust the file limit so that we have a chance to open PTY.",
  "run_chroot_tests": "main test",
  "do_in_chroot_1": "These chroot setup functions put the TTY at at \"/console\" (where it\n   won't be found by ttyname), and create \"/dev/console\" as an\n   ordinary file.  This way, it's easier to write test-cases that\n   expect ttyname to fail; test-cases that expect it to succeed need\n   to explicitly remount it at \"/dev/console\".",
  "__utimensat64_helper": "Helper function defined for easy reusage of the code which calls utimensat\n   and utimensat_time64 syscall.",
  "___xstat64": "Get information about the file NAME in BUF.",
  "__makecontext": "XXX: This implementation currently only handles integer arguments.\n   To handle long int and pointer arguments the va_arg arguments needs\n   to be changed to long and also the stdlib/tst-setcontext.c file needs\n   to be changed to pass long arguments to makecontext.",
  "__syscall_error": "This routine is jumped to by all the syscall handlers, to stash\n   an error number into errno.",
  "__sethae": "No need to examine error -- sethae never fails.",
  "dense_port_to_cpu_addr": "* Now define the inline functions for CPUs supporting byte/word insns,\n * and whose core logic supports I/O space accesses utilizing them.\n *\n * These routines could be used by MIATA, for example, because it has\n * and EV56 plus PYXIS, but it currently uses SPARSE anyway. This is\n * also true of RX164 which used POLARIS, but we will choose to use\n * these routines in that case instead of SPARSE.\n *\n * These routines are necessary for TSUNAMI/TYPHOON based platforms,\n * which will have (at least) EV6.",
  "init_iosys": "* Initialize I/O system.",
  "__old_globfree": "Free storage allocated in PGLOB by a previous `glob' call.",
  "__adjtime_tv32": "mode selector",
  "__gettimeofday_tv32": "Get the current time of day and timezone information putting it\n   into *TV and *TZ.",
  "__settimeofday_tv32": "Set the current time of day and timezone information.\n   This call is restricted to the super-user.",
  "outb": "The remaining functions do not have any way to indicate failure.\n   However, it is only valid to call them after calling ioperm/iopl,\n   which will have indicated failure.",
  "_flush_cache": "Flush cache(s).",
  "__clone": "The OpenRISC ABI uses the stack for varargs like those using in clone\n   but the linux syscall ABI uses registers.\n   This function moves from varargs to regs.",
  "__lll_elision_init": "Initialize elision.",
  "__lll_lock_elision": "Adaptive lock using transactions.\n   By default the lock region is run as a transaction, and when it\n   aborts or the lock is busy the lock adapts itself.",
  "__lll_trylock_elision": "Try to elide a futex trylock.  FUTEX is the futex variable.  ADAPT_COUNT is\n   the adaptation counter in the mutex.",
  "login32": "Write the given entry into utmp and wtmp.",
  "getutid32": "Search forward from the current point in the utmp file until the\n   next entry with a ut_type matching ID->ut_type.",
  "getutline32": "Search forward from the current point in the utmp file until the\n   next entry with a ut_line matching LINE->ut_line.",
  "pututline32": "Write out entry pointed to by UTMP_PTR into the utmp file.",
  "getutent32": "Read next entry from a utmp-like file.",
  "getutent32_r": "Reentrant versions of the file for handling utmp files.",
  "updwtmp32": "Append entry UTMP to the wtmp-like file WTMP_FILE.",
  "getutxent32": "Get the next entry from the user accounting database.",
  "getutxid32": "Get the user accounting database entry corresponding to ID.",
  "getutxline32": "Get the user accounting database entry corresponding to LINE.",
  "pututxline32": "Write the entry UTMPX into the user accounting database.",
  "updwtmpx32": "Append entry UTMP to the wtmpx-like file WTMPX_FILE.",
  "getutmp32": "Copy the information in UTMPX to UTMP.",
  "getutmpx32": "Copy the information in UTMP to UTMPX.",
  "__allocate_shadow_stack": "NB: This can be treated as a syscall by caller.",
  "__arch_prctl": "Since x32 arch_prctl stores 32-bit base address of segment registers\n   %fs and %gs as unsigned 64-bit value via ARCH_GET_FS and ARCH_GET_GS,\n   we use an unsigned 64-bit variable to hold the base address and copy\n   it to ADDR after the system call returns.",
  "__cache_sysconf": "Get the value of the system variable NAME.",
  "__libc_longjmp": "Since __libc_longjmp is a private interface for cancellation\n   implementation in libpthread, there is no need to restore shadow\n   stack register.",
  "get_cpuinfo": "Search for flags in /proc/cpuinfo and store line\n   in cpu_flags.",
  "fill_stack": "Fill the stack with non-zero values.  This makes a crash in\n   snprintf more likely.",
  "acc_split": "Given a number with high part HI and low part LO, add the number X\n   to it and store the result in *RHI and *RLO.  It is given that\n   either |X| < |0.7 * HI|, or HI == LO == 0, and that the values are\n   small enough that no overflow occurs.  The result does not need to\n   be exact to 128 bits; 78-bit accuracy of the final accumulated\n   result suffices.",
  "__powl_helper": "Given X a value that is finite and nonzero, or a NaN, and Y a\n   finite nonzero value with 0x1p-79 <= |Y| <= 0x1p78, compute X to\n   the power Y.",
  "dl_check_legacy_object": "Check if the object M and its dependencies are legacy object.",
  "dl_cet_check_startup": "Enable IBT and SHSTK only if they are enabled in executable.  Set\n   feature bits properly at the start of the program.",
  "dl_cet_check_dlopen": "Check feature bits when dlopening the shared object M.",
  "_dl_cet_setup_features": "Set GL(dl_x86_feature_1) to the enabled features and clear the\n   active bits of the disabled features.",
  "__tls_get_addr_slow": "Only handle slow paths for __tls_get_addr.",
  "in_dso_1": "Check compatibility of CET-enabled executable with legacy shared\n   object.\n   Copyright (C) 2018-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "in_dso_2": "Check compatibility of CET-enabled executable with legacy shared\n   object.\n   Copyright (C) 2018-2024 Free Software Foundation, Inc.\n   This file is part of the GNU C Library.\n\n   The GNU C Library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU Lesser General Public\n   License as published by the Free Software Foundation; either\n   version 2.1 of the License, or (at your option) any later version.\n\n   The GNU C Library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n   Lesser General Public License for more details.\n\n   You should have received a copy of the GNU Lesser General Public\n   License along with the GNU C Library; if not, see\n   <https://www.gnu.org/licenses/>.",
  "find_edge_in_needle": "Returns the index of the first edge within the needle, returns 0 if no edge\n is found. Example: 'ab' is the first edge in 'aaaaaaaaaabaarddg'",
  "verify_string_match": "Compare needle with haystack byte by byte at specified location",
  "verify_string_match_avx512": "Compare needle with haystack at specified location. The first 64 bytes are\n compared using a ZMM register.",
  "msgctl": "Allows to control internal state and destruction of message queue\n   objects.",
  "msgrcv": "Read a message from the queue associated with the message queue\n   descriptor MSQID.  At most MSGSZ bytes of the message are placed\n   in the buffer specified by the MSGP parameter.  The MSGTYP parameter\n   describes which message is returned in MSGFLG describes the behaviour\n   in buffer overflow or queue underflow.",
  "msgsnd": "Send a message to the queue associated with the message queue\n   descriptor MSQID.  The parameter MSGP points to a structure\n   describing messages where the parameter MSGSZ gives the length\n   of the text.  The MSGFLG parameter describes the action taken\n   when the limit of the message queue length is reached.",
  "semctl": "Return identifier for array of NSEMS semaphores associated with\n   KEY.",
  "shmctl": "Provide operations to control over shared memory segments.",
  "cfmakeraw": "Set *T to indicate raw mode.",
  "cfsetspeed": "Set both the input and output baud rates stored in *TERMIOS_P to SPEED.",
  "tcgetsid": "Return the session ID of FD.",
  "__asctime_r": "Like asctime, but write result to the user supplied buffer.  The\n   buffer is only guaranteed to be 26 bytes in length.",
  "asctime": "Returns a string of the form \"Day Mon dd hh:mm:ss yyyy\\n\"\n   which is the representation of TP in that form.",
  "output_to_template_file": "specified as the argument",
  "process_getdate_on": "file with template and prints the result",
  "__ctime64": "Return a string as returned by asctime which\n   is the representation of *T in that form.",
  "__ctime64_r": "Return a string as returned by asctime which is the representation\n   of *T in that form.  Reentrant version.",
  "subtract": "Return the difference between TIME1 and TIME0, where TIME0 <= TIME1.\n   time_t is known to be an integer type.",
  "__difftime64": "Return the difference between TIME1 and TIME0.",
  "_nl_init_era_entries": "Look up the era information in CURRENT's locale strings and\n   cache it in CURRENT->private.",
  "first_wday": "Returns the first weekday WDAY of month MON in the year YEAR.",
  "check_mday": "Returns 1 if MDAY is a valid day of the month in month MON of year\n   YEAR, and 0 if it is not.",
  "___gettimeofday": "Get the current time of day, putting it into *TV.\n   If *TZ is not NULL, clear it.\n   Returns 0 on success, -1 on errors.",
  "__gmtime64_r": "Return the `struct tm' representation of *T in UTC,\n   using *TP to store the result.",
  "__localtime64_r": "Return the `struct tm' representation of *T in local time,\n   using *TP to store the result.",
  "shr": "Shift A right by B bits portably, by dividing A by 2**B and\n   truncating towards minus infinity.  B should be in the range 0 <= B\n   <= LONG_INT_BITS - 2, where LONG_INT_BITS is the number of useful\n   bits in a long_int.  LONG_INT_BITS is at least 32.\n\n   ISO C99 says that A >> B is implementation-defined if A < 0.  Some\n   implementations (e.g., UNICOS 9.0 on a Cray Y-MP EL) don't shift\n   right in the usual way when A < 0, so SHR falls back on division if\n   ordinary A >> B doesn't seem to be the usual signed shift.",
  "leapyear": "Is YEAR + TM_YEAR_BASE a leap year?",
  "isdst_differ": "Do the values A and B differ according to the rules for tm_isdst?\n   A and B differ if one is zero and the other positive.",
  "ydhms_diff": "Return an integer value measuring (YEAR1-YDAY1 HOUR1:MIN1:SEC1) -\n   (YEAR0-YDAY0 HOUR0:MIN0:SEC0) in seconds, assuming that the clocks\n   were not adjusted between the timestamps.\n\n   The YEAR values uses the same numbering as TP->tm_year.  Values\n   need not be in the usual range.  However, YEAR1 - YEAR0 must not\n   overflow even when multiplied by three times the number of seconds\n   in a year, and likewise for YDAY1 - YDAY0 and three times the\n   number of seconds in a day.",
  "long_int_avg": "Return the average of A and B, even if A + B would overflow.\n   Round toward positive infinity.",
  "convert_time": "Use CONVERT to convert T to a struct tm value in *TM.  T must be in\n   range for __time64_t.  Return TM if successful, NULL (setting errno) on\n   failure.",
  "ranged_convert": "Use CONVERT to convert *T to a broken down time in *TP.\n   If *T is out of range for conversion, adjust it so that\n   it is the nearest in-range value and then convert that.\n   A value is in range if it fits in both __time64_t and long_int.\n   Return TP on success, NULL (setting errno) on failure.",
  "__mktime_internal": "Convert *TP to a __time64_t value, inverting\n   the monotonic and mostly-unit-linear conversion function CONVERT.\n   Use *OFFSET to keep track of a guess at the offset of the result,\n   compared to what the result would be for UTC without leap seconds.\n   If *OFFSET's guess is correct, only one CONVERT call is needed.\n   If successful, set *TP to the canonicalized struct tm;\n   otherwise leave *TP alone, return ((time_t) -1) and set errno.\n   This function is external because it is used also by timegm.c.",
  "__mktime64": "Convert *TP to a __time64_t value.",
  "__offtime": "Compute the `struct tm' representation of T,\n   offset OFFSET seconds east of UTC,\n   and store year, yday, mon, mday, wday, hour, min, sec into *TP.\n   Return nonzero if successful.",
  "__stime": "Set the system clock to *WHEN.",
  "my_strftime": "Write information from TP into S according to the format\n   string FORMAT, writing no more that MAXSIZE characters\n   (including the terminating '\\0') and returning number of\n   characters written.  If S is NULL, nothing will be written\n   anywhere, so to determine how many characters would be\n   written, use NULL for S and (size_t) UINT_MAX for MAXSIZE.",
  "emacs_strftime": "For Emacs we have a separate interface which corresponds to the normal\n   strftime function and does not have the extra information whether the\n   TP arguments comes from a `gmtime' call or not.",
  "day_of_the_week": "Compute the day of the week.",
  "day_of_the_year": "Compute the day of the year.",
  "timespec_get": "Set TS to calendar time based in time base BASE.",
  "timespec_getres": "Set TS to resolution of time base BASE.",
  "clock_nanosleep_test": "Test that clock_nanosleep() does sleep.",
  "set_timezone": "Set the specified time zone with error checking.",
  "spring_forward_gap": "Fail if mktime fails to convert a date in the spring-forward gap.\n   Based on a problem report from Andreas Jaeger.",
  "print_string_hex": "Helper function to compare strings and print out mismatches in a\n   format suitable for maintaining this test.  TEST_COMPARE_STRINGS\n   prints out a less suitable format.",
  "tm_to_printed": "Helper function to create a printable version of struct tm.",
  "mkbuf": "mkbuf - Write a test string for strptime with the specified time\n   value and number of digits into the supplied buffer, and return\n   the expected strptime test result.\n\n   The test string, buf, is written with the following content:\n     a dummy string matching strptime \"%s\" format specifier,\n     whitespace matching strptime \" \" format specifier, and\n     timezone string matching strptime \"%z\" format specifier.\n\n   Note that a valid timezone string is either \"Z\" or contains the\n   following fields:\n     Sign field consisting of a '+' or '-' sign,\n     Hours field in two decimal digits, and\n     optional Minutes field in two decimal digits. Optionally,\n     a ':' is used to separate hours and minutes.\n\n   This function may write test strings with minutes values outside\n   the valid range 00-59.  These are invalid strings and useful for\n   testing strptime's rejection of invalid strings.\n\n   The ndigits parameter is used to limit the number of timezone\n   string digits to be written and may range from 0 to 4.  Note that\n   only 2 and 4 digit strings are valid input to strptime; strings\n   with 0, 1 or 3 digits are invalid and useful for testing strptime's\n   rejection of invalid strings.\n\n   This function returns the behavior expected of strptime resulting\n   from parsing the the test string.  For valid strings, the function\n   returns the expected tm_gmtoff value.  For invalid strings,\n   LONG_MAX is returned.  LONG_MAX indicates the expectation that\n   strptime will return NULL; for example, if the number of digits\n   are not correct, or minutes part of the time is outside the valid\n   range of 00 to 59.",
  "describe": "Write a description of expected or actual test result to stdout.",
  "__tzfile_default": "The user specified a hand-made timezone, but not its DST rules.\n   We will use the names and offsets from the user, and the rules\n   from the TZDEFRULES file.",
  "__tzstring_len": "Allocate a permanent home for the first LEN characters of S.  It\n   will never be moved or deallocated, but may share space with other\n   strings.  Don't modify the returned string.",
  "__tzstring": "Allocate a permanent home for S.  It will never be moved or\n   deallocated, but may share space with other strings.  Don't modify\n   the returned string.",
  "parse_tzname": "Parses the time zone abbreviation at *TZP, and writes a pointer to an\n   interned string to tz_rules[WHICHRULE].name.  On success, advances\n   *TZP, and returns true.  Returns false otherwise.",
  "parse_offset": "Parses the time zone offset at *TZP, and writes it to\n   tz_rules[WHICHRULE].offset.  Returns true if the parse was\n   successful.",
  "parse_rule": "Parses the standard <-> DST rules at *TZP.  Updates\n   tz_rule[WHICHRULE].  On success, advances *TZP and returns true.\n   Otherwise, returns false.",
  "__tzset_parse_tz": "Parse the POSIX TZ-style string.",
  "tzset_internal": "Interpret the TZ envariable.",
  "compute_change": "Figure out the exact time (as a __time64_t) in YEAR\n   when the change described by RULE will occur and\n   put it in RULE->change, saving YEAR in RULE->computed_for.",
  "__tz_compute": "Figure out the correct timezone for TM and set `__tzname',\n   `__timezone', and `__daylight' accordingly.",
  "__tz_convert": "Return the `struct tm' representation of TIMER in the local timezone.\n   Use local time if USE_LOCALTIME is nonzero, UTC otherwise.",
  "create_tz_file": "Returns the name of a large TZ file.",
  "is_alpha": "Is A an alphabetic character in the C locale?",
  "sumsize": "Return A + B, exiting if the result would overflow.",
  "my_gmtime_r": "Convert *TP to UT, storing the broken-down time into *TMP.\n   Return TMP if successful, NULL otherwise.  This is like gmtime_r(TP, TMP),\n   except typically faster if USE_LOCALTIME_RZ.",
  "my_localtime_rz": "!defined TYPECHECK",
  "abbrok": "!defined TYPECHECK",
  "saveabbr": "Return a time zone abbreviation.  If the abbreviation needs to be\n   saved, use *BUF (of size *BUFALLOC) to save it, and return the\n   abbreviation in the possibly-reallocated *BUF.  Otherwise, just\n   return the abbreviation.  Get the abbreviation from TMP.\n   Exit on memory allocation failure.",
  "delta_nonneg": "** Thanks to Paul Eggert for logic used in delta_nonneg.",
  "adjusted_yday": "Return A->tm_yday, adjusted to compare it fairly to B->tm_yday.\n   Assume A and B differ by at most one year.",
  "gmtoff": "If A is the broken-down local time and B the broken-down UT for\n   the same instant, return A's UT offset in seconds, where positive\n   offsets are east of Greenwich.  On failure, return LONG_MIN.\n\n   If T is nonnull, *T is the timestamp that corresponds to A; call\n   my_gmtime_r and use its result instead of B.  Otherwise, B is the\n   possibly nonnull result of an earlier call to my_gmtime_r.",
  "ATTRIBUTE_FORMAT": "A substitute for snprintf that is good enough for zdump.",
  "format_local_time": "Store into BUF, of size SIZE, a formatted local time taken from *TM.\n   Use ISO 8601 format +HH:MM:SS.  Omit :SS if SS is zero, and omit\n   :MM too if MM is also zero.\n\n   Return the length of the resulting string.  If the string does not\n   fit, return the length that the string would have been if it had\n   fit; do not overrun the output buffer.",
  "format_utc_offset": "Store into BUF, of size SIZE, a formatted UT offset for the\n   localtime *TM corresponding to time T.  Use ISO 8601 format\n   +HHMMSS, or -HHMMSS for timestamps west of Greenwich; use the\n   format -00 for unknown UT offsets.  If the hour needs more than\n   two digits to represent, extend the length of HH as needed.\n   Otherwise, omit SS if SS is zero, and omit MM too if MM is also\n   zero.\n\n   Return the length of the resulting string, or -1 if the result is\n   not representable as a string.  If the string does not fit, return\n   the length that the string would have been if it had fit; do not\n   overrun the output buffer.",
  "format_quoted_string": "Store into BUF (of size SIZE) a quoted string representation of P.\n   If the representation's length is less than SIZE, return the\n   length; the representation is not null terminated.  Otherwise\n   return SIZE, to indicate that BUF is too small.",
  "istrftime": "Store into BUF (of size SIZE) a timestamp formatted by TIME_FMT.\n   TM is the broken-down time, T the seconds count, AB the time zone\n   abbreviation, and ZONE_NAME the zone name.  Return true if\n   successful, false if the output would require more than SIZE bytes.\n   TIME_FMT uses the same format that strftime uses, with these\n   additions:\n\n   %f zone name\n   %L local time as per format_local_time\n   %Q like \"U\\t%Z\\tD\" where U is the UT offset as for format_utc_offset\n      and D is the isdst flag; except omit D if it is zero, omit %Z if\n      it equals U, quote and escape %Z if it contains nonalphabetics,\n      and omit any trailing tabs.",
  "showtrans": "Show a time transition.",
  "tformat": "** The code below can fail on certain theoretical systems;\n** it works on all known real-world systems as of 2004-12-30.",
  "memory_exhausted": "** Memory allocation.",
  "eats": "** Error handling.",
  "change_directory": "Change the working directory to DIR, possibly creating DIR and its\n   ancestors.  After this is done, all files are accessed with names\n   relative to DIR.",
  "timerange_option": "Set the time range of the output to TIMERANGE.\n   Return true if successful.",
  "relname": "Create symlink contents suitable for symlinking FROM to TO, as a\n   freshly allocated string.  FROM should be a relative file name, and\n   is relative to the global variable DIRECTORY.  TO can be either\n   relative or absolute.",
  "hardlinkerr": "Hard link FROM to TO, following any symbolic links.\n   Return 0 if successful, an error number otherwise.",
  "itsdir": "Return true if NAME is a directory.",
  "itssymlink": "Return true if NAME is a symbolic link.",
  "rcomp": "** Sort by rule name.",
  "gethms": "** Convert a string of one of the forms\n**\th\t-h\thh:mm\t-hh:mm\thh:mm:ss\t-hh:mm:ss\n** into a number of seconds.\n** A null string maps to zero.\n** Call error with errstring and return zero on errors.",
  "is_space": "Is A a space character in the C locale?",
  "lowerit": "If A is an uppercase character in the C locale, return its lowercase\n   counterpart.  Otherwise, return A.",
  "ciequal": "case-insensitive equality",
  "ciprefix": "Return true if ABBR is an initial prefix of WORD, ignoring ASCII case.",
  "rpytime": "** Given a rule, and a year, compute the date (in seconds since January 1,\n** 1970, 00:00 LOCAL time) in that year that the rule refers to.",
  "mkdirs": "Ensure that the directories of ARGNAME exist, by making any missing\n   ones.  If ANCESTORS, do this only for ARGNAME's ancestors; otherwise,\n   do it for ARGNAME too.  Exit with failure if there is trouble.\n   Do not consider an existing non-directory to be trouble.",
  "__mbsinit": "In GNU libc the conversion functions only can convert between the\n   fixed wide character representation and the multibyte\n   representation of the same character set.  Since we use ISO 10646\n   in UCS4 encoding for wide characters the best solution for\n   multibyte characters is the UTF8 encoding.  I.e., the only state\n   information is a counter of the processed bytes so far and the\n   value collected so far.  Especially, we don't have different shift\n   states.",
  "__mbsnrtowcs": "This is a non-standard function but it is very useful in the\n   implementation of stdio because we have to deal with unterminated\n   buffers.  At most NMC bytes will be converted.",
  "ok_test": "Test which should succeed.",
  "fail_test": "Test which should fail.",
  "eof_test": "Test EOF handling.",
  "utf8_test_1": "UTF-8 single byte feeding test for mbrtowc().",
  "utf8_test_2": "Test for NUL byte processing via empty string.",
  "utf8_test_3": "Test for NUL byte processing via NULL string.",
  "__wcpcpy": "Copy SRC to DEST, returning the address of the terminating L'\\0' in\n   DEST.",
  "__wcpncpy": "Copy no more than N wide-characters of SRC to DEST, returning the\n   address of the last character written into DEST.",
  "__wcscasecmp": "Compare S1 and S2, ignoring case, returning less than, equal to or\n   greater than zero if S1 is lexicographically less than,\n   equal to or greater than S2.",
  "__wcscat": "Append SRC on the end of DEST.",
  "WCSCHR": "Find the first occurrence of WC in WCS.",
  "__wcschrnul": "Find the first occurrence of WC in WCS.",
  "WCSCMP": "Compare S1 and S2, returning less than, equal to or\n   greater than zero if S1 is lexicographically less than,\n   equal to or greater than S2.",
  "__wcscpy": "Copy SRC to DEST.",
  "wcscspn": "Return the length of the maximum initial segment\n   of WCS which contains only wide-characters not in REJECT.",
  "wcsdup": "Duplicate S, returning an identical malloc'd string.",
  "__wcsmbs_load_conv": "Load conversion functions for the currently selected locale.",
  "__wcsmbs_clone_conv": "Clone the current conversion function set.",
  "__wcsmbs_named_conv": "Get converters for named charset.",
  "__wcsncasecmp": "Compare no more than N wide characters of S1 and S2,\n   ignoring case, returning less than, equal to or\n   greater than zero if S1 is lexicographically less\n   than, equal to or greater than S2.",
  "WCSNCAT": "Append no more than N wide-character of SRC onto DEST.",
  "WCSNCMP": "Compare no more than N characters of S1 and S2,\n   returning less than, equal to or greater than zero\n   if S1 is lexicographically less than, equal to or\n   greater than S2.",
  "__wcsncpy": "Copy no more than N wide-characters of SRC to DEST.",
  "__wcsnlen": "Return length of string S at most maxlen.",
  "__wcsnrtombs": "This is a non-standard function but it is very useful in the\n   implementation of stdio because we have to deal with unterminated\n   buffers.  At most NWC wide character will be converted.",
  "wcspbrk": "Find the first occurrence in WCS of any wide-character in ACCEPT.",
  "WCSRCHR": "Find the last occurrence of WC in WCS.",
  "wcsspn": "Return the length of the maximum initial segment\n   of WCS which contains only wide-characters in ACCEPT.",
  "wcstok": "Parse WCS into tokens separated by characters in DELIM.  If WCS is\n   NULL, the last string wcstok() was called with is used.",
  "wcswidth": "Determine number of column positions required for first N wide\n   characters (or fewer if S ends before this) in S.",
  "wcwidth": "Determine number of column positions required for CH.",
  "new_exp": "Allocation of expressions.",
  "yy_symbol_value_print": "-----------------------------------.\n| Print this symbol's value on YYO.  |\n`-----------------------------------",
  "yy_symbol_print": "---------------------------.\n| Print this symbol on YYO.  |\n`---------------------------",
  "yy_stack_print": "------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------",
  "yy_reduce_print": "------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------",
  "yydestruct": "-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------",
  "yyparse": "----------.\n| yyparse.  |\n`----------"
}